#!/usr/bin/env python
# _*_ coding: UTF-8 _*

#20180813h
#编写零件生产进度管理程序，界面显示
#先用table_base建grid表格，并实现添加行数，通过grid的refresh显示
#20180814a
#解决了界面选择时间范围出错的情况
#更改table——base的setValue增加增加行数部分
#编写table——base的setRowValue函数，用于界面显示一行数据，已实现。
#20180814b
#删除不必要的程序
#编写合同、订单、组件筛选程序
#更改时间筛选为一个方法time——deal
#20180814c
#编写合同筛选部分的下拉触发事件获取合同号为一个方法contract_id_list_get，已实现。
#编写合同筛选部分的点击触发事件
#编写订单、组件,部件筛选部分的下拉触发事件获取订单号、组件号、部件号为一个方法order_id_list_get，已实现。
#编写订单、组件，部件筛选部分的点击触发事件
#20180814d
#在ID_mysql_update加上try_except判断哪里出错
#调试
##编写门店、下单员筛选部分的下拉触发事件获取门店、下单员为一个方法store_id_list_get，已实现。
#编写终端客筛选部分的下拉触发事件获取合同、或终端客户为terminal_information_get
#缩减有时间条件下的合同查询获取合同号方法self.contractt_time_id_list_get(get_contract_time, self.get_contract_id_list)
#20180814e
#调试
##解决列表grid初始化界面
#缩减有时间条件下的合同查询获取门店、下单员、终端客户方法terminal_information_time_get
#20180814f
#给数据库更新函数加上try——except调试
##解决列表grid初始化界面
#20180815a
##解决列表grid初始化行数界面,已实现
#调试
#20180815b
#调试
#编写部件生产进度管理的tablebase
#调整界面合同、订单、组件部件，个数显示
#20180815c
#调试
#编写部件生产进度管理的grid界面显示,已实现。
#20180815d
#调试
#编写部件生产进度管理的id查询程序。
#20180815e
#调试
#编写部件生产进度管理的id查询程序。
#20180815f
#调试
#编写组件生产进度管理的tablebase。
#编写组件生产进度管理的grid程序。
#对于两重循环加上break
#20180815g
#调试
#完善组件生产进度管理的grid程序。
#编写界面显示id筛选控件
#20180815h
#调试
#编写界面显示类型筛选控件，已实现。
#处理当员工号为多个时用split，界面的姓名显示,已实现。
#20180815i
#调试
#编写订单的tablebase,界面列表显示
#20180816a
#编写order的最大工期计划
#编写订单查询界面设计
#20180816b
#测试获得最大工期计划是否正确
#编写order生产进度管理的界面工序信息显示，已实现。
#测试
#发现当选择终端客户时，界面显示两条信息，已解决。
#20180816c
#测试
#编写类型筛选。
#编写全清、全选程序,已实现。
#把全选全清里的type类型值，用变量传递，方便以后更改
#20180816d
#测试
#编写合同生产进度管理界面控件显示设计
#20180816e
#测试
#整理程序
#发现合同时间筛选有问题，因为合同表单时datetime型，所以对获得时间范围转为datetime型再进行筛选，已解决。
#20180816f
#发现合同界面状态显示有问题，已解决。
#界面合同类型部分程序的调整
#20180816g
#发现合同界面状态时间查询显示有问题，已解决。
#调整合同界面类型查询部分程序
#20180816h
#调整合同界面时间、门店、下单员查询部分程序Contract_display
#20180817a
#调整零件display函数中显示程序，不必要在循环中显示fyf_get_door_element_id_list_get
#发现合同查询界面显示有问题，因为当合同、订单、组件未进到零件表单时，未对其表示零件Id位置进行赋值，已解决。
#20180817c
#更改连接单连接时为db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
#cursor = db.cursor()  # 使用cursor()方法获取操作游标。
#20180817d
#更改零件生产进度管理连接单连接时为db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
#cursor = db.cursor()  # 使用cursor()方法获取操作游标。
#更改部件生产进度管理连接单连接时为db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
#cursor = db.cursor()  # 使用cursor()方法获取操作游标。
#更改组件生产进度管理连接单连接时为db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
#cursor = db.cursor()  # 使用cursor()方法获取操作游标。
#更改订单生产进度管理连接单连接时为db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
#cursor = db.cursor()  # 使用cursor()方法获取操作游标。
#更改合同生产进度管理连接单连接时为db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
#cursor = db.cursor()  # 使用cursor()方法获取操作游标。
#20180817e
#给嵌套循环加上break
#发现当合同发货后，界面显示有误,已解决。
#20180817f
#把组件类型改为下单门店
#调整订单类型筛选部分程序
#20180817g
#编辑合同界面显示类型筛选选项为正在生产、已发货。
#编辑合同界面类型筛选程序，已实现。
#20180817h
#给零件生产进度管理，加上时间测试，计算耗时程序，并调整
#20180817i
#给部件生产进度管理，加上时间测试，计算耗时程序，并调整程序
#20180818a
#给组件生产进度管理，加上时间测试，计算耗时程序，并调整程序
#发现当数据库合同表单、订单表单、组件表单为空时，界面显示有出错，已解决。
#20180818b
#调试。
#发现删减数据库part_grid信息显示出现问题，复现问题。
#20180818c
#调试。
#20180818d
#在aui中加入员工工作量统计。
#编写员工工作量按天统计的panel界面设计
#编写员工工作量按天统计的top_panel界面设计
#20180818e
#在程序加上放属性页的panel
#20180818f
#更改添加Notebook程序，属性页设置为不可关闭
#20180818g
#将日统计量、月统计量放入属性页中，未实现
#20180819a
#在属性页中加日历实现
#20180819b
#设计日工作量界面显示的table_base
#编辑加工中心的界面显示
#20180819c
#读数据库部件表单的长、宽，计算面积，看是否和数据库中Door_erea字段内容一致编写，罗马柱、线条在部件表单Door_area字段没填，则需要长宽计算生活量。
#编写界面显示所有员工工作量的程序，已实现。
#20180819d
#计算同一员工的工作量，并在界面显示,已实现。
#20180819e
#计算door_area,需要考虑door_area为null的情况，再计算累计和,已解决。
#在界面显示员工号对应的姓名,已实现
#在Staff_Workload_Statistics_Day写了刷新函数，在界面显示CNC员工姓名、员工工作量以及个数。
#20180819f
#编写日历获得时间后的时间处理函数
#合入萍姐新版本，对合同查询接口的刷新函数，已调试。
#20180819g
#调整界面时间筛选部分
#在时间条件下，为cnc工位时，员工内容的获取,实现，但未去重,已解决。
#加上清除日期按钮
#20180820a
#日工作量统计显示display中，加上查询条件
#按平米显示
#20180820b
#日工作量统计cnc界面员工点击事件
#调整界面员工个数显示程序。
#20180820c
#日工作量统计点击清除时间检索时程序,加上绑定清除事件。
#20180820d
#调整YLP接口函数，对应界面显示，订单显示组件界面，组件显示部件界面，部件显示零件界面。
#20180821a:
#调整YLP_Pane.py中的跳转函数OnPopupOne订单显示组件界面，组件显示部件界面，部件显示零件界面，已实现
#调整YLP_Pane.py左边fold的界面筛选条件，加上前天、大前天筛选条件，
#加上门店、下单员、终端客户筛选控件界面显示
#编写前天、大前天筛选程序，已实现。
#20180821b:
#调整YLP_Pane.py,加上门店筛选条件combobox下拉列表内容获取的程序
#调整YLP_Pane.py中按日期查询时间的时间函数程序，已调试。
#调整FYF_Pane.py中time_deal()的时间处理函数。
#20180821c:
#调整FYF_Pane.py程序，加上数据库表单内容为空时的情况。
#调整YLP_Pane.py,加上筛选条件下单员combobox下拉列表内容获取的程序，已实现。
#调整YLP_Pane.py,加上筛选条件终端客户combobox下拉列表内容获取的程序，已实现。
#20180821d:
#调整YLP_Pane.py加上门店筛选不为零时程序
#实现了YLP_Pane.py无时间条件下门店、下单员、终端客户的筛选
#20180821e:
#编写YLP_Pane.py有时间条件下门店、下单员、终端客户的筛选
#在YLP_Pane.py时间筛选部分加上门店、下单员、终端客户的初始化
#在YLP_Pane.py中加上时间清除函数
#在YLP_Pane.py中设置日历初始化为当天的日期
#20180821f:
#编写YLP_Pane.py点部件时，界面显示图和grid表格
#20180822a:
#编写YLP_Pane.py点部件时，界面显示图和grid表格,发现只加入grid表超出界面宽度时，却没有滚动条,已解决滚动条问题。
#20180822b:
#编写YLP_Pane.py点部件时，在原有滚动条的基础上，加上图片和信息显示,但是grid位置不对。
#20180822c:
#编写YLP_Pane.py点部件时，在原有滚动条的基础上，加上图片和信息显示,加上boxsizer,界面出现点击两个部件时，界面出现重复现象，但单点一个界面时，界面的显示有问题，点了两个部件时，界面出现了想要的现象。。
#20180822d:
#编写YLP_Pane.py点部件时见面出现点击两个部件时，界面出现重复现象，已解决，在panel的构造函数中，放在boxsizer中,已实现三个界面水平排列且grid下方出现滚动条。
#20180822e:
##去掉YLP_Pane.py点零件时，界面不显示。
#编写YLP_Pane.py设置图片背景颜色，以及textCtrl的label。
#YLP_Pane.py门型长、宽、高信息为水平显示，在与grid垂直显示，但grid的滚动条未加成功
#20180822f:
##编写YLP_Pane.py当界面选中一行的某一列时，图片显示为所选中的零件的图片。
##在YLP_Pane.py的Part_ID_Inform_Panel中，绑定grid界面选中事件，获得选中的行数，再获得零件的类型，显示图片，图片的命名格式为类型.png,已实现。
##在YLP_Pane.py的Part_ID_Inform_Panel中，绑定grid界面选中事件，获得选中的行数，再获得零件的颜色、长、宽、厚，显示在界面上，已实现。
#20180822g:
##测试YLP_Pane.py，出现界面重复,已解决。
##测试YLP_Pane.py，出现界面长宽不对。
#20180823a:
##测试YLP_Pane.py，出现界面长宽不对,已解决。
##测试YLP_Pane.py，图片显示位置不对,已解决。
#20180823b:
##调整YLP_Pane.py，点击部件时界面默认初始化显示此部件的门板零件
#对YLP_Pane.py点击部件时，此部件号下零件号降序排列。
#20180823c:
##调整YLP_Pane.py，如果部件号为高柜门时，界面图形显示的高变大,已实现。
##调整YLP_Pane.py树形菜单下栏去掉零件的显示，现树形界面菜单显示到部件。
#20180823d:
##调整YLP_Pane.py,grid滚动条问题
#编写已完工合同订单管理的界面显示,已完工合同读取合同表单order_contract_internal中状态大于等于130的合同、订单。
#20180823e:
##调整YLP_Pane.py,grid滚动条问题,调试,滚动条问题已解决。
##调整FYF_Pane.py,零件显示个数出现问题已解决,调试。
#20180823f:
##调整YLP_Pane.py,显示图片部分加上log日志，提醒当图库中无要显示图片的情况，已实现。
##调整FYF_Pane.py,如果读到的员工里首尾有空格，读不到员工姓名，用字符串去掉空格函数strip（）处理已正常显示，已测试。
#20180823g:
##备份数据库到本地，调试已完工订单进度管理，部分测试。
#测试批量改变图片文件名。
#20180824a:
#给YLP_Pane.py加上try_except
##调整FYF_Pane.py计算工作量加上已完成表单、在线表单
#建全局变量读状态、员工姓名、部件类型的字典
#20180824b:
#调整FYF_Pane.py界面显示为各个部件的面积、故障面积、手工面积、总工作量面积
#调整FYF_Pane.py读零件表单，在cnc工位，读门板、罗马柱、楣板面积,已显示。
#合同、订单、组件工期计划是根据零件表单工期计划来获取，并且显示最晚的工期计划，则合同、订单、组件工期计划显示正确与否取决于零件工期计划计算结果，现顶线、腰线、脚线在手工打磨之前工序位置待确定。
#20180824c:
#调整FYF_Pane.py读零件表单，在cnc工位，读门板、罗马柱、楣板面积,已显示,调试,出现计算失误，已解决。
#20180824d:
#在FYF_Pane.py计算工作量部分，加上打孔页面。
#在页面跳转时，应绑定事件让界面显示,已实现。
#在FYF_Pane.py编写打孔计算工作量程序,已显示。
#在FYF_Pane.py打孔计算工作量程序点击时间时,界面没有反应，是未对界面grid行数进行调整，已解决。
#20180824e:
#在FYF_Pane.py计算cnc工作量包括当天在线工作量和已完成表单的工作量的总和,已实现。
#在本地数据库测试,已测试
#20180824f:
#在FYF_Pane.py工作量统计界面，未显示姓名,全局变量（globel）定义出错，已解决。
#在FYF_Pane.py加上今天、昨天、大前天、大大前天日期查询程序已实现，用到datetime时间类往time时间类转换的用法
#在FYF_Pane.py的日期选择变化触发事件OnChanged里加上对工作量统计界面日期控件rediobox的初始化程序。
#20180824g:
#在FYF_Pane.py编写铣边、异形机砂计算工作量程序,已显示。
#在FYF_Pane.py编写压条计算工作量程序,已显示。
#20180824h:
#在FYF_Pane.py编写手工打磨工作量程序，已显示。
#20180825a:
#在FYF_Pane.py编写半检分色工作量程序，已显示。
#在FYF_Pane.py调整压条暂时不考虑顶线、腰线、脚线。
#FYF_Pane.py中工作量统计中未考虑刚放到在线表单而未加工无加工人员和加工时间的情况。
#20180825b:
#FYF_Pane.py中把每个工位判断刚放到在线表单而未加工无加工人员和加工时间的情况的程序，整理为同一个函数operator_calculate，已测试。
#FYF_Pane.py中统计一个工位工作量，需要判断这个工位工作量是否是已完成,按进入下一个工位来统计。已显示。
#20180825c:
#FYF_Pane.py按进入工位计算工作量
#FYF_Pane.py员工筛选部分需要区分是哪一个工位的员工筛选,已显示
#FYF_Pane.py中把每个工位判断刚放到在线表单而未加工无加工人员和加工时间的情况的程序，并把在线和完成库的整理为同一个函数operator_calculate，已测试。
#20180825d:
#FYF_Pane.py编写半检分色后模压前分拣、喷胶的工位的工作量的统计
#在给从数据库读到的数据元组赋值前，给元组赋初值零。
#20180825e:
#FYF_Pane.py编写模压工作量统计时，处理模压有可能单人登录、多人登录的工作量计算six_area_calculate，测试未影响单工位登录工作量显示
#整理FYF_Pane.py多人登录的工作量计算six_area_calculate,已显示。
#发现FYF_Pane.py工作量统计界面员工个数显示有问题，已解决。
#20180825f:
#FYF_Pane.py编写模压工作量统计界面显示,已显示。
#FYF_Pane.py膜压筛选部分的员工筛选combobox的下拉触发，员工姓名的去重。
#FYF_Pane.py膜压筛选部分的员工筛选combobox的点击触发事件需要调整员工筛选,发现界面显示有问题，已解决。
#20180825g:
#FYF_Pane.py调整界面工序信息显示，加上一次质检，调整组装、仿古放在二次质检之前。
#调整数据库工序信息，调整并加上一次质检、组装、仿古、二次质检
#FYF_Pane.py零件显示一次质检、二次质检工序信息和时间。
#FYF_Pane.py零件显示一次质检员工工作量。
#20180826a
#更改界面显示，调整模压后分包在质检之后，调整数据库，工序计划，零件界面显示不准确，已解决。
#20180826b
#零件界面工期计划显示不准确，已解决。
#零件界面工期筛选功能出错，读数据库少了一个字段，已解决，已调试。
#20180826c
#FYF_Pane.py调整界面部件显示，已解决。
#FYF_Pane.py调整界面组件界面显示，已解决。
#20180826d
#FYF_Pane.py调整界面打硬包为硬包与入库。
#FYF_Pane.py调整界面订单、合同界面显示，已解决。
#20180826e
#FYF_Pane.py编写膜压后静置工位员工工作量统计，因无静置工位，则需要从数据库读出Position代表静置的全部员工，然后根据膜压的工作量进行均分显示在界面上,已显示。
#FYF_Pane.py调整界面订单、合同界面显示，已解决。
#20180827a
#FYF_Pane.py调整工作量显示界面，在线统计的列表为不可编辑，已实现。
#FYF_Pane.py调整工作量显示界面，故障面积、手工面积统计的列表为可编辑，已实现。
#20180827c
#合入巧姐新版本
#FYF_Pane.py调整工作量各工位显示界面，在线统计的列表为不可编辑，非在线的工作量为可编辑，已实现。
#FYF_Pane.py获取界面全部非在线工作量统计，并获得员工的job_id作为区分。
#FYF_Pane.py获取界面全部非在线工作量统计,并和在线工作量统计累加到总的工作量统计中，已实现。
#20180827d
#发现当界面故障面积、手工面积为空时，程序出错，已解决。
#FYF_Pane.py获取界面多人工位全部非在线工作量统计，并获得员工的job_id作为区分。
#FYF_Pane.py获取界面多人工位全部非在线工作量统计,并和在线工作量统计累加到总的工作量统计中，已实现。
#20180827e
#FYF_Pane.py合回原来的版本。
#合入小车TCP
#20180827f
#FYF_Pane.py调整界面其他单人工位工作量统计,并和在线工作量统计累加到总的工作量统计中，已实现。
#FYF_Pane.py在day_refresh中加入try_except。
#20180827g
#FYF_Pane.py在界面上加入总工作量合计
#FYF_Pane.py调整界面其他单人工位工作量统计,并和在线工作量统计累加到总的工作量统计中，已实现。
#20180828a
#FYF_Pane.py调整cnc工作量界面显示部分为玻璃门板、普通门板
#FYF_Pane.py编写cnc玻璃门板、普通门板面积计算、显示，编写cnc界面更改grid内容界面显示
#20180828b
#FYF_Pane.py编写界面手输部分数字变化，对工作量统计影响,已实现。
#FYF_Pane.py编写界面为多行时手输部分数字变化，对工作量统计有错,已解决。
#FYF_Pane.py编写界面为一次质检工作量统计。
#20180828c
#FYF_Pane.py编写静置工位员工筛选界面程序显示部分,已实现。
#FYF_Pane.py编写一次质检工位员工筛选界面程序显示部分,已实现。
#FYF_Pane.py在界面添加上分包、打软包等工位的属性页。
#20180828d
#FYF_Pane.py编写界面添加上组装、仿古、分包、打软包等工位的显示程序。
#FYF_Pane.py编写组装、仿古等工位的工作量统计、筛选显示程序。
#20180828e
#FYF_Pane.py编写分包、打包工位的工作量统计、筛选显示程序。
#FYF_Pane.py编写生成发货单、发货工位的工作量统计、筛选显示程序。
#20180828f
#FYF_Pane.py编写质检、分包、打包等工位的手动输入程序。
#FYF_Pane.py读数据库某月数据已实现。
#20180828g
#FYF_Pane.py的工作量中加入月工作量查询的界面控件显示。
#FYF_Pane.py在月工作量查询的界面控件，初始化选中本月的radiobotton,已实现。
#20180829a
#FYF_Pane.py设置为当月的radiobotton被选。
#编写月份被点击，如果是当前的年份，则radiobotton选中当前的月份，如果不是，则选中一月。
##FYF_Pane.py编写界面控件点击，年-月时间的处理，用于后续事件筛选查询。
#20180829b
#FYF_Pane.py月工作量统计，在获取时间条件后，对员工进行筛选。
#FYF_Pane.py月工作量统计，编写cnc工位月工作量统计。
#FYF_Pane.py月工作量统计，编写各工位月工作量统计，已实现。
#20180829c
#FYF_Pane.py调整日工作量界面,去掉清除日期索引。
#FYF_Pane.py调整日工作量界面加上各工位的员工位标志position。
##FYF_Pane.py调整日工作量cnc、打孔显示更改为显示全部员工，已测试。
#20180829d
##FYF_Pane.py调整日工作量铣边等显示更改为显示全部员工，已测试。
#20180829e
##FYF_Pane.py因为现在选择工位全部员工，给未在线员工填手动面积时，界面会刷新清除掉原来填的数字，而总面积不会加上未在线员工的工作量,CNC工位已解决。
##FYF_Pane.py解决打孔、铣边、手工打磨工位以上问题已解决。
##FYF_Pane.py解决模压多人工位以上问题已解决。
#FYF_Pane.py员工选中某人时，界面某人背景颜色变颜色,已实现。
#20180830a:
##FYF_Pane.py调整获取工作量的时间限制。
##FYF_Pane.py调整在线有工作量者背景为黄色。
#20180830b:
##FYF_Pane.py调整不在线有工作量者背景为黄色。
##FYF_Pane.py发现在同一工位界面切换时，界面中前一天的手输工位数未清除,已解决。
#20180830c:
##FYF_Pane.py编写界面手输时，界面颜色变化，已实现。
#20180830e:
##FYF_Pane.py编写在数据库未读到数据时，界面的显示。
##FYF_Pane.py编写在员工筛选更改ALL为None。
#20180831a:
##FYF_Pane.py编写日工作量统计其他工位的颜色显示,手工面积更改之后，界面颜色变化已实现。
#20180831b:
##FYF_Pane.py编写日工作量统计打孔工位在线无员工工作量，有手输工作量的情况，已实现。
#整理程序，调试。
#20180831c:
##FYF_Pane.py更改cnc工位不统计顶线、腰线、脚线，另加工位。
##FYF_Pane.py编写日工作量统计模压多人工位在线无员工工作量，有手输工作量的情况，有颜色显示，已实现。
##FYF_Pane.py编写日工作量统计模压多人工位在线无员工工作量，界面有员工选择时，有颜色显示，已实现。
#20180831d:
##FYF_Pane.py编写日工作量统计无工序工位在线无员工工作量，有手输工作量的情况，有颜色显示，已实现。
##FYF_Pane.py编写日工作量统计模压无工序工位员工工作量，界面有员工选择时，此员工有颜色显示，已实现。
#20180831e:
##FYF_Pane.py编写日工作量线条工位日有工作量统计的数据获取程序、显示颜色程序已实现。
##FYF_Pane.py编写日工作量，线条工位有员工选择时，此员工有颜色显示已实现。
#20180831f:
##FYF_Pane.py调整界面即使有员工选择，界面仍显示全部有工作量的员工，被选择的员工显示别的颜色。
##FYF_Pane.py日工作量统计，分各工位分别显示各工位上所有员工的当时日期的工作量，在当时日期时，有工作量的员工显示黄色；若选择了员工时，所选择的员工显示青色；
#工位界面显示时，显示此工位所有员工工作量：1）若界面有表格，则从表中获取手动输入的面积存入列表中，用于10秒后界面的显示（手动输入的面积，无法从数据库读取，界面初始化会被清掉）；2）从info_staff_new中读取此工位下的全部员工后，放在类内全局变量中，在界面显示时先画此工位的全部员工的表格；3）从数据库读取此工位（在线、完成）在所选日期时的员工ID、长、高，a)读到数据则对同一员工工作量进行去重、累加，然后再在界面列表中去找对应此员工的行并填进去工作量，并显示此行颜色；b)未读导数据，则使手动输入的行显示颜色。
#20180831g:
##FYF_Pane.py调整界面各工位，日期更改时，界面显示的初始化,调试。
##合入赵笑新版本，调试。
#20180901a:
##FYF_Pane.py解决同一工位日期调整时，界面手输信息无法保存的问题,调试。
#20180901c:
#在数据库中建工作量手工输入面积表单，关键字段有job_id、porsition、First_day(porsition、First_day用于读数据库某工位的员工手输工作量)、fault_area、manual_area，在cnc工位测试更新已实现。
#编写cnc界面读数据显示的程序。
#20180902a:
##FYF_Pane.py在数据库没有更改手输工作量日期下的手工输入数据时，往数据库中插入此工位下全部员工手工输入数据，已实现。
##FYF_Pane.py在数据库有更改手输工作量日期下的手工输入数据时，往数据库中更新此工位下全部员工手工输入数据，已实现。
#20180903a:
##FYF_Pane.py读取数据库中显示cnc工位界面日期下，获取手输表单的面积，并在界面显示。
#20180903b:
#FYF_Pane.py点击选择员工后，界面没有显示青色需要切换界面后显示，而且再次点击别的员工时，界面切换后会显示两条被选中的青色，因为没有在调用显示函数时，初始化界面grid表格，已解决，已调试。
#20180903c:
#FYF_Pane.py更改打孔、铣边等单人工位的工作量统计的手工输入面积，从数据库读取程序。
#FYF_Pane.py更改打孔、铣边等单人工位的工作量统计的手工输入面积，界面显示程序，已实现。
#20180903d:
#FYF_Pane.py查看手工打磨读取数据库工作量显示,已实现。
#FYF_Pane.py编写工位多人登陆时，读取数据库手工输入工作量，界面显示,已实现，已测试。
#20180903e:
#FYF_Pane.py编写无扫码桥工位的手工输入程序,已实现，已测试。
#FYF_Pane.py调整程序加上try_except，调试。
#FYF_Pane.py整理思路，编写月工作量统计,当在月工作量界面进行手输操作时，数据操作需要考虑，尝试写入时间类型为2018-09的手输工作量统计月工作量。
#20180904a:
#FYF_Pane.py,cncdisplay中读取此月份此工位下员工的月工作量，若没有则根据读到的数据计算本月工作量，若有则根据读到的月工作量、员工本月工作量计算员工月工作量的总和并显示。
#20180904b:
#FYF_Pane.py,cncdisplay中当月工作量手输面积变化时，获取此月份此工位下员工的列表的月工作量值，减去此员工此月手输工作量的和，获得本月员工本月除了此月手输工作量的和外的手输工作量。
#FYF_Pane.py,区分从数据库读取月里的每一天、月工作量的计算。
#20180904c:
#FYF_Pane.py,编写往数据库更新月工作量的程序,在数据库再加一个字段，月的工作量往月份中填,已测试，已实现。
#20180904e:
##FYF_Pane.py,编写cnc工位员工查询的下拉的触发事件，已实现。
##FYF_Pane.py,编写cnc工位员工查询的下拉的点击事件，已实现。
##FYF_Pane.py,编写打孔工位月工作量的计算、输入、显示程序。
#20180904f:
##FYF_Pane.py,编写铣边工位月工作量的计算、输入、显示程序。
##FYF_Pane.py,编写异性机砂工位月工作量的计算、输入、显示程序。
#20180905a:
##FYF_Pane.py,测试程序。
#20180905b:
##FYF_Pane.py,界面多行显示时，计算工作量有问题，已解决，测试。
#20180905c:
##FYF_Pane.py,编写膜压工位月工作量统计。
import os
import sys
import wx
import MySQLdb
import time
import datetime
import wx.grid as gridlib
from wx.adv import CalendarCtrl, GenericCalendarCtrl, CalendarDateAttr
import wx.lib.popupctl as pop
import wx.lib.agw.aui as aui
try:
    dirName = os.path.dirname(os.path.abspath(__file__))
except:
    dirName = os.path.dirname(os.path.abspath(sys.argv[0]))
bitmapDir = os.path.join(dirName, 'bitmaps')
sys.path.append(os.path.split(dirName)[0])
try:
    from agw import aquabutton as AB
except ImportError: # if it's not there locally, try the wxPython lib.
    import wx.lib.agw.aquabutton as AB
from MyFoldPanelBar import *
from ID_DEFINE import *
import wx.lib.delayedresult as delayedresult
#————————————————————————————————————————
#连接数据库
#——————————————————————————————————————-——
def MySql_Connect():
    try:
        global db
        global db_management
        global db_produce
        # db = MySQLdb.connect("192.168.31.250", "chk", "12345678", "hanhai_manufacture",
        #                      charset='utf8')  # 打开数据库连接注charset是否需要
        # db_produce = MySQLdb.connect("192.168.31.250", "chk", "12345678", "hanhai_produce",
        #                              charset='utf8')
        # db_management = MySQLdb.connect("192.168.31.250", "chk", "12345678", "hanhai_management",
        #                             charset='utf8')
        db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0], charset=charset)  # 打开数据库连接注charset是否需要
        db_produce = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[1], charset=charset)
        db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2], charset=charset)
        return True
    except:
        return False
#用到的日历类
class PopDateControl(pop.PopupControl):
    def __init__(self, *_args, **_kwargs):
        pop.PopupControl.__init__(self, *_args, **_kwargs)

        self.win = wx.Window(self, -1, pos=(0, 0), style=0)
        self.cal = CalendarCtrl(self.win, -1, pos=(0, 0))
        self.textCtrl.Disable()

        bz = self.cal.GetBestSize()
        self.win.SetSize(bz)

        # This method is needed to set the contents that will be displayed
        # in the popup
        self.SetPopupContent(self.win)

        # Event registration for date selection
        self.cal.Bind(wx.adv.EVT_CALENDAR, self.OnCalSelected)


    # Method called when a day is selected in the calendar
    def OnCalSelected(self, evt):
        self.PopDown()
        date = self.cal.GetDate()
        date_begin = self.SetValue('%02d/%02d/%04d' % (date.GetDay(),
                                                       date.GetMonth() + 1,
                                                       date.GetYear()))


        evt.Skip()

    # Method overridden from PopupControl
    # This method is called just before the popup is displayed
    # Use this method to format any controls in the popup
    def FormatContent(self):
        # I parse the value in the text part to resemble the correct date in
        # the calendar control
        txtValue = self.GetValue()
        dmy = txtValue.split('/')
        didSet = False

        if len(dmy) == 3:
            date = self.cal.GetDate()
            d = int(dmy[0])
            m = int(dmy[1]) - 1
            y = int(dmy[2])

            if d > 0 and d < 31:
                if m >= 0 and m < 12:
                    if y > 1000:
                        self.cal.SetDate(wx.DateTime.FromDMY(d, m, y))
                        didSet = True

        if not didSet:
            self.cal.SetDate(wx.DateTime.Today())
#用到的字典
try:
    global dict
    global dict_element_type
    global dict_name
    global get_state_list
    global get_operater_name_list
    global get_element_type_list

    dict = {}
    dict_element_type = {}  # 建工序状态——数字字典
    dict_name = {}  # 建工号——姓名字典
    get_state_list = []  # 存放状态字典Key列表
    get_operater_name_list = []  # 存放工号——姓名字典Key列表
    get_element_type_list = []  # 存放部件类型字典Key列表
    if MySql_Connect():
        cursor = db.cursor()  # 使用cursor()方法获取操作游标
        cursor_produce = db_produce.cursor()
        cursor_management = db_management.cursor()
        cursor.execute("SELECT `workposition_name`,`state` FROM `info_state_online` WHERE 1")
        get_state = cursor.fetchall()  # 获取工位状态

        cursor_produce.execute("SELECT `Element_name`,`Element_id` FROM `info_element_type` WHERE 1")
        get_element_type = cursor_produce.fetchall()  # 获取部件类型

        cursor_management.execute("SELECT `Name`,`Job_id` FROM `info_staff_new` WHERE 1")
        get_operater_name = cursor_management.fetchall()  # 得到工位号和姓名
        db.close()
        db_produce.close()
        db_management.close()
        if (len(get_element_type)!=0 and len(get_operater_name)!=0 and len(get_state)!=0):
            for i in range(len(get_element_type)):  # 把读到的数字与类型一对一写入字典
                dict_element_type[get_element_type[i][1]] = get_element_type[i][0]
                get_element_type_list.append(get_element_type[i][1])
            for i in range(len(get_operater_name)):  # 把读到的工位号和姓名一对一写入字典
                dict_name[get_operater_name[i][1]] = get_operater_name[i][0]
                get_operater_name_list.append(get_operater_name[i][1])
            for i in range(len(get_state)):  # 把读到的状态值与工序状态一对一写入字典
                dict[get_state[i][1]] = get_state[i][0]
                get_state_list.append(get_state[i][1])
except:
    pass
global hole_type
global static_position
global CNC_position
global Drilling_position
global Edge_milling_position
global Polish_position
global Regula_position
global Artificial_position
global Half_test_position
global Sort_before_membrane_position
global Glue_spray_position
global Membrane_position
global Assemble_position
global Archaize_position
global Quality_testing_position
global Shelf_after_membrane_position
global Package_position
global Shelf_after_package_position
global Delievery_schedule_position
global Deliver_position
global Line_position

hole_type='0/0/0/0/0'#是否打孔标志
static_position=15
CNC_position=25
Drilling_position=25
Edge_milling_position=25
Polish_position=25
Regula_position=25
Artificial_position=25
Half_test_position=25
Sort_before_membrane_position=25
Glue_spray_position=25
Membrane_position=25
Assemble_position=25
Archaize_position=25
Quality_testing_position=25
Shelf_after_membrane_position=25
Package_position=25
Shelf_after_package_position=25
Delievery_schedule_position=25
Deliver_position=25
Line_position=25
cnc_name=0
cnc_id=1
cnc_glass=2
cnc_door=3
cnc_celing=4
cnc_belt=5
cnc_foot=6
cnc_fault_position=7
cnc_manual_position=8
cnc_area=9
other_name=0
other_id=1
other_door=2
other_roman=3
other_fascial=4
other_celing=5
other_belt=6
other_foot=7
fault_pos=8
manual_pos=9
area_pos=10



#——————————————————————————————————————————————————
#编写零件生产进度管理
#—————————————————————————————————————————————————————
class Progress_Manage_Panel_ID(wx.Panel):
    def __init__(self, parent, log, id=wx.ID_ANY, title="", pos=wx.DefaultPosition,
                 size=(700, 650), style=wx.DEFAULT_FRAME_STYLE):
        wx.Panel.__init__(self, parent)
        self._flags = 0
        self.log = log
        self._leftWindow1 = wx.adv.SashLayoutWindow(self, 101, wx.DefaultPosition,
                                                    wx.Size(200, 1000), wx.NO_BORDER |
                                                    wx.adv.SW_3D | wx.CLIP_CHILDREN)
        self._leftWindow1.SetDefaultSize(wx.Size(220, 1000))
        self._leftWindow1.SetOrientation(wx.adv.LAYOUT_VERTICAL)
        self._leftWindow1.SetAlignment(wx.adv.LAYOUT_LEFT)
        self._leftWindow1.SetSashVisible(wx.adv.SASH_RIGHT, True)
        self._leftWindow1.SetExtraBorderSize(10)
        self._pnl = 0
        self.remainingSpace = ID_LYB_Search_TopPanel(self,self.log)
        self.ID_WINDOW_TOP = 100
        self.ID_WINDOW_LEFT1 = 101
        self.ID_WINDOW_RIGHT1 = 102
        self.ID_WINDOW_BOTTOM = 103
        self._leftWindow1.Bind(wx.adv.EVT_SASH_DRAGGED_RANGE, self.OnFoldPanelBarDrag,
                               id=100, id2=103)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.ReCreateFoldPanel(0)
        self.door_element_id = 1
        self.Arc_bead_id = 2
        self.roman_column_element_id = 3
        self.ceiling_element_id = 4
        self.belt_line_element_id = 5
        self.foot_line_element_id = 6
        self.Push_pull_groove_id = 7
        self.Hinge_id = 8
        self.fascia_board_element_id = 9
        self.Glass_id = 10
        self.Handle_element_id = 11
        self.Genuine_louver_id = 12
        self.Fake_louver_id = 13
        self.Grid_id = 14
        self.Common_layering_id = 15
        self.Copper_strip_glass_id = 16
        self.date=['','']
        self.type = []
        self.abortEvent = delayedresult.AbortEvent()
        self.jobID = 0
        self.remainingSpace.grid.ID_dictory()
        self.Id_refresh()
        self.timer = wx.PyTimer(self.process)
        self.timer.Start(10000)  # 设定计时间隔为10000毫秒
    def OnSize(self, event):
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        event.Skip()
    def OnQuit(self, event):
        self.Destroy()
    def OnToggleWindow(self, event):

        self._leftWindow1.Show(not self._leftWindow1.IsShown())
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()

        event.Skip()
    def OnFoldPanelBarDrag(self, event):

        # if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
        #     return

        if event.GetId() == self.ID_WINDOW_LEFT1:
            self._leftWindow1.SetDefaultSize(wx.Size(event.GetDragRect().width, 1000))

        # Leaves bits of itself behind sometimes
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()
        event.Skip()
    def ReCreateFoldPanel(self, fpb_flags):
        self._pnl = fpb.FoldPanelBar(self._leftWindow1, -1, wx.DefaultPosition,
                                     wx.Size(-1, -1), agwStyle=fpb_flags)
        Images = wx.ImageList(16, 16)
        Images.Add(GetExpandedIconBitmap())
        Images.Add(GetCollapsedIconBitmap())
        item = self._pnl.AddFoldPanel("按日期查询", False, foldIcons=Images)
        self.date_start = wx.DateTimeFromDMY
        self.date_end = wx.DateTimeFromDMY
        # 加上时间控件
        self.calendar_begin = PopDateControl(item, -1)
        self.calendar_begin.textCtrl.SetValue("从")
        self._pnl.AddFoldPanelWindow(item, self.calendar_begin, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.calendar_end = PopDateControl(item, -1)
        self.calendar_end.textCtrl.SetValue("至")
        self._pnl.AddFoldPanelWindow(item, self.calendar_end, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.today = wx.NewId()
        self.yesterday = wx.NewId()
        self.byesterday = wx.NewId()
        self.bbyesterday = wx.NewId()
        # # 加上开始日期查询按钮
        btn_date_start = wx.Button(item, wx.ID_ANY, "开始日期查询")
        self._pnl.AddFoldPanelWindow(item, btn_date_start)
        self.currStyle = wx.RadioButton(item, self.today, "今天")
        self._pnl.AddFoldPanelWindow(item, self.currStyle, fpb.FPB_ALIGN_WIDTH,
                                     fpb.FPB_DEFAULT_SPACING, 10)
        self.radio1 = wx.RadioButton(item, self.yesterday, "昨天")
        self.radio2 = wx.RadioButton(item, self.byesterday, "前天")
        self.radio3 = wx.RadioButton(item, self.bbyesterday, "大前天")
        self._pnl.AddFoldPanelWindow(item, self.radio1, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio2, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio3, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)

        self._pnl.AddFoldPanelSeparator(item)

        btn_date_clear = wx.Button(item, wx.ID_ANY, "清除日期索引")
        self._pnl.AddFoldPanelWindow(item, btn_date_clear)

        item = self._pnl.AddFoldPanel("按订单ID查询", False, foldIcons=Images)
        self.statictext3 = wx.StaticText(item, -1, label="选择查询的合同号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext3)
        self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10))
        # self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_READONLY)
        self._pnl.AddFoldPanelWindow(item, self.contract_combox)

        self.statictext4 = wx.StaticText(item, -1, label="选择查询的订单号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext4)
        self.order_combox = wx.ComboBox(item, -1, pos=(20, 10))
        self._pnl.AddFoldPanelWindow(item, self.order_combox)

        self.statictext5 = wx.StaticText(item, -1, label="选择查询的组件号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext5)
        self.component_combox = wx.ComboBox(item, -1, pos=(20, 10))
        self._pnl.AddFoldPanelWindow(item, self.component_combox)
        self.statictext6 = wx.StaticText(item, -1, label="选择查询的部件号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        self.part_combox = wx.ComboBox(item, -1, pos=(20, 10))
        self._pnl.AddFoldPanelWindow(item, self.part_combox)
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.component_combox.SetValue('ALL')
        self.part_combox.SetValue('ALL')
        self.order_combox.Enable(False)  # 开始使订单查询不使能，当有部件号后使能
        self.component_combox.Enable(False)
        self.part_combox.Enable(False)

        item = self._pnl.AddFoldPanel("按客户查询", False, foldIcons=Images)
        self.statictext6 = wx.StaticText(item, -1, label="选择查询的门店：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        # self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_READONLY)
        self.store_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.store_combox)

        self.statictext7 = wx.StaticText(item, -1, label="选择查询的下单员：")
        self._pnl.AddFoldPanelWindow(item, self.statictext7)
        self.member_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.member_combox)

        self.statictext8 = wx.StaticText(item, -1, label="选择查询的终端客户：")
        self._pnl.AddFoldPanelWindow(item, self.statictext8)
        self.Terminal_customer = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.Terminal_customer)
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')

        item = self._pnl.AddFoldPanel("按类型查询", False, foldIcons=Images)
        type_items = ['门板', '有拱压条', '罗马柱', '顶线', '腰线', '脚线', '推拉槽', '合页', '楣板', '玻璃', '把手', '真百叶', '假百叶', '网格', '普通压条',
                      '铜条玻璃']
        self.type_list_box = wx.CheckListBox(item, -1, (80, 50), wx.DefaultSize, type_items)
        # self.type_list=wx.CheckListBox(item,-1)
        self._pnl.AddFoldPanelWindow(item, self.type_list_box)
        btn_select = wx.Button(item, -1, "全选")
        self._pnl.AddFoldPanelWindow(item, btn_select)
        btn_cancel = wx.Button(item, -1, "全清")
        self._pnl.AddFoldPanelWindow(item, btn_cancel)

        self._pnl.AddFoldPanelSeparator(item)
        self.calendar_begin.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        self.calendar_end.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        btn_date_start.Bind(wx.EVT_BUTTON, self.onDateStart)
        self.currStyle.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        btn_date_clear.Bind(wx.EVT_BUTTON, self.time_clear)
        self.contract_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.contract_information_display)  # 触发合同combobox下拉事件
        self.contract_combox.Bind(wx.EVT_COMBOBOX, self.contract_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.order_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.order_information_display)  # 触发订单号combobox下拉事件
        self.order_combox.Bind(wx.EVT_COMBOBOX, self.order_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.component_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.component_information_display)  # 触发组件号combobox下拉事件
        self.component_combox.Bind(wx.EVT_COMBOBOX, self.component_id_click)  # 触发组件号combobox下拉事件
        self.part_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.part_information_display)  # 触发组件号combobox下拉事件
        self.part_combox.Bind(wx.EVT_COMBOBOX, self.part_id_click)  # 触发组件号combobox下拉事件
        self.store_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.store_information_display)  # 触发合同combobox下拉事件
        self.store_combox.Bind(wx.EVT_COMBOBOX, self.store_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.member_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.member_information_display)  # 触发订单号combobox下拉事件
        self.member_combox.Bind(wx.EVT_COMBOBOX, self.member_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.Terminal_information_display)  # 触发组件号combobox下拉事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX, self.Terminal_id_click)  # 触发组件号combobox下拉事件
        self.type_list_box.Bind(wx.EVT_CHECKLISTBOX, self.OnTypeChange)
        btn_select.Bind(wx.EVT_BUTTON, self.AllSelect)
        btn_cancel.Bind(wx.EVT_BUTTON, self.AllCancel)


        cs = fpb.CaptionBarStyle()
        cs.SetCaptionStyle(fpb.CAPTIONBAR_RECTANGLE)
    # -------------接口函数---------------------------
    def YLP_Combox_Setvalue(self, show_code):
        for i in range(16):
            self.type_list_box.Check(i,False)
        self.type = []
        #self.Refresh_Id()

        self.contract_combox.SetValue(' ')
        self.order_combox.SetValue(' ')
        self.part_combox.SetValue('ALL')
        self.component_combox.SetValue('ALL')

        part_code = show_code
        sec_code=show_code.split('P')
        order_code = show_code.split('S')
        contract_code = show_code.split('O')
        self.contract_combox.SetValue(contract_code[0])
        self.order_combox.SetValue(order_code[0])
        self.component_combox.SetValue(sec_code[0])
        self.part_combox.SetValue(part_code)
        self.Id_refresh()
    #获得、处理时间程序
    def time_deal(self):
        try:
            begin_time = self.calendar_begin.GetValue()  # 获得开始时间
            end_time = self.calendar_end.GetValue()
            if begin_time != "从":
                t2 = str(begin_time).split('/')
                t3 = t2[2], t2[1], t2[0]
                st = '-'
                self.start_time = st.join(t3)
            else:
                self.start_time = '1900-01-01'
            # 转化截止时间格式函数为20180719
            if end_time != "至":
                t2_1 = str(end_time).split('/')
                t3_1 = t2_1[2], t2_1[1], t2_1[0]
                st_1 = '-'
                self.end_time = st_1.join(t3_1)
            else:
                now_time = str(time.strftime('%Y-%m-%d', time.localtime()))  # 本地当前时间
                self.end_time = now_time
            if begin_time == "从" and end_time != "至":
                self.start_time = '1900-01-10'
        except:
            pass

    #时间查询部分程序
    def contract_changed(self,event):
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.component_combox.SetValue('ALL')
        self.part_combox.SetValue('ALL')
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.order_combox.Enable(False)
        self.component_combox.Enable(False)
        self.part_combox.Enable(False)
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.AllCancel(self)
    def onDateStart(self,event):
        self.Id_refresh()
    def OnStyleChange(self, event):
        try:
            eventid = event.GetId()
            now_time='0'
            self.contract_combox.SetValue('ALL')
            self.order_combox.SetValue('ALL')
            self.component_combox.SetValue('ALL')
            self.part_combox.SetValue('ALL')
            self.order_combox.Enable(False)
            self.component_combox.Enable(False)
            self.part_combox.Enable(False)
            self.store_combox.SetValue('ALL')
            self.member_combox.SetValue('ALL')
            self.Terminal_customer.SetValue('ALL')
            self.AllCancel(self)
            if eventid == self.today:
                now_time = str(time.strftime('%d/%m/%Y', time.localtime()))  # 本地当前时间
            elif eventid == self.yesterday:
                today=datetime.date.today()
                oneday=datetime.timedelta(days=1)
                now_time =(today-oneday).strftime('%d/%m/%Y')  # 本地当前时间
            elif eventid == self.byesterday:
                today = datetime.date.today()
                twoday = datetime.timedelta(days=2)
                now_time = (today - twoday).strftime('%d/%m/%Y')  # 本地当前时间
            elif eventid == self.bbyesterday:
                today = datetime.date.today()
                threeday = datetime.timedelta(days=3)
                now_time = (today - threeday).strftime('%d/%m/%Y')  # 本地当前时间
            self.calendar_begin.SetValue(now_time)
            self.calendar_end.SetValue(now_time)
            self.Id_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类查询今天、昨天等查询程序出现错误，请进行检查 \r\n')
    def time_clear(self,evt):
    # try:
        self.calendar_begin.SetValue("从")
        self.calendar_end.SetValue("至")
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.Id_refresh()
    #合同、订单、组件、部件查询部分程序
    def contract_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            get_contract_time=()
            self.get_contract_id_list = []
            self.contract_combox.Clear()#初始化bimia
            self.contract_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.order_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.SetValue('ALL')
            self.part_combox.SetValue('ALL')
            self.order_combox.Enable(False)  # 开始使订单查询不使能，当有部件号后使能
            self.component_combox.Enable(False)
            self.part_combox.Enable(False)
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `First_day`,`Contract_id` FROM `order_element_online` WHERE 1 ")
                get_contract_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_contract_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至": # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类合同查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_contract_time)):
                        self.contract_id_list_get(get_contract_time[i][1], self.get_contract_id_list)
                if len(self.get_contract_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类合同查询此时间范围无合同号，请进行检查 \r\n')
                else:
                    self.contract_combox.Append('ALL')
                    for i in range(len(self.get_contract_id_list)):
                        self.contract_combox.Append(self.get_contract_id_list[i])
            self.Id_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类合同查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def contract_id_list_get(self,data1,data2):
        if data1 != None or data1 != '' or data1 != '0':
            if data1 not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                data2.append(data1)  #
    def contractt_time_id_list_get(self,time1,time2,data1,data2):
        for i in range(len(data1)):
            if data1[i][0] == None or data1[i][0] == '' or data1[i][0] == '0':
                pass
            else:
                get_time_str = (str(data1[i][0]))
                if get_time_str >= time1 and get_time_str <= time2:
                    if data1[i][1] != None or data1[i][1] != '' or data1[i][1] != '0':
                        if data1[i][1] not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                            data2.append(data1[i][1])  #

    def contract_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_contract_id_list) == 0:
            self.order_combox.Enable(False)
            pass
        else:
            self.order_combox.Enable(True)
            self.Id_refresh()
    def order_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            get_order_time=()
            self.get_order_id_list = []
            self.order_combox.Clear()  # 初始化 清空组件号combobox
            self.order_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.part_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.Enable(False)
            self.part_combox.Enable(False)
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute(
                    "SELECT `Contract_id`,`Order_id` FROM `order_element_online` WHERE 1 ")
                get_order_time = cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
            if len(get_order_time)==0:
                # print '在order_part_online中没有合同号、订单号'
                pass
            else:
                self.order_id_list_get(self.contract_combox.GetValue(), self.get_contract_id_list, get_order_time,self.get_order_id_list)
                if len(self.get_order_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类订单查询此合同范围无订单号，请进行检查 \r\n')
                else:
                    self.order_combox.Append('ALL')
                    for i in range(len(self.get_order_id_list)):
                        self.order_combox.Append(self.get_order_id_list[i])
            self.Id_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类订单查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def order_id_list_get(self,date1,date2,date3,date4):
        if date1 == 'ALL':
            for i in range(len(date2)):
                for j in range(len(date3)):
                    if date2[i] == date3[j][0]:
                        if date3[j][1] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                            date4.append(date3[j][1])
                        break
        else:
            for j in range(len(date3)):
                if date1 == date3[j][0]:
                    if date3[j][1] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3[j][1])
    def order_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_order_id_list) == 0:
            self.component_combox.Enable(False)
            pass
        else:
            self.component_combox.Enable(True)
            self.Id_refresh()
    def component_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.get_component_id_list = []
            self.component_combox.Clear()  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.SetValue('ALL')
            self.part_combox.SetValue('ALL')
            self.part_combox.Enable(False)
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute(
                    "SELECT `Order_id`,`Sec_id` FROM `order_element_online` WHERE 1 ")
                get_component_time = cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
            if len(get_component_time)==0:
                pass
            else:
                self.order_id_list_get(self.order_combox.GetValue(), self.get_order_id_list,get_component_time,self.get_component_id_list)
                if len(self.get_component_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类组件查询此订单范围无组件号，请进行检查 \r\n')
                else:
                    self.component_combox.Append('ALL')
                    for i in range(len(self.get_component_id_list)):
                        self.component_combox.Append(self.get_component_id_list[i])
            self.Id_refresh()
        except:
            self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类组件查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def component_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_component_id_list) == 0:
            pass
        else:
            self.part_combox.Enable(True)
            self.Id_refresh()
    def part_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.get_part_id_list = []
            self.part_combox.Clear()  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.part_combox.SetValue('ALL')
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Sec_id`,`Part_id` FROM `order_element_online` WHERE 1 ")
                get_part_time = cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
            if len(get_part_time)==0:
                pass
            else:
                self.order_id_list_get(self.component_combox.GetValue(),self.get_component_id_list,get_part_time,self.get_part_id_list)
                if len(self.get_part_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类部件查询此组件范围无部件号，请进行检查 \r\n')
                else:
                    self.part_combox.Append('ALL')
                    for i in range(len(self.get_part_id_list)):
                        self.part_combox.Append(self.get_part_id_list[i])
            self.Id_refresh()
        except:
            self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类组件查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def part_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_part_id_list) == 0:
            pass
        else:
            self.Id_refresh()
    #门店、下单员、终端客户查询部分程序
    def store_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.store_combox.Clear()
            self.store_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_store_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Dealer` FROM `order_contract_internal` WHERE 1 ")
                get_store_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
                self.time_deal()
            if len(get_store_time)==0:
                # print '未查询到合同号'
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类门店查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time,self.end_time,get_store_time,self.contract_combox.GetValue(),self.get_store_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_store_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_store_time[i][1],get_store_time[i][2], self.get_store_id_list)
                if len(self.get_store_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类门店查询此时间范围无门店号，请进行检查 \r\n')
                else:
                    self.store_combox.Append('ALL')
                    for i in range(len(self.get_store_id_list)):
                        self.store_combox.Append(self.get_store_id_list[i])
            # self.Refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类门店查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def store_id_list_get(self,date1,date2,date3,date4):
        if date1!= 'ALL':
            if date2 == date1:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def store_id_time_list_get(self,time1,time2,date1,date2,date3):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date2!='ALL':
                        if date1[i][1]==date2:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date3.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                date3.append(date1[i][2])  #
    def store_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Id_refresh()
    def member_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.member_combox.Clear()
            self.member_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_member_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name` FROM `order_contract_internal` WHERE 1 ")
                get_member_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_member_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类下单员查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_member_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_member_time[i][1],get_member_time[i][2], self.get_member_id_list)
                if len(self.get_member_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类下单员查询此时间范围无下单员，请进行检查 \r\n')
                else:
                    self.member_combox.Append('ALL')
                    for i in range(len(self.get_member_id_list)):
                        self.member_combox.Append(self.get_member_id_list[i])
            # self.Id_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类下单员查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def member_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Id_refresh()
    def terminal_information_time_get(self,time1,time2,date1,date2,date3,date4):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date2!='ALL':
                        if date1[i][3]==date2:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date4.append(date1[i][2])  #
                    elif date3!='ALL':
                        if date1[i][1]==date3:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date4.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                date4.append(date1[i][2])  #
    def terminal_information_get(self,date1,date2,date3,date4,date5,date6):
        if date1!= 'ALL':
            if date2 == date1:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        elif date5!='ALL':
            if date6==date5:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def Terminal_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.Terminal_customer.Clear()
            self.Terminal_customer.SetValue('ALL')
            self.AllCancel(self)
            self.get_terminal_customer_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name`,`Order_id` FROM `order_order_online` WHERE 1 ")
                get_terminal_customer_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_terminal_customer_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类终端客户查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.terminal_information_time_get(self.start_time,self.end_time,get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_terminal_customer_time)):
                        self.terminal_information_get(self.order_combox.GetValue(), get_terminal_customer_time[i][3],get_terminal_customer_time[i][2],self.get_terminal_customer_id_list,self.contract_combox.GetValue(), get_terminal_customer_time[i][1])
                if len(self.get_terminal_customer_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类终端客户查询此时间范围无终端客户，请进行检查 \r\n')
                else:
                    self.Terminal_customer.Append('ALL')
                    for i in range(len(self.get_terminal_customer_id_list)):
                        self.Terminal_customer.Append(self.get_terminal_customer_id_list[i])
            # self.Id_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类终端客户查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def Terminal_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Id_refresh()
    #类型查询部分程序
    def OnTypeChange(self, event):
        self.type=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        label=self.type_list_box.GetCheckedItems()
        if len(label)==0:
            self.type=[]
        else:
            for i in range(16):
                if i in label:
                    self.type[i]=i+1
        self.Id_refresh()
    def AllSelect(self,evt):
        try:
            for i in range(16):
                self.type_list_box.Check(i,True)
            self.type = [self.door_element_id ,self.Arc_bead_id ,self.roman_column_element_id ,self.ceiling_element_id ,self.belt_line_element_id ,self.foot_line_element_id ,self.Push_pull_groove_id ,self.Hinge_id ,self.fascia_board_element_id ,self.Glass_id ,self.Handle_element_id ,self.Genuine_louver_id ,self.Fake_louver_id ,self.Grid_id ,self.Common_layering_id ,self.Copper_strip_glass_id]
            self.Id_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类中类型全选查询程序出现错误，请进行检查 \r\n')
    def AllCancel(self,evt):
        try:
            for i in range(16):
                self.type_list_box.Check(i,False)
            self.type = []
            self.Id_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID类中类型全清查询程序出现错误，请进行检查 \r\n')
    #界面工序信息、颜色显示
    def Id_color_display(self):
        for i in range(self.remainingSpace.grid.table.GetRowsCount()):
            self.remainingSpace.grid.SetCellAlignment(i, 3, wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)  # 设置内容居中
            b = self.remainingSpace.grid.table.GetValue(i, 3)
            if b == '无工期计划':
                b = '-100'
            b = int(b)
            # # self.SetCellTextColour(i, 1, wx.CYAN)
            if b <= -1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.GREEN)
            if b == 0:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.GREEN)
            if b == 1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.CYAN)
            if b == 2:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.YELLOW)  # 设置背景颜色
            if b >= 3:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.RED)
    def Id_refresh(self):
        self.time_deal()
        self.date[0] = self.start_time
        self.date[1] = self.end_time
        self.contract_id = []
        self.order_id = []
        self.sec_id = []
        self.part_id = []
        self.store_content = []
        self.member_content = []
        self.terminal_customer_content = []
        try:
            self.contract_id.append(self.contract_combox.GetValue())
            self.order_id.append(self.order_combox.GetValue())
            self.sec_id.append(self.component_combox.GetValue())
            self.part_id.append(self.part_combox.GetValue())
            self.store_content.append(self.store_combox.GetValue())
            self.member_content.append(self.member_combox.GetValue())
            self.terminal_customer_content.append(self.Terminal_customer.GetValue())
            self.remainingSpace.grid.DeleteRows(0,numRows=self.remainingSpace.grid.GetNumberRows())
            # start_time_2 = datetime.datetime.now()
            if self.remainingSpace.grid.ID_display(self.date,self.contract_id,self.order_id,self.sec_id,self.part_id,self.store_content,self.member_content,self.terminal_customer_content,self.type):
                # start_time_4=datetime.datetime.now()
                self.remainingSpace.grid.AutoSizeColumns(True)
                self.remainingSpace.grid.EnableEditing(False)
                # end_time_4 = datetime.datetime.now()
                # during_time_4 = (end_time_4 - start_time_4).seconds * 1000 + (end_time_4 - start_time_4).microseconds / 1000
                # print "零件界面自适应时间", during_time_4
                self.Id_color_display()
                self.remainingSpace.number_x.SetValue(str(self.remainingSpace.grid.contract_number))
                self.remainingSpace.number_y.SetValue(str(self.remainingSpace.grid.order_number))
                self.remainingSpace.number_z.SetValue(str(self.remainingSpace.grid.sec_number))
                self.remainingSpace.number_m.SetValue(str(self.remainingSpace.grid.operator_number))
                self.remainingSpace.number_n.SetValue(str(self.remainingSpace.grid.id_number))
            # end_time_2 = datetime.datetime.now()
            # during_time_2 = (end_time_2 - start_time_2).seconds * 1000 + (end_time_2 - start_time_2).microseconds / 1000
            # print "零件显示时间", during_time_2
        except:
            pass
    #进程
    def Start_Thread(self, jobID, abortEvent):
        if (jobID == 1):
            self.remainingSpace.grid.ID_mysql_update()
        return jobID
    def End_Thread(self, delayedResult):
        jobID = delayedResult.getJobID()
        if (jobID ==1):
            self.jobID = 0
            self.timer.Start(10000)
    def process(self):
        self.Id_refresh()
        self.timer.Stop()
        if (self.jobID < 2):
            self.jobID += 1
            jobID=1
            delayedresult.startWorker(self.End_Thread, self.Start_Thread,
                                      wargs=(jobID, self.abortEvent), jobID=1)
        # if (self.jobID ==0):
        #     self.jobID += 1
        #     delayedresult.startWorker(self.End_Thread, self.Start_Thread,
        #                               wargs=(self.jobID, self.abortEvent), jobID=self.jobID)

class ID_LYB_Search_TopPanel(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)
        self.grid = Id_SimpleGrid(self,self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中合同个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticbox_time_number_z = wx.StaticBox(self, -1)
            self.staticboxsizer_number_z = wx.StaticBoxSizer(self.staticbox_time_number_z, wx.HORIZONTAL)
            self.statictext7 = wx.StaticText(self, label="界面中订单个数:")
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))

            self.staticboxsizer_number_z.Add(self.statictext7, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_z.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=1, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_z, proportion=1, flag=wx.EXPAND, border=3)

            self.staticbox_time_number_y_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_y_1 = wx.StaticBoxSizer(self.staticbox_time_number_y_1, wx.HORIZONTAL)
            self.statictext8 = wx.StaticText(self, label="界面中组件个数:")  # 分别水平放'x:文本框'、'm:文本框'
            self.number_z = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_y_1.Add(self.statictext8, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1.Add(self.number_z, proportion=0, flag=wx.EXPAND, border=3)
            self.staticbox_time_number_m = wx.StaticBox(self, -1)
            self.staticboxsizer_number_m = wx.StaticBoxSizer(self.staticbox_time_number_m, wx.HORIZONTAL)
            self.statictext9 = wx.StaticText(self, label="界面中部件个数:")
            self.number_m = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_m.Add(self.statictext9, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_m.Add(self.number_m, proportion=0, flag=wx.EXPAND, border=3)
            self.staticbox_time_number_n = wx.StaticBox(self, -1)
            self.staticboxsizer_number_n = wx.StaticBoxSizer(self.staticbox_time_number_n, wx.HORIZONTAL)
            self.statictext10 = wx.StaticText(self, label="界面中零件个数:")
            self.number_n = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_n.Add(self.statictext10, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_n.Add(self.number_n, proportion=0, flag=wx.EXPAND, border=3)

            self.staticboxsizer_date.Add(self.staticboxsizer_number_y_1, proportion=1, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_m, proportion=1, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_n, proportion=1, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)

            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中ID_LYB_Search_TopPanel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')

class ID_DataTable(gridlib.GridTableBase):
    def __init__(self, data,field_name):
        gridlib.GridTableBase.__init__(self)
        self.data=data
        self.field_name=field_name
        # self.DeleteRows(0,numRows=1)
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                        ]

    #--------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True


    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )

                self.GetView().ProcessTableMessage(msg)
        innerSetValue(row, col, value)
        # self.data[row][col] = value
    def SetRowValue(self, row,value):
        def innerSetValue(row,value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row,value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()
        innerSetValue(row,value)
        # self.data[row][col] = value

    #--------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return  (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0,numRows):
            self.data.remove(self.data[numRows-1-pos-rowNum])
        gridView=self.GetView()
        gridView.BeginBatch()
        deleteMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED,pos,numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True
    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass

class Id_SimpleGrid(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["零件名", "零件型号", "类型", "工期计划", "状态", "下单日期", "排产日期", "预定交货日期", "加工中心", "散板",
                                     "打孔", "铣边", "异形机砂", "压条", "手工打磨", "半检分色", "模压前分拣", "喷胶", "模压", "一次质检",
                                     "组装", "仿古做旧","质检", "分包", "打软包", "硬包与入库", "生成发货单", "发货"]
        information_data = []
        self.table=ID_DataTable(information_data,fyf_grid_operater_station)
        self.SetTable(self.table, True)
        # self.ForceRefresh()
    def ID_dictory(self):
        self.dict = {}  # 建状态——工位字典
        self.dict_element_type = {}  # 建工序状态——数字字典
        self.dict_name = {}  # 建工号——姓名字典
        self.get_state_list = []  # 存放状态字典Key列表
        self.get_operater_name_list = []  # 存放工号——姓名字典Key列表
        self.get_element_type_list = []  # 存放部件类型字典Key列表
        if MySql_Connect():
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor_produce = db_produce.cursor()
            cursor_management = db_management.cursor()
            cursor.execute("SELECT `workposition_name`,`state` FROM `info_state_online` WHERE 1")
            get_state = cursor.fetchall()  # 获取工位状态

            cursor_produce.execute("SELECT `Element_name`,`Element_id` FROM `info_element_type` WHERE 1")
            get_element_type = cursor_produce.fetchall()  # 获取部件类型

            cursor_management.execute("SELECT `Name`,`Job_id` FROM `info_staff_new` WHERE 1")
            get_operater_name = cursor_management.fetchall()  # 得到工位号和姓名
            db.close()
            db_produce.close()
            db_management.close()
            if (len(get_element_type)!=0 and len(get_operater_name)!=0 and len(get_state)!=0):
                for i in range(len(get_element_type)):  # 把读到的数字与类型一对一写入字典
                    self.dict_element_type[get_element_type[i][1]] = get_element_type[i][0]
                    self.get_element_type_list.append(get_element_type[i][1])
                for i in range(len(get_operater_name)):  # 把读到的工位号和姓名一对一写入字典
                    self.dict_name[get_operater_name[i][1]] = get_operater_name[i][0]
                    self.get_operater_name_list.append(get_operater_name[i][1])
                for i in range(len(get_state)):  # 把读到的状态值与工序状态一对一写入字典
                    self.dict[get_state[i][1]] = get_state[i][0]
                    self.get_state_list.append(get_state[i][1])

    def ID_mysql_update(self):
        fyf_door_type = ['', '', '', '', '']  # 定义门板的网格（百叶）、玻璃、压条、套色、仿古
        fyf_get_door_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
        get_operator_time_list = []  ##获取部件号在 压条、仿古、套色、网格、玻璃等条件下各工序应在时间
        get_operator_line_time_list = []
        part_schedule_list = []  # 获取部件号的类型为1、3、9、4、5、6的工期计划列表
        part_list=[]
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE 1 ")
            fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Grid_index`,`Glass_index`,`Bar_index`,`Double_color_index`,`Antique`,`CNC_operation_station`,`Drilling_station`,`Edge_milling_station`,`Surface_grinding_station`,`Trim_station`,`Artificial_polishing_station`,`Half_check_station`,`Sortting_before_membrane_station`,`Glue_spray_station`,`Membrane_station`,`First_quality_station`,`Assemble_station`,`Antique_station`,`All_check_station`,`Sortting_after_membrane_station`,`Packaged_station`,`Packaged_putaway_station`,`Delievery_schedule_station`,`Delivery_station` FROM `info_working_procedure` WHERE 1")
            get_operator_time = cursor.fetchall()  # 获取部件号在 压条、仿古、套色、网格、玻璃等条件下各工序应在时间
            cursor.execute(
                "SELECT `Antique`,`CNC_operation_station`,`Drilling_station`,`Edge_milling_station`,`Surface_grinding_station`,`Trim_station`,`Artificial_polishing_station`,`Half_check_station`,`Sortting_before_membrane_station`,`Glue_spray_station`,`Membrane_station`,`First_quality_station`,`Assemble_station`,`Antique_station`,`All_check_station`,`Sortting_after_membrane_station`,`Packaged_station`,`Packaged_putaway_station`,`Delievery_schedule_station`,`Delivery_station` FROM `info_working_procedure_line` WHERE 1")
            get_operator_line_time = cursor.fetchall()  # 获取部件号在 压条、仿古、套色、网格、玻璃等条件下各工序应在时间
            for i in range(len(get_operator_time)):  # 获取部件号在 压条、仿古、套色、网格、玻璃等条件下各工序应在时间
                get_operator_time_list.append(list(get_operator_time[i]))
            for i in range(len(get_operator_line_time)):  # 获取顶线、腰线、脚线部件号在 压条、仿古、套色、网格、玻璃等条件下各工序应在时间
                get_operator_line_time_list.append(list(get_operator_line_time[i]))
            # 取fyf_get_door_type的pard_id、time_shedule元素放到列表
            for i in range(len(fyf_get_door_element_id)):
                fyf_get_door_element_id_list.append(list(fyf_get_door_element_id[i]))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中IdSimpleGrid类ID_mysql_update()更新数据库工期计划连接数据库失败，请进行检查 \r\n')  #
            return False
        try:
            now_time_str = str(time.strftime('%Y-%m-%d', time.localtime()))  # 本地当前时间
            if len(fyf_get_door_element_id_list)!=0:
                for i in range(len(fyf_get_door_element_id_list)):
                    if fyf_get_door_element_id_list[i][3] != '' and fyf_get_door_element_id_list[i][3] != None and fyf_get_door_element_id_list[i][3] != '0':
                        receive_time_str = str(fyf_get_door_element_id_list[i][3])  # 开始时间的日期时间
                        localtime = datetime.datetime.strptime(now_time_str,'%Y-%m-%d')  # 将当前时间、开始时间转化为 年——月——日，并相减
                        Time = datetime.datetime.strptime(receive_time_str, '%Y-%m-%d')
                        N = (localtime - Time).days  # 由相减的差值，获得进入加工后的第几天
                        # 判断门型型号中是否有网格玻璃
                        if fyf_get_door_element_id_list[i][4] == 4 or fyf_get_door_element_id_list[i][4] == 5 or fyf_get_door_element_id_list[i][6] == 6:
                            if fyf_get_door_element_id_list[i][8] == None or fyf_get_door_element_id_list[i][8] == '0':
                                fyf_door_type[4] = 0
                            else:
                                fyf_door_type[4] = 1
                            a = 0
                            for k in range(0, len(fyf_get_door_element_id_list[i]) - 15,2):  # 工序、时间成对存在，以步长为二则可以每次得到工序位置
                                if fyf_get_door_element_id_list[i][k + 15] != '' and fyf_get_door_element_id_list[i][k + 15] != None and fyf_get_door_element_id_list[i][k + 15] != '0':  # 当能读到加工工位时，查询最后工位应在的工作时间
                                    for h in range(len(get_operator_line_time_list)):  # 与从数据库表单info_working_procedure读到的是哪种类型、各工序应在日期比对
                                        if (get_operator_line_time_list[h][0] == fyf_door_type[4]):
                                            w = get_operator_line_time_list[h][(k + 2) / 2 + 1 - 1]  # 根据是哪种类型的门板，在info_working_procedure表单筛选符合此类型的条件的门板各工序应该在第几天完成
                                            if w != '0' and w != None and w != '':  # 处理一些部件走到不对的工位，时间不对的情况
                                                a = float(w[0])
                                                a = int(a) - 1
                                            break
                            b = N - a
                        else:
                            if '网格' in fyf_get_door_element_id_list[i][5] or '真百叶' in fyf_get_door_element_id_list[i][5]:
                                fyf_door_type[0] = 1
                            else:
                                fyf_door_type[0] = 0
                            if '玻璃' in fyf_get_door_element_id_list[i][5]:
                                fyf_door_type[1] = 1
                            else:
                                fyf_door_type[1] = 0
                            # 判断当部件号一样时，是否有压条、套色、仿古
                            for j in range(3):
                                if fyf_get_door_element_id_list[i][6 + j] == None or fyf_get_door_element_id_list[i][j + 6] == '0':
                                    fyf_door_type[j + 2] = 0
                                else:
                                    fyf_door_type[j + 2] = 1
                            a = 0
                            for k in range(0, len(fyf_get_door_element_id_list[i]) - 15,2):  # 工序、时间成对存在，以步长为二则可以每次得到工序位置
                                if fyf_get_door_element_id_list[i][k + 15] != '' and fyf_get_door_element_id_list[i][k + 15] != None and fyf_get_door_element_id_list[i][k + 15] != '0':  # 当能读到加工工位时，查询最后工位应在的工作时间
                                    for h in range(len(get_operator_time_list)):  # 与从数据库表单info_working_procedure读到的是哪种类型、各工序应在日期比对
                                        if (get_operator_time_list[h][0] == fyf_door_type[0] and get_operator_time_list[h][1] == fyf_door_type[1] and
                                                    get_operator_time_list[h][2] == fyf_door_type[2] and
                                                    get_operator_time_list[h][3] == fyf_door_type[3] and
                                                    get_operator_time_list[h][4] == fyf_door_type[4]):
                                            w = get_operator_time_list[h][(k + 2) / 2 + 5 - 1]  # 根据是哪种类型的门板，在info_working_procedure表单筛选符合此类型的条件的门板各工序应该在第几天完成
                                            if w != '0' and w != None and w != '':  # 处理一些部件走到不对的工位，时间不对的情况
                                                a = float(w[0])
                                                a = int(a) - 1
                                            break
                            b = N - a
                    else:
                        b = -100
                    fyf_get_door_element_id_list[i][12] = b
                    if (fyf_get_door_element_id_list[i][4] == 1 or fyf_get_door_element_id_list[i][4] == 3 or fyf_get_door_element_id_list[i][4] == 9 or fyf_get_door_element_id_list[i][4] == 4 or fyf_get_door_element_id_list[i][4] == 5 or fyf_get_door_element_id_list[i][4] == 6):
                        if fyf_get_door_element_id_list[i][14] not in part_list:
                            part_list.append(fyf_get_door_element_id_list[i][14])
                            part_schedule = [fyf_get_door_element_id_list[i][14], fyf_get_door_element_id_list[i][12]]
                            part_schedule_list.append(part_schedule)
        except:
            print 'test1'
        try:
            if len(fyf_get_door_element_id_list) != 0:
                for i in range(len(fyf_get_door_element_id_list)):
                    cursor.execute("UPDATE `order_element_online` SET `Time_schedule`='%s' WHERE `Id`='%s'" % (fyf_get_door_element_id_list[i][12], fyf_get_door_element_id_list[i][0]))
                db.commit()
        except:
            db.rollback()
            print 'test2'
        try:
            if len(part_schedule_list)!=0:
                for i in range(len(part_schedule_list)):
                    cursor.execute("UPDATE `order_part_online` SET `Time_schedule`='%s' WHERE `Part_id`='%s'" % (
                    part_schedule_list[i][1], part_schedule_list[i][0]))
                db.commit()
        except:
            db.rollback()
            print 'test3'
        # return True
        #

    def ID_display(self,date,contract_id,order_id,sec_id,part_id,store,member,terminal_customer,type):
        fyf_get_door_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
        get_contract_number_list = []
        get_order_number_list = []
        get_sec_number_list = []
        get_operator_number_list = []
        get_receive_time_list = []
        try:
            # start_time_1=datetime.datetime.now()
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Contract_id`,`Receive_time`,`Record_time`,`Order_id` FROM `order_order_online` WHERE 1 ")
            get_receive_time = cursor.fetchall()  # 获取合同号、预计完成订单时间
                # 取fyf_get_door_type的pard_id、time_shedule元素放到列表
            if date[0] == '1900-01-01':
                if contract_id[0] == 'ALL' and order_id[0] == 'ALL' and sec_id[0] == 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE 1 ORDER BY `Time_schedule` DESC ,`Id` ")
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (type[0], type[1], type[2], type[3], type[4], type[5], type[6], type[7], type[8],
                            type[9], type[10], type[11], type[12], type[13], type[14], type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif part_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Part_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " % part_id[0])
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Part_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            part_id[0], type[0], type[1], type[2], type[3], type[4], type[5], type[6], type[7],
                            type[8], type[9], type[10], type[11], type[12], type[13], type[14], type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif sec_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Sec_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " %
                            sec_id[0])
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Sec_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            sec_id[0], type[0], type[1], type[2], type[3], type[4], type[5], type[6], type[7],
                            type[8], type[9], type[10], type[11], type[12], type[13], type[14], type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif order_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Order_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " %
                            order_id[0])
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Order_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            order_id[0], type[0], type[1], type[2], type[3], type[4], type[5], type[6], type[7],
                            type[8], type[9], type[10], type[11], type[12], type[13], type[14], type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif contract_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Contract_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " %
                            contract_id[0])
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Contract_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            contract_id[0], type[0], type[1], type[2], type[3], type[4], type[5], type[6], type[7],
                            type[8], type[9], type[10], type[11], type[12], type[13], type[14], type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            #####如果时间选择情况下
            else:
                if contract_id[0] == 'ALL' and order_id[0] == 'ALL' and sec_id[0] == 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], type[0], type[1], type[2], type[3], type[4], type[5], type[6],
                            type[7], type[8], type[9], type[10], type[11], type[12], type[13], type[14], type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif part_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Part_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], part_id[0]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Part_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], part_id[0], type[0], type[1], type[2], type[3], type[4], type[5],
                            type[6], type[7], type[8], type[9], type[10], type[11], type[12], type[13], type[14],
                            type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif sec_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Sec_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], sec_id[0]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Sec_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], sec_id[0], type[0], type[1], type[2], type[3], type[4], type[5],
                            type[6], type[7], type[8], type[9], type[10], type[11], type[12], type[13], type[14],
                            type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif order_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Order_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], order_id[0]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Order_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], order_id[0], type[0], type[1], type[2], type[3], type[4], type[5],
                            type[6], type[7], type[8], type[9], type[10], type[11], type[12], type[13], type[14],
                            type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                elif contract_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s' ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], contract_id[0]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                    else:
                        cursor.execute(
                            "SELECT `Id`,`heterotype`,`Contract_id`,`First_day`,`Element_type_id`,`Board_type`,`Bar_type`,`Double_color`,`Archaize`,`State`,`Order_id`,`Sec_id`,`Time_schedule`,`Board_thick`,`Part_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Id` " % (
                            date[0], date[1], contract_id[0], type[0], type[1], type[2], type[3], type[4], type[5],
                            type[6], type[7], type[8], type[9], type[10], type[11], type[12], type[13], type[14],
                            type[15]))
                        fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if store[0] != 'ALL':
                cursor.execute(
                    "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Dealer`='%s' " % store[0])
                get_store_contract = cursor.fetchall()  # 获取开始时间、合同号
                get_member_contract = []
                get_terminal_customer_contract = []
            elif member[0] != 'ALL':
                cursor.execute(
                    "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Customer_name`='%s' " % member[0])
                get_member_contract = cursor.fetchall()  # 获取开始时间、合同号
                get_store_contract = []
                get_terminal_customer_contract = []
            elif terminal_customer[0] != 'ALL':
                cursor.execute(
                    "SELECT `Contract_id`,`Order_id` FROM `order_order_online` WHERE `Customer_name`='%s' " %
                    terminal_customer[0])
                get_terminal_customer_contract = cursor.fetchall()  # 获取开始时间、合同号
                get_store_contract = []
                get_member_contract = []
            else:
                get_store_contract = []
                get_member_contract = []
                get_terminal_customer_contract = []
            db.close()
            for i in range(len(get_receive_time)):
                if get_receive_time[i][0] not in get_receive_time_list:
                    get_receive_time_list.append(get_receive_time[i][0])
            if len(get_store_contract) != 0:
                self.fyf_get_door_element_id_list_get(fyf_get_door_element_id, get_store_contract,
                                                      fyf_get_door_element_id_list)
            elif len(get_member_contract) != 0:
                self.fyf_get_door_element_id_list_get(fyf_get_door_element_id, get_store_contract,
                                                      fyf_get_door_element_id_list)
            elif len(get_terminal_customer_contract) != 0:
                for i in range(len(fyf_get_door_element_id)):
                    for k in range(len(get_terminal_customer_contract)):
                        if fyf_get_door_element_id[i][10] == get_terminal_customer_contract[k][1]:
                            fyf_get_door_element_id_list.append(list(fyf_get_door_element_id[i]))
                            break
            else:
                for i in range(len(fyf_get_door_element_id)):  # 获取部件号、门型、部件型号、状态、工序列表
                    fyf_get_door_element_id_list.append(list(fyf_get_door_element_id[i]))
            # end_time_1=datetime.datetime.now()
            # during_time_1 = (end_time_1 - start_time_1).seconds * 1000 + (end_time_1 - start_time_1).microseconds / 1000
            # print "零件查询数据库时间", during_time_1
            try:
                # start_time_3=datetime.datetime.now()
                # self.table.Clear()
                if len(fyf_get_door_element_id_list)!=0:
                    for i in range(len(fyf_get_door_element_id_list)):  # 因为部件号是降序读的，所以跟读的部件号进行比较填入可降序显示零件
                            operator_information = []  # 每次传递工序信息的列表
                            m = 0
                            if fyf_get_door_element_id_list[i][4] == 1 and fyf_get_door_element_id_list[i][1] != 1:
                                element_type = '普通门板'  # 往表单填入部件号型号
                            elif fyf_get_door_element_id_list[i][4] == 1 and fyf_get_door_element_id_list[i][1] == 1:
                                element_type = '异形门板'
                            else:
                                if fyf_get_door_element_id_list[i][4] in self.get_element_type_list:  # 判断是否为有效值
                                    m = fyf_get_door_element_id_list[i][4]
                                    element_type = unicode(self.dict_element_type[m]).encode("utf8")  # 往表单填入部件号型号
                                else:
                                    element_type = fyf_get_door_element_id_list[i][4]  # 往表单填入部件号型号
                                    # self.log.WriteText('生产进度管理，FYF_Pane.py中IDSimpleGrid类读取显示类型，请查看表格进行检查 \r\n')
                            m = 0
                            if fyf_get_door_element_id_list[i][9] in self.get_state_list:  # 判断是否为有效值
                                m = fyf_get_door_element_id_list[i][9]
                                state_number = unicode(self.dict[m]).encode("utf8")
                            else:
                                state_number = fyf_get_door_element_id_list[i][9]
                                # self.log.WriteText('生产进度管理，FYF_Pane.py中IDSimpleGrid类读取状态显示，请查看表格进行检查 \r\n')
                            # 当部件号的合同号与从订单表单中读到的一致时则在界面显示此部件的预定收货日期
                            if fyf_get_door_element_id_list[i][2] not in get_receive_time_list:
                                record_time = '未读到此合同号'
                                receive_time = '未读到此合同号'
                            else:
                                for k in range(len(get_receive_time)):
                                    if fyf_get_door_element_id_list[i][2] == get_receive_time[k][0] and fyf_get_door_element_id_list[i][10] == get_receive_time[k][3]:
                                        if get_receive_time[k][1] != '' or get_receive_time[k][1] != None or \
                                                        get_receive_time[k][1] != '0':
                                            receive_time = str(get_receive_time[k][1].strftime('%Y-%m-%d'))
                                        else:
                                            receive_time = '未读到此部件预定交货时间'
                                        if get_receive_time[k][2] != '' or get_receive_time[k][2] != None or \
                                                        get_receive_time[k][2] != '0':
                                            record_time = str(get_receive_time[k][2].strftime('%Y-%m-%d'))
                                        else:
                                            record_time = '未读到此部件下单时间'
                                        break
                            # 读部件号为门板的各工序工号姓名和工序开始时间
                            b = fyf_get_door_element_id_list[i][12]
                            if b == -100:
                                shedule = '无工期计划'
                            else:
                                shedule = str(b)
                            if fyf_get_door_element_id_list[i][3] != '' and fyf_get_door_element_id_list[i][3] != None and \
                                            fyf_get_door_element_id_list[i][3] != '0':
                                first_day = str(fyf_get_door_element_id_list[i][3])
                            else:
                                first_day = '未排产'
                            for k in range(0, len(fyf_get_door_element_id_list[i]) - 15, 2):  # 减去前部分不属于工序信息后，进行工序信息的处理
                                # 工序姓名时间成对存在，减去开始的部件号和第一天，则以二为步长，读取员工id在通过字典获取员工姓名
                                fyf_insert_operator_name=''
                                if fyf_get_door_element_id_list[i][k + 15] == None or fyf_get_door_element_id_list[i][k + 15] == '':  # 当读到员工工位为空时
                                    fyf_insert_operator_name = ''
                                else:  # 当读到有效员工工位时，查询员工姓名
                                    m = 0
                                    if '&' not in fyf_get_door_element_id_list[i][k+15].strip():
                                        if fyf_get_door_element_id_list[i][k+15].strip() in self.get_operater_name_list:  # 判断是否为有效值
                                            m = fyf_get_door_element_id_list[i][k+15].strip()
                                            fyf_insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                        elif fyf_get_door_element_id_list[i][k+15].strip() == '0':
                                            fyf_insert_operator_name = '管理员'
                                        else:
                                            fyf_insert_operator_name = str(fyf_get_door_element_id_list[i][k+15]).strip()  # 若不是有效值则传值'101'
                                    else:
                                        get_name_list=fyf_get_door_element_id_list[i][k + 15].strip().split('&')
                                        for j in range(len(get_name_list)):
                                            if get_name_list[j] in self.get_operater_name_list:  # 判断是否为有效值
                                                m = get_name_list[j]
                                                insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                            elif get_name_list[j] == '0':
                                                insert_operator_name = '管理员'
                                            else:
                                                insert_operator_name = str(get_name_list[j])  # 若不是有效值则传值'101'
                                                # self.log.WriteText('生产进度管理，FYF_Pane.py中IDSimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                            if fyf_insert_operator_name=='':
                                                fyf_insert_operator_name=insert_operator_name
                                            else:
                                                fyf_insert_operator_name=fyf_insert_operator_name+','+insert_operator_name
                                    # 通过字典获取员工姓名
                                if fyf_insert_operator_name == None or fyf_insert_operator_name == '0':
                                    fyf_insert_operator_name = ''  # 如果读到姓名为空或者姓名为零时，将姓名赋值为空
                                if fyf_get_door_element_id_list[i][k + 16] == None:  # 当读到开始时间为空时
                                    fyf_get_door_element_id_list[i][k + 16] = '无时间'
                                if fyf_insert_operator_name == '':  # 当没有工序操作员时，则没有此工位工序信息
                                    fyf_get_door_element_id_list[i][k + 15] = ''
                                else:  # 有操作员时，输出员工姓名此工序开始时间
                                    fyf_get_door_element_id_list[i][k + 15] = fyf_insert_operator_name + ',' + str(
                                        fyf_get_door_element_id_list[i][k + 16])
                                if fyf_get_door_element_id_list[i][1] == 1 or fyf_get_door_element_id_list[i][13] != 18 or fyf_get_door_element_id_list[i][4] == 2:
                                    if k == 0:
                                        operator_information.append('')
                                        operator_information.append(fyf_get_door_element_id_list[i][k + 15])
                                    else:
                                        operator_information.append(fyf_get_door_element_id_list[i][k + 15])
                                else:
                                    if k == 0:  # 如果走cnc则第一道工序填到第8列cnc工序，否则填到第十列之后
                                        operator_information.append(fyf_get_door_element_id_list[i][15])
                                    elif k == 2:
                                        operator_information.append('')
                                        operator_information.append(fyf_get_door_element_id_list[i][17])
                                    else:
                                        operator_information.append(fyf_get_door_element_id_list[i][k + 15])
                            inform = [fyf_get_door_element_id_list[i][0], fyf_get_door_element_id_list[i][5], element_type,
                                      shedule, state_number, record_time, first_day, receive_time, operator_information[0],
                                      operator_information[1], operator_information[2], operator_information[3],
                                      operator_information[4], operator_information[5], operator_information[6],
                                      operator_information[7], operator_information[8], operator_information[9],
                                      operator_information[10], operator_information[11], operator_information[12],
                                      operator_information[13], operator_information[14], operator_information[15],
                                      operator_information[16], operator_information[17], operator_information[18],operator_information[19]]
                            self.table.SetRowValue(i,inform)
                    # 获得部件号中的合同、订单、组件个数
                for i in range(len(fyf_get_door_element_id_list)):  # 因为之前simple中统一显示，在这里因时间、或筛选原因不统一显示
                    if fyf_get_door_element_id_list[i][2] not in get_contract_number_list:
                        get_contract_number_list.append(fyf_get_door_element_id_list[i][2])
                for i in range(len(fyf_get_door_element_id_list)):
                    if fyf_get_door_element_id_list[i][10] not in get_order_number_list:
                        get_order_number_list.append(fyf_get_door_element_id_list[i][10])
                for i in range(len(fyf_get_door_element_id_list)):
                    if fyf_get_door_element_id_list[i][11] not in get_sec_number_list:
                        get_sec_number_list.append(fyf_get_door_element_id_list[i][11])
                for i in range(len(fyf_get_door_element_id_list)):
                        if fyf_get_door_element_id_list[i][14] not in get_operator_number_list:
                            get_operator_number_list.append(fyf_get_door_element_id_list[i][14])
                self.contract_number = len(get_contract_number_list)
                self.order_number = len(get_order_number_list)
                self.sec_number = len(get_sec_number_list)
                self.operator_number = len(get_operator_number_list)
                self.id_number = len(fyf_get_door_element_id_list)
                # end_time_3 = datetime.datetime.now()
                # during_time_3 = (end_time_3 - start_time_3).seconds * 1000 + (end_time_3 - start_time_3).microseconds / 1000
                # print "零件界面显示时间", during_time_3
                return True
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中IdSimpleGrid类Grid信息显示、获得合同、订单、组件、部件个数出现错误，请进行检查 \r\n')  #
                return False
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_ID连接数据库失败，请进行检查 \r\n')
    def fyf_get_door_element_id_list_get(self,date1,date2,date3):
        for i in range(len(date1)):
            for k in range(len(date2)):
                if date1[i][2] == date2[k][0]:
                    date3.append(list(date1[i]))
                    break


#——---------------------------------------------------------------------------------------------------
#编写部件生产进度管理
#-------------------------------------------------------------------------------------------------------
class Progress_Manage_Panel_Part(wx.Panel):
    def __init__(self, parent, log, id=wx.ID_ANY, title="", pos=wx.DefaultPosition,
                 size=(700, 650), style=wx.DEFAULT_FRAME_STYLE):
        wx.Panel.__init__(self, parent)
        self._flags = 0
        self.log = log
        self._leftWindow1 = wx.adv.SashLayoutWindow(self, 101, wx.DefaultPosition,
                                                    wx.Size(200, 1000), wx.NO_BORDER |
                                                    wx.adv.SW_3D | wx.CLIP_CHILDREN)
        self._leftWindow1.SetDefaultSize(wx.Size(220, 1000))
        self._leftWindow1.SetOrientation(wx.adv.LAYOUT_VERTICAL)
        self._leftWindow1.SetAlignment(wx.adv.LAYOUT_LEFT)
        self._leftWindow1.SetSashVisible(wx.adv.SASH_RIGHT, True)
        self._leftWindow1.SetExtraBorderSize(10)
        self._pnl = 0
        self.remainingSpace = Part_LYB_Search_TopPanel(self,self.log)
        self.ID_WINDOW_TOP = 100
        self.ID_WINDOW_LEFT1 = 101
        self.ID_WINDOW_RIGHT1 = 102
        self.ID_WINDOW_BOTTOM = 103
        self._leftWindow1.Bind(wx.adv.EVT_SASH_DRAGGED_RANGE, self.OnFoldPanelBarDrag,
                               id=100, id2=103)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.ReCreateFoldPanel(0)
        self.door_element_id = 1
        self.roman_column_element_id = 3
        self.ceiling_element_id = 4
        self.belt_line_element_id = 5
        self.foot_line_element_id = 6
        self.fascia_board_element_id = 9
        self.date=['','']
        self.type = []
        self.remainingSpace.grid.Part_dictory()
        self.Part_refresh()
        self.timer = wx.PyTimer(self.Part_refresh)
        self.timer.Start(10000)  # 设定计时间隔为10000毫秒
    def OnSize(self, event):
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        event.Skip()
    def OnQuit(self, event):
        self.Destroy()
    def OnToggleWindow(self, event):

        self._leftWindow1.Show(not self._leftWindow1.IsShown())
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()

        event.Skip()
    def OnFoldPanelBarDrag(self, event):

        # if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
        #     return

        if event.GetId() == self.ID_WINDOW_LEFT1:
            self._leftWindow1.SetDefaultSize(wx.Size(event.GetDragRect().width, 1000))

        # Leaves bits of itself behind sometimes
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()
        event.Skip()
    def ReCreateFoldPanel(self, fpb_flags):
        self._pnl = fpb.FoldPanelBar(self._leftWindow1, -1, wx.DefaultPosition,
                                     wx.Size(-1, -1), agwStyle=fpb_flags)
        Images = wx.ImageList(16, 16)
        Images.Add(GetExpandedIconBitmap())
        Images.Add(GetCollapsedIconBitmap())
        item = self._pnl.AddFoldPanel("按日期查询", False, foldIcons=Images)
        self.date_start = wx.DateTimeFromDMY
        self.date_end = wx.DateTimeFromDMY
        # 加上时间控件
        self.calendar_begin = PopDateControl(item, -1)
        self.calendar_begin.textCtrl.SetValue("从")
        self._pnl.AddFoldPanelWindow(item, self.calendar_begin, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.calendar_end = PopDateControl(item, -1)
        self.calendar_end.textCtrl.SetValue("至")
        self._pnl.AddFoldPanelWindow(item, self.calendar_end, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.today = wx.NewId()
        self.yesterday = wx.NewId()
        self.byesterday = wx.NewId()
        self.bbyesterday = wx.NewId()
        # # 加上开始日期查询按钮
        btn_date_start = wx.Button(item, wx.ID_ANY, "开始日期查询")
        self._pnl.AddFoldPanelWindow(item, btn_date_start)
        self.currStyle = wx.RadioButton(item, self.today, "今天")
        self._pnl.AddFoldPanelWindow(item, self.currStyle, fpb.FPB_ALIGN_WIDTH,
                                     fpb.FPB_DEFAULT_SPACING, 10)
        self.radio1 = wx.RadioButton(item, self.yesterday, "昨天")
        self.radio2 = wx.RadioButton(item, self.byesterday, "前天")
        self.radio3 = wx.RadioButton(item, self.bbyesterday, "大前天")
        self._pnl.AddFoldPanelWindow(item, self.radio1, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio2, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio3, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)

        self._pnl.AddFoldPanelSeparator(item)

        btn_date_clear = wx.Button(item, wx.ID_ANY, "清除日期索引")
        self._pnl.AddFoldPanelWindow(item, btn_date_clear)

        item = self._pnl.AddFoldPanel("按订单ID查询", False, foldIcons=Images)
        self.statictext3 = wx.StaticText(item, -1, label="选择查询的合同号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext3)
        self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10))
        # self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_READONLY)
        self._pnl.AddFoldPanelWindow(item, self.contract_combox)

        self.statictext4 = wx.StaticText(item, -1, label="选择查询的订单号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext4)
        self.order_combox = wx.ComboBox(item, -1, pos=(20, 10))
        self._pnl.AddFoldPanelWindow(item, self.order_combox)

        self.statictext5 = wx.StaticText(item, -1, label="选择查询的组件号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext5)
        self.component_combox = wx.ComboBox(item, -1, pos=(20, 10))
        self._pnl.AddFoldPanelWindow(item, self.component_combox)
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.component_combox.SetValue('ALL')
        self.order_combox.Enable(False)  # 开始使订单查询不使能，当有部件号后使能
        self.component_combox.Enable(False)

        item = self._pnl.AddFoldPanel("按客户查询", False, foldIcons=Images)
        self.statictext6 = wx.StaticText(item, -1, label="选择查询的门店：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        self.store_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.store_combox)

        self.statictext7 = wx.StaticText(item, -1, label="选择查询的下单员：")
        self._pnl.AddFoldPanelWindow(item, self.statictext7)
        self.member_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.member_combox)

        self.statictext8 = wx.StaticText(item, -1, label="选择查询的终端客户：")
        self._pnl.AddFoldPanelWindow(item, self.statictext8)
        self.Terminal_customer = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.Terminal_customer)
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')

        item = self._pnl.AddFoldPanel("按类型查询", False, foldIcons=Images)
        self.door = wx.CheckBox(item, -1, "门板")
        self._pnl.AddFoldPanelWindow(item, self.door)
        self.roman_column = wx.CheckBox(item, -1, "罗马柱")
        self._pnl.AddFoldPanelWindow(item, self.roman_column)
        self.fascia_board = wx.CheckBox(item, -1, "楣板")
        self._pnl.AddFoldPanelWindow(item, self.fascia_board)
        self.ceiling = wx.CheckBox(item, -1, "顶线")
        self._pnl.AddFoldPanelWindow(item, self.ceiling)
        self.belt_line = wx.CheckBox(item, -1, "腰线")
        self._pnl.AddFoldPanelWindow(item, self.belt_line)
        self.foot_line = wx.CheckBox(item, -1, "脚线")
        self._pnl.AddFoldPanelWindow(item, self.foot_line)
        btn_select = wx.Button(item, -1, "全选")
        self._pnl.AddFoldPanelWindow(item, btn_select)
        btn_cancel = wx.Button(item, -1, "全清")
        self._pnl.AddFoldPanelWindow(item, btn_cancel)

        self._pnl.AddFoldPanelSeparator(item)
        self.calendar_begin.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        self.calendar_end.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        btn_date_start.Bind(wx.EVT_BUTTON, self.onDateStart)
        self.currStyle.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        btn_date_clear.Bind(wx.EVT_BUTTON, self.time_clear)
        self.contract_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.contract_information_display)  # 触发合同combobox下拉事件
        self.contract_combox.Bind(wx.EVT_COMBOBOX, self.contract_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.order_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.order_information_display)  # 触发订单号combobox下拉事件
        self.order_combox.Bind(wx.EVT_COMBOBOX, self.order_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.component_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.component_information_display)  # 触发组件号combobox下拉事件
        self.component_combox.Bind(wx.EVT_COMBOBOX, self.component_id_click)  # 触发组件号combobox下拉事件
        self.store_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.store_information_display)  # 触发合同combobox下拉事件
        self.store_combox.Bind(wx.EVT_COMBOBOX, self.store_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.member_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.member_information_display)  # 触发订单号combobox下拉事件
        self.member_combox.Bind(wx.EVT_COMBOBOX, self.member_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.Terminal_information_display)  # 触发组件号combobox下拉事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX, self.Terminal_id_click)  # 触发组件号combobox下拉事件
        self.door.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.roman_column.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.fascia_board.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.ceiling.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.belt_line.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.foot_line.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        btn_select.Bind(wx.EVT_BUTTON, self.AllSelect)
        btn_cancel.Bind(wx.EVT_BUTTON, self.AllCancel)


        cs = fpb.CaptionBarStyle()
        cs.SetCaptionStyle(fpb.CAPTIONBAR_RECTANGLE)
    # -------------接口函数---------------------------
    def YLP_Combox_Setvalue(self, show_code):
            self.door.SetValue(False)
            self.roman_column.SetValue(False)
            self.fascia_board.SetValue(False)
            self.ceiling.SetValue(False)
            self.belt_line.SetValue(False)
            self.foot_line.SetValue(False)

            self.contract_combox.SetValue(' ')
            self.order_combox.SetValue(' ')
            self.component_combox.SetValue('ALL')

            sec_code = show_code
            order_code = show_code.split('S')
            contract_code = show_code.split('O')
            self.contract_combox.SetValue(contract_code[0])
            self.order_combox.SetValue(order_code[0])
            self.component_combox.SetValue(sec_code)
            self.Part_refresh()
    # ------------------------------------------------------
    #获得、处理时间程序
    def time_deal(self):
        try:
            begin_time = self.calendar_begin.GetValue()  # 获得开始时间
            end_time = self.calendar_end.GetValue()
            if begin_time != "从":
                t2 = str(begin_time).split('/')
                t3 = t2[2], t2[1], t2[0]
                st = '-'
                self.start_time = st.join(t3)
            else:
                self.start_time='1900-01-01'
            # 转化截止时间格式函数为20180719
            if end_time != "至":
                t2_1 = str(end_time).split('/')
                t3_1 = t2_1[2], t2_1[1], t2_1[0]
                st_1 = '-'
                self.end_time = st_1.join(t3_1)
            else:
                now_time = str(time.strftime('%Y-%m-%d', time.localtime()))  # 本地当前时间
                self.end_time=now_time
            if begin_time == "从" and end_time != "至":
                self.start_time='1900-01-10'
        except:
            pass
    #时间查询部分程序
    def contract_changed(self,event):
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.component_combox.SetValue('ALL')
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.order_combox.Enable(False)
        self.component_combox.Enable(False)
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.AllCancel(self)
    def onDateStart(self,event):
        self.Part_refresh()
    def OnStyleChange(self, event):
        eventid = event.GetId()
        now_time='0'
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.component_combox.SetValue('ALL')
        self.order_combox.Enable(False)
        self.component_combox.Enable(False)
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.AllCancel(self)
        if eventid == self.today:
            now_time = str(time.strftime('%d/%m/%Y', time.localtime()))  # 本地当前时间
        elif eventid == self.yesterday:
            today=datetime.date.today()
            oneday=datetime.timedelta(days=1)
            now_time =(today-oneday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.byesterday:
            today = datetime.date.today()
            twoday = datetime.timedelta(days=2)
            now_time = (today - twoday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.bbyesterday:
            today = datetime.date.today()
            threeday = datetime.timedelta(days=3)
            now_time = (today - threeday).strftime('%d/%m/%Y')  # 本地当前时间
        self.calendar_begin.SetValue(now_time)
        self.calendar_end.SetValue(now_time)
        self.Part_refresh()
    def time_clear(self,evt):
    # try:
        self.calendar_begin.SetValue("从")
        self.calendar_end.SetValue("至")
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.Part_refresh()
    #合同、订单、组件、部件查询部分程序
    def contract_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.get_contract_id_list = []
            self.contract_combox.Clear()#初始化bimia
            self.contract_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.order_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.SetValue('ALL')
            self.order_combox.Enable(False)  # 开始使订单查询不使能，当有部件号后使能
            self.component_combox.Enable(False)
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `First_day`,`Contract_id` FROM `order_part_online` WHERE 1 ")
                get_contract_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Part连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_contract_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至": # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel类合同查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_contract_time)):
                        self.contract_id_list_get(get_contract_time[i][1], self.get_contract_id_list)
                if len(self.get_contract_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类合同查询此时间范围无合同号，请进行检查 \r\n')
                else:
                    self.contract_combox.Append('ALL')
                    for i in range(len(self.get_contract_id_list)):
                        self.contract_combox.Append(self.get_contract_id_list[i])
            self.Part_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类合同查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def contract_id_list_get(self,data1,data2):
        if data1 != None or data1 != '' or data1 != '0':
            if data1 not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                data2.append(data1)  #
    def contractt_time_id_list_get(self,time1,time2,data1,data2):
        for i in range(len(data1)):
            if data1[i][0] == None or data1[i][0] == '' or data1[i][0] == '0':
                pass
            else:
                get_time_str = (str(data1[i][0]))
                if get_time_str >= time1 and get_time_str <= time2:
                    if data1[i][1] != None or data1[i][1] != '' or data1[i][1] != '0':
                        if data1[i][1] not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                            data2.append(data1[i][1])  #
    def contract_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_contract_id_list) == 0:
            self.order_combox.Enable(False)
            pass
        else:
            self.order_combox.Enable(True)
            self.Part_refresh()
    def order_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.get_order_id_list = []
            self.order_combox.Clear()  # 初始化 清空组件号combobox
            self.order_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.Enable(False)
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute(
                    "SELECT `Contract_id`,`Order_id` FROM `order_part_online` WHERE 1 ")
                get_order_time = cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Part连接数据库失败，请进行检查 \r\n')
            if len(get_order_time)==0:
                # print '在order_part_online中没有合同号、订单号'
                pass
            else:
                self.order_id_list_get(self.contract_combox.GetValue(), self.get_contract_id_list, get_order_time,self.get_order_id_list)
                if len(self.get_order_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类订单查询此合同范围无订单号，请进行检查 \r\n')
                else:
                    self.order_combox.Append('ALL')
                    for i in range(len(self.get_order_id_list)):
                        self.order_combox.Append(self.get_order_id_list[i])
            self.Part_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类订单查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def order_id_list_get(self,date1,date2,date3,date4):
        if date1 == 'ALL':
            for i in range(len(date2)):
                for j in range(len(date3)):
                    if date2[i] == date3[j][0]:
                        if date3[j][1] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                            date4.append(date3[j][1])
                        break
        else:
            for j in range(len(date3)):
                if date1 == date3[j][0]:
                    if date3[j][1] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3[j][1])
    def order_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_order_id_list) == 0:
            self.component_combox.Enable(False)
            pass
        else:
            self.component_combox.Enable(True)
            self.Part_refresh()
    def component_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.get_component_id_list = []
            self.component_combox.Clear()  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.component_combox.SetValue('ALL')
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute(
                    "SELECT `Order_id`,`Sec_id` FROM `order_part_online` WHERE 1 ")
                get_component_time = cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Part连接数据库失败，请进行检查 \r\n')
            if len(get_component_time)==0:
                pass
            else:
                self.order_id_list_get(self.order_combox.GetValue(),self.get_order_id_list, get_component_time,self.get_component_id_list)
                if len(self.get_component_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类组件查询此订单范围无组件号，请进行检查 \r\n')
                else:
                    self.component_combox.Append('ALL')
                    for i in range(len(self.get_component_id_list)):
                        self.component_combox.Append(self.get_component_id_list[i])
            self.Part_refresh()
        except:
            self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel类组件查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def component_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_component_id_list) == 0:
            pass
        else:
            self.Part_refresh()
    def store_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.store_combox.Clear()
            self.store_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_store_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Dealer` FROM `order_contract_internal` WHERE 1 ")
                get_store_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Part连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_store_time)==0:
                # print '未查询到合同号'
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel类门店查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time,self.end_time,get_store_time,self.contract_combox.GetValue(),self.get_store_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_store_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_store_time[i][1],get_store_time[i][2], self.get_store_id_list)
                if len(self.get_store_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类门店查询此时间范围无门店号，请进行检查 \r\n')
                else:
                    self.store_combox.Append('ALL')
                    for i in range(len(self.get_store_id_list)):
                        self.store_combox.Append(self.get_store_id_list[i])
            # self.Refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类门店查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def store_id_list_get(self,date1,date2,date3,date4):
        if date1!= 'ALL':
            if date2 == date1:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def store_id_time_list_get(self,time1,time2,date1,date2,date3):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date2!='ALL':
                        if date1[i][1]==date2:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date3.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                date3.append(date1[i][2])  #
    def store_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Part_refresh()
    def member_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.member_combox.Clear()
            self.member_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_member_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name` FROM `order_contract_internal` WHERE 1 ")
                get_member_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Part连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_member_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel类下单员查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_member_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_member_time[i][1],get_member_time[i][2], self.get_member_id_list)
                if len(self.get_member_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类下单员查询此时间范围无下单员，请进行检查 \r\n')
                else:
                    self.member_combox.Append('ALL')
                    for i in range(len(self.get_member_id_list)):
                        self.member_combox.Append(self.get_member_id_list[i])
            # self.Part_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类下单员查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def member_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Part_refresh()
    def terminal_information_time_get(self,time1,time2,date1,date2,date3,date4):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date2!='ALL':
                        if date1[i][3]==date2:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date4.append(date1[i][2])  #
                    elif date3!='ALL':
                        if date1[i][1]==date3:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date4.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                date4.append(date1[i][2])  #
    def terminal_information_get(self,date1,date2,date3,date4,date5,date6):
        if date1!= 'ALL':
            if date2 == date1:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        elif date5!='ALL':
            if date6==date5:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def Terminal_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.Terminal_customer.Clear()
            self.Terminal_customer.SetValue('ALL')
            self.AllCancel(self)
            self.get_terminal_customer_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name`,`Order_id` FROM `order_order_online` WHERE 1 ")
                get_terminal_customer_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Part连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_terminal_customer_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel类终端客户查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.terminal_information_time_get(self.start_time,self.end_time,get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_terminal_customer_time)):
                        self.terminal_information_get(self.order_combox.GetValue(), get_terminal_customer_time[i][3],get_terminal_customer_time[i][2],self.get_terminal_customer_id_list,self.contract_combox.GetValue(), get_terminal_customer_time[i][1])
                if len(self.get_terminal_customer_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类终端客户查询此时间范围无终端客户，请进行检查 \r\n')
                else:
                    self.Terminal_customer.Append('ALL')
                    for i in range(len(self.get_terminal_customer_id_list)):
                        self.Terminal_customer.Append(self.get_terminal_customer_id_list[i])
            # self.Part_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类终端客户查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def Terminal_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Part_refresh()
    #类型查询部分程序
    def OnTypeChange(self, event):
        self.type = [0, 0, 0, 0, 0, 0]
        # 当在只有时间或有ID选择两种条件下，根据界面选择类型，得到界面显示的部件号
        if self.door.IsChecked():
            if self.door_element_id not in self.type:
                self.type[0] = self.door_element_id
        if self.roman_column.IsChecked():
            if self.roman_column_element_id not in self.type:
                self.type[1] = self.roman_column_element_id
        if self.fascia_board.IsChecked():
            if self.fascia_board_element_id not in self.type:
                self.type[2] = self.fascia_board_element_id
        if self.ceiling.IsChecked():
            if self.ceiling_element_id not in self.type:
                self.type[3] = self.ceiling_element_id
        if self.belt_line.IsChecked():
            if self.belt_line_element_id not in self.type:
                self.type[4] = self.belt_line_element_id
        if self.foot_line.IsChecked():
            if self.foot_line_element_id not in self.type:
                self.type[5] = self.foot_line_element_id
                # 通过调用query_fill_information在界面刷新显示工序信息和各个ID个数
        if self.door.IsChecked() == False and self.roman_column.IsChecked() == False and self.fascia_board.IsChecked() == False and self.ceiling.IsChecked() == False and self.belt_line.IsChecked() == False and self.foot_line.IsChecked() == False:
            self.type = []
        self.Part_refresh()
    def AllSelect(self,evt):
        self.door.SetValue(True)
        self.roman_column.SetValue(True)
        self.fascia_board.SetValue(True)
        self.ceiling.SetValue(True)
        self.belt_line.SetValue(True)
        self.foot_line.SetValue(True)
        self.type = [self.door_element_id ,self.roman_column_element_id ,self.ceiling_element_id ,self.belt_line_element_id ,self.foot_line_element_id ,self.fascia_board_element_id]
        self.Part_refresh()
    def AllCancel(self,evt):
    # try:
        self.door.SetValue(False)
        self.roman_column.SetValue(False)
        self.fascia_board.SetValue(False)
        self.ceiling.SetValue(False)
        self.belt_line.SetValue(False)
        self.foot_line.SetValue(False)
        self.type = []
        self.Part_refresh()
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类中类型全清查询程序出现错误，请进行检查 \r\n')
    #界面工序信息、颜色显示
    def Part_color_display(self):
        for i in range(self.remainingSpace.grid.table.GetRowsCount()):
            self.remainingSpace.grid.SetCellAlignment(i, 3, wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)  # 设置内容居中
            b = self.remainingSpace.grid.table.GetValue(i, 3)
            if b == '无工期计划':
                b = '-100'
            b = int(b)
            # # self.SetCellTextColour(i, 1, wx.CYAN)
            if b <= -1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.GREEN)
            if b == 0:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.GREEN)
            if b == 1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.CYAN)
            if b == 2:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.YELLOW)  # 设置背景颜色
            if b >= 3:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 3, wx.RED)
    def Part_refresh(self):
        self.time_deal()
        self.date[0] = self.start_time
        self.date[1] = self.end_time
        self.contract_id = []
        self.order_id = []
        self.sec_id = []
        self.store_content = []
        self.member_content = []
        self.terminal_customer_content = []
        try:
            self.contract_id.append(self.contract_combox.GetValue())
            self.order_id.append(self.order_combox.GetValue())
            self.sec_id.append(self.component_combox.GetValue())
            self.store_content.append(self.store_combox.GetValue())
            self.member_content.append(self.member_combox.GetValue())
            self.terminal_customer_content.append(self.Terminal_customer.GetValue())
            self.remainingSpace.grid.DeleteRows(0,numRows=self.remainingSpace.grid.GetNumberRows())
            # start_time_2 = datetime.datetime.now()
            if self.remainingSpace.grid.Part_display(self.date,self.contract_id,self.order_id,self.sec_id,self.store_content,self.member_content,self.terminal_customer_content,self.type):
                self.Part_color_display()
                self.remainingSpace.number_x.SetValue(str(self.remainingSpace.grid.contract_number))
                self.remainingSpace.number_y.SetValue(str(self.remainingSpace.grid.order_number))
                self.remainingSpace.number_z.SetValue(str(self.remainingSpace.grid.sec_number))
                self.remainingSpace.number_m.SetValue(str(self.remainingSpace.grid.operator_number))
            # end_time_2 = datetime.datetime.now()
            # during_time_2 = (end_time_2 - start_time_2).seconds * 1000 + (end_time_2 - start_time_2).microseconds / 1000
            # print "部件显示时间", during_time_2
        except:
            pass

class Part_LYB_Search_TopPanel(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)
        self.grid = Part_SimpleGrid(self,self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中合同个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticbox_time_number_z = wx.StaticBox(self, -1)
            self.staticboxsizer_number_z = wx.StaticBoxSizer(self.staticbox_time_number_z, wx.HORIZONTAL)
            self.statictext7 = wx.StaticText(self, label="界面中订单个数:")
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))

            self.staticboxsizer_number_z.Add(self.statictext7, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_z.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=1, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_z, proportion=1, flag=wx.EXPAND, border=3)

            self.staticbox_time_number_y_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_y_1 = wx.StaticBoxSizer(self.staticbox_time_number_y_1, wx.HORIZONTAL)
            self.statictext8 = wx.StaticText(self, label="界面中组件个数:")  # 分别水平放'x:文本框'、'm:文本框'
            self.number_z = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_y_1.Add(self.statictext8, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1.Add(self.number_z, proportion=0, flag=wx.EXPAND, border=3)
            self.staticbox_time_number_m = wx.StaticBox(self, -1)
            self.staticboxsizer_number_m = wx.StaticBoxSizer(self.staticbox_time_number_m, wx.HORIZONTAL)
            self.statictext9 = wx.StaticText(self, label="界面中部件个数:")
            self.number_m = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))

            self.staticboxsizer_number_m.Add(self.statictext9, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_m.Add(self.number_m, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_y_1, proportion=1, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_m, proportion=1, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)

            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Part_LYB_Search_TopPanel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')

class Part_DataTable(gridlib.GridTableBase):
    def __init__(self, data,field_name):
        gridlib.GridTableBase.__init__(self)
        self.data=data
        self.field_name=field_name
        # self.DeleteRows(0,numRows=1)
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_DATETIME,
                          gridlib.GRID_VALUE_DATETIME,
                          gridlib.GRID_VALUE_DATETIME,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          ]


    #--------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True


    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )

                self.GetView().ProcessTableMessage(msg)
        innerSetValue(row, col, value)
        # self.data[row][col] = value
    def SetRowValue(self, row,value):
        def innerSetValue(row,value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row,value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()
        innerSetValue(row,value)
        # self.data[row][col] = value

    #--------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return  (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0,numRows):
            self.data.remove(self.data[numRows-1-pos-rowNum])
        gridView=self.GetView()
        gridView.BeginBatch()
        deleteMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED,pos,numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True
    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass

class Part_SimpleGrid(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["部件名", "部件型号", "类型", "工期计划", "状态", "下单日期", "排产日期", "预定交货日期", "加工中心", "散板",
                                     "打孔", "铣边", "异形机砂", "压条", "手工打磨", "半检分色", "模压前分拣", "喷胶", "模压", "一次质检",
                                     "组装", "仿古做旧","质检", "分包", "打软包", "硬包与入库", "生成发货单", "发货"]
        information_data = []
        self.table=Part_DataTable(information_data,fyf_grid_operater_station)
        self.SetTable(self.table, True)
    def Part_dictory(self):
        self.dict = {}  # 建状态——工位字典
        self.dict_element_type = {}  # 建工序状态——数字字典
        self.dict_name = {}  # 建工号——姓名字典
        self.get_state_list = []  # 存放状态字典Key列表
        self.get_operater_name_list = []  # 存放工号——姓名字典Key列表
        self.get_element_type_list = []  # 存放部件类型字典Key列表
        if MySql_Connect():
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor_produce = db_produce.cursor()
            cursor_management = db_management.cursor()
            cursor.execute("SELECT `workposition_name`,`state` FROM `info_state_online` WHERE 1")
            get_state = cursor.fetchall()  # 获取工位状态

            cursor_produce.execute("SELECT `Element_name`,`Element_id` FROM `info_element_type` WHERE 1")
            get_element_type = cursor_produce.fetchall()  # 获取部件类型

            cursor_management.execute("SELECT `Name`,`Job_id` FROM `info_staff_new` WHERE 1")
            get_operater_name = cursor_management.fetchall()  # 得到工位号和姓名
            db.close()
            db_produce.close()
            db_management.close()
            if len(get_element_type)!=0 and len(get_operater_name)!=0 and len(get_state)!=0:
                for i in range(len(get_element_type)):  # 把读到的数字与类型一对一写入字典
                    self.dict_element_type[get_element_type[i][1]] = get_element_type[i][0]
                    self.get_element_type_list.append(get_element_type[i][1])
                for i in range(len(get_operater_name)):  # 把读到的工位号和姓名一对一写入字典
                    self.dict_name[get_operater_name[i][1]] = get_operater_name[i][0]
                    self.get_operater_name_list.append(get_operater_name[i][1])
                for i in range(len(get_state)):  # 把读到的状态值与工序状态一对一写入字典
                    self.dict[get_state[i][1]] = get_state[i][0]
                    self.get_state_list.append(get_state[i][1])
    def Part_display(self,date,contract_id,order_id,sec_id,store,member,terminal_customer,type):
        fyf_get_door_type_list = []  # 获取全部部件 门型、类型、状态、下单时间、合同号列表
        fyf_get_door_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
        get_contract_number_list = []
        get_order_number_list = []
        get_sec_number_list = []
        get_receive_time_list = []
        fyf_get_door_element_list = []
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # start_time_3 = datetime.datetime.now()
            cursor.execute(
                "SELECT `Contract_id`,`Receive_time`,`Record_time`,`Order_id` FROM `order_order_online` WHERE 1 ")
            get_receive_time = cursor.fetchall()  # 获取合同号、预计完成订单时间
            cursor.execute(
                "SELECT `Part_id`,`First_day`,`Element_type_id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE 1 ORDER BY `Time_schedule` DESC ,`Part_id`")
            fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                # 取fyf_get_door_type的pard_id、time_shedule元素放到列表
            if date[0]=='1900-01-01':
                if contract_id[0]=='ALL' and order_id[0]=='ALL' and sec_id[0]=='ALL':
                    if len(type)==0:#合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE 1 ORDER BY `Time_schedule` DESC ,`Part_id` ")
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " %(type[0],type[1],type[2],type[3],type[4],type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif sec_id[0]!='ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `Sec_id`='%s' ORDER BY `Time_schedule` DESC ,`Part_id` " % sec_id[0])
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `Sec_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " % (sec_id[0],type[0], type[1], type[2], type[3], type[4], type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif order_id[0]!='ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `Order_id`='%s' ORDER BY `Time_schedule` DESC ,`Part_id` " % order_id[0])
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `Order_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " % (order_id[0], type[0], type[1], type[2], type[3], type[4], type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif contract_id[0]!='ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `Contract_id`='%s' ORDER BY `Time_schedule` DESC ,`Part_id` " % contract_id[0])
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `Contract_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " % (contract_id[0], type[0], type[1], type[2], type[3], type[4], type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
            #####如果时间选择情况下
            else:
                if contract_id[0] == 'ALL' and order_id[0] == 'ALL' and sec_id[0] == 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute("SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' ORDER BY `Time_schedule` DESC ,`Part_id` " % (date[0],date[1]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " % (date[0],date[1],type[0], type[1], type[2], type[3], type[4], type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif sec_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Sec_id`='%s' ORDER BY `Time_schedule` DESC ,`Part_id` " %(date[0],date[1],sec_id[0]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Sec_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " % (date[0],date[1],sec_id[0], type[0], type[1], type[2], type[3], type[4], type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif order_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Order_id`='%s' ORDER BY `Time_schedule` DESC ,`Part_id` " %(date[0],date[1],order_id[0]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Order_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " % (date[0],date[1],order_id[0], type[0], type[1], type[2], type[3], type[4], type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif contract_id[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s' ORDER BY `Time_schedule` DESC ,`Part_id` " %(date[0],date[1],contract_id[0]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Part_id`,`Door_type`,`Element_type_id`,`State`,`Contract_id`,`Order_id`,`Sec_id`,`Time_schedule`,`heterotype`,`Door_thick` FROM `order_part_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s' and (`Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s' or `Element_type_id`='%s') ORDER BY `Time_schedule` DESC ,`Part_id` " % (date[0],date[1],contract_id[0], type[0], type[1], type[2], type[3], type[4], type[5]))
                        fyf_get_door_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
            if store[0] != 'ALL':
                cursor.execute(
                    "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Dealer`='%s' " % store[0])
                get_store_contract = cursor.fetchall()  # 获取开始时间、合同号
                get_member_contract = []
                get_terminal_customer_contract = []
            elif member[0] != 'ALL':
                cursor.execute(
                    "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Customer_name`='%s' " % member[0])
                get_member_contract = cursor.fetchall()  # 获取开始时间、合同号
                get_store_contract = []
                get_terminal_customer_contract = []
            elif terminal_customer[0] != 'ALL':
                cursor.execute(
                    "SELECT `Contract_id`,`Order_id` FROM `order_order_online` WHERE `Customer_name`='%s' " %
                    terminal_customer[0])
                get_terminal_customer_contract = cursor.fetchall()  # 获取开始时间、合同号
                get_store_contract = []
                get_member_contract = []
            else:
                get_store_contract = []
                get_member_contract = []
                get_terminal_customer_contract = []
            db.close()
            if len(get_store_contract) != 0:
                for i in range(len(fyf_get_door_type)):
                    for k in range(len(get_store_contract)):
                        if fyf_get_door_type[i][4] == get_store_contract[k][0]:
                            fyf_get_door_type_list.append(list(fyf_get_door_type[i]))
                            break
            elif len(get_member_contract) != 0:
                for i in range(len(fyf_get_door_type)):
                    for k in range(len(get_member_contract)):
                        if fyf_get_door_type[i][4] == get_member_contract[k][0]:
                            fyf_get_door_type_list.append(list(fyf_get_door_type[i]))
                            break
            elif len(get_terminal_customer_contract) != 0:
                for i in range(len(fyf_get_door_type)):
                    for k in range(len(get_terminal_customer_contract)):
                        if fyf_get_door_type[i][5] == get_terminal_customer_contract[k][1]:
                            fyf_get_door_type_list.append(list(fyf_get_door_type[i]))
                            break
            else:
                for i in range(len(fyf_get_door_type)):  # 获取部件号、门型、部件型号、状态、工序列表
                    fyf_get_door_type_list.append(list(fyf_get_door_type[i]))
            # self.table.Clear()
            for i in range(len(get_receive_time)):
                if get_receive_time[i][0] not in get_receive_time_list:
                    get_receive_time_list.append(get_receive_time[i][0])
            for i in range(len(fyf_get_door_element_id)):  # 添加为部件门板的各个工序工号、时间列表
                fyf_get_door_element_id_list.append(list(fyf_get_door_element_id[i]))
            for i in range(len(fyf_get_door_element_id)):
                if fyf_get_door_element_id[i][0] not in fyf_get_door_element_list:
                    fyf_get_door_element_list.append(fyf_get_door_element_id[i][0])
            # end_time_3 = datetime.datetime.now()
            # during_time_3 = (end_time_3 - start_time_3).seconds * 1000 + (end_time_3 - start_time_3).microseconds / 1000
            # print "部件查询数据库时间", during_time_3
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Part连接数据库失败，请进行检查 \r\n')
    # try:
    #     start_time_1=datetime.datetime.now()
        for i in range(len(fyf_get_door_type_list)):  # 读取全部部件编号的各工位的员工编号和开始时间
            # 往grid表单中填入工序信息# 往grid 中填入预定收货日期# 填部件号为预定发货时间
            operator_information = []
            b = fyf_get_door_type_list[i][7]
            if b == -100 or b==None:
                shedule='无工期计划'
            else:
                shedule=str(b)
            m = 0
            if fyf_get_door_type_list[i][2] == 1 and fyf_get_door_type_list[i][8] != 1:
                element_type='普通门板'
            elif fyf_get_door_type_list[i][2] == 1 and fyf_get_door_type_list[i][8] == 1:
                element_type = '异形门板'
            else:
                if fyf_get_door_type_list[i][2] in self.get_element_type_list:  # 判断是否为有效值
                    m = fyf_get_door_type_list[i][2]
                    element_type=unicode(self.dict_element_type[m]).encode("utf8")
                else:
                    element_type=fyf_get_door_type_list[i][2]
            m = 0
            if fyf_get_door_type_list[i][3] in self.get_state_list:  # 判断是否为有效值
                m = fyf_get_door_type_list[i][3]
                state_number=unicode(self.dict[m]).encode("utf8")
            else:
                state_number=fyf_get_door_type_list[i][3]
    # 当部件号的合同号与从订单表单中读到的一致时则在界面显示此部件的预定收货日期
            if fyf_get_door_type_list[i][4] not in get_receive_time_list:
                receive_time='未读到此合同号'
                record_time='未读到此合同号'
            else:
                for k in range(len(get_receive_time)):
                    if fyf_get_door_type_list[i][4] == get_receive_time[k][0] and fyf_get_door_type_list[i][5] == get_receive_time[k][3]:
                        if get_receive_time[k][1]!=''or get_receive_time[k][1]!=None or get_receive_time[k][1]!='0':
                            receive_time=str(get_receive_time[k][1].strftime('%Y-%m-%d'))
                        else:
                            receive_time='未读到此部件预定交货时间'
                        if get_receive_time[k][2]!=''or get_receive_time[k][2]!=None or get_receive_time[k][2]!='0':
                            record_time=str(get_receive_time[k][2].strftime('%Y-%m-%d'))
                        else:
                            record_time='未读到此部件下单时间'
                        break
            # 读部件号为门板的各工序工号姓名和工序开始时间
            if fyf_get_door_type_list[i][0] not in fyf_get_door_element_list:
                first_day = '未排产'
                operator_information = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','']
            else:
                for k in range(len(fyf_get_door_element_id_list)):#全部部件号各工序信息都在列表fyf_get_door_element_id_list
                    if fyf_get_door_type_list[i][0]==fyf_get_door_element_id_list[k][0] and fyf_get_door_type_list[i][2]==fyf_get_door_element_id_list[k][2]:
                        #判断找到符合部件号，再分解各工序员工ID的姓名和时间信息
                        if fyf_get_door_element_id_list[k][1] == None:
                            first_day='未排产'
                        else:
                            first_day=str(fyf_get_door_element_id_list[k][1])
                        for j in range(0,len(fyf_get_door_element_id_list[k])-3,2):
                            #工序姓名时间成对存在，减去开始的部件号和第一天，则以二为步长，读取员工id在通过字典获取员工姓名
                            fyf_insert_operator_name=''
                            if fyf_get_door_element_id_list[k][j + 3] == None or fyf_get_door_element_id_list[k][j + 3] == '':  # 当读到员工工位为空时
                                fyf_insert_operator_name = ''
                            else:  # 当读到有效员工工位时，查询员工姓名
                                m=0
                                m = 0
                                if '&' not in fyf_get_door_element_id_list[k][j + 3].strip():
                                    if fyf_get_door_element_id_list[k][j + 3].strip() in self.get_operater_name_list:  # 判断是否为有效值
                                        m = fyf_get_door_element_id_list[k][j + 3].strip()
                                        fyf_insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                    elif fyf_get_door_element_id_list[k][j + 3].strip() == '0':
                                        fyf_insert_operator_name = '管理员'
                                    else:
                                        fyf_insert_operator_name = str(fyf_get_door_element_id_list[k][j + 3]).strip()  # 若不是有效值则传值'101'
                                else:
                                    get_name_list = fyf_get_door_element_id_list[k][j + 3].strip().split('&')
                                    for n in range(len(get_name_list)):
                                        if get_name_list[n] in self.get_operater_name_list:  # 判断是否为有效值
                                            m = get_name_list[n]
                                            insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                        elif get_name_list[n] == '0':
                                            insert_operator_name = '管理员'
                                        else:
                                            insert_operator_name = str(get_name_list[n])  # 若不是有效值则传值'101'
                                            # self.log.WriteText('生产进度管理，FYF_Pane.py中IDSimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                        if fyf_insert_operator_name == '':
                                            fyf_insert_operator_name = insert_operator_name
                                        else:
                                            fyf_insert_operator_name = fyf_insert_operator_name + ',' + insert_operator_name
                                            # 通过字典获取员工姓名
                                #通过字典获取员工姓名
                            if fyf_insert_operator_name == None or fyf_insert_operator_name == '0':
                                fyf_insert_operator_name = ''  # 如果读到姓名为空或者姓名为零时，将姓名赋值为空
                            if fyf_get_door_element_id_list[k][ j + 4] == None:  # 当读到开始时间为空时
                                fyf_get_door_element_id_list[k][j+4] ='无时间'
                            if fyf_insert_operator_name == '':  # 当没有工序操作员时，则没有此工位工序信息
                                fyf_get_door_element_id_list[k][j+3] = ''
                            else:  # 有操作员时，输出员工姓名此工序开始时间
                                fyf_get_door_element_id_list[k][j + 3] = fyf_insert_operator_name + ',' + str(fyf_get_door_element_id_list[k][ j + 4])
                            #对grid界面分走cnc还是散板进行显示
                            if fyf_get_door_type_list[i][8]==1 or fyf_get_door_type_list[i][9]!=18:
                                if j==0:
                                    operator_information.append('')
                                    operator_information.append(fyf_get_door_element_id_list[k][j+3])
                                else:
                                    operator_information.append(fyf_get_door_element_id_list[k][j+3])
                            else:
                                if j==0:#如果走cnc则第一道工序填到第8列cnc工序，否则填到第十列之后
                                    operator_information.append(fyf_get_door_element_id_list[k][3])
                                elif j==2:
                                    operator_information.append('')
                                    operator_information.append(fyf_get_door_element_id_list[k][5])
                                else:
                                    operator_information.append(fyf_get_door_element_id_list[k][j+3])
                        break
            inform=[fyf_get_door_type_list[i][0],fyf_get_door_type_list[i][1],element_type,shedule,state_number,record_time,first_day,receive_time,operator_information[0],operator_information[1],operator_information[2],operator_information[3],operator_information[4],operator_information[5],operator_information[6],operator_information[7],operator_information[8],operator_information[9],operator_information[10],operator_information[11],operator_information[12],operator_information[13],operator_information[14],operator_information[15],operator_information[16],operator_information[17],operator_information[18],operator_information[19]]
            self.table.SetRowValue(i, inform)

            #读取部件号为门板第一天日期并与实际日期做差，并计算工期计划
        self.AutoSizeColumns(True)
        self.EnableEditing(False)
        # 获得部件号中的合同、订单、组件个数
        for i in range(len(fyf_get_door_type_list)):  # 因为之前simple中统一显示，在这里因时间、或筛选原因不统一显示
            if fyf_get_door_type_list[i][4] not in get_contract_number_list:
                get_contract_number_list.append(fyf_get_door_type_list[i][4])
        for i in range(len(fyf_get_door_type_list)):
            if fyf_get_door_type_list[i][5] not in get_order_number_list:
                get_order_number_list.append(fyf_get_door_type_list[i][5])
        for i in range(len(fyf_get_door_type_list)):
            if fyf_get_door_type_list[i][6] not in get_sec_number_list:
                get_sec_number_list.append(fyf_get_door_type_list[i][6])
        self.contract_number = len(get_contract_number_list)
        self.order_number=len(get_order_number_list)
        self.sec_number=len(get_sec_number_list)
        self.operator_number = len(fyf_get_door_type_list)
        # end_time_1 = datetime.datetime.now()
        # during_time_1 = (end_time_1 - start_time_1).seconds * 1000 + (end_time_1 - start_time_1).microseconds / 1000
        # print "部件获取显示信息时间", during_time_1
        return True
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Part_display类Grid信息显示、获得合同、订单、组件、部件个数出现错误，请进行检查 \r\n')  #
    #     return False
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中连接数据库失败，请进行检查 \r\n')

#--------------------------------------------------------------------------------------------------------
#编写组件生产进度管理
#---------------------------------------------------------------------------------------------------------
class Progress_Manage_Panel_Sec(wx.Panel):
    def __init__(self, parent, log, id=wx.ID_ANY, title="", pos=wx.DefaultPosition,
                 size=(700, 650), style=wx.DEFAULT_FRAME_STYLE):
        wx.Panel.__init__(self, parent)
        self._flags = 0
        self.log = log
        self._leftWindow1 = wx.adv.SashLayoutWindow(self, 101, wx.DefaultPosition,
                                                    wx.Size(200, 1000), wx.NO_BORDER |
                                                    wx.adv.SW_3D | wx.CLIP_CHILDREN)
        self._leftWindow1.SetDefaultSize(wx.Size(220, 1000))
        self._leftWindow1.SetOrientation(wx.adv.LAYOUT_VERTICAL)
        self._leftWindow1.SetAlignment(wx.adv.LAYOUT_LEFT)
        self._leftWindow1.SetSashVisible(wx.adv.SASH_RIGHT, True)
        self._leftWindow1.SetExtraBorderSize(10)
        self._pnl = 0
        self.remainingSpace = Sec_LYB_Search_TopPanel(self,self.log)
        self.ID_WINDOW_TOP = 100
        self.ID_WINDOW_LEFT1 = 101
        self.ID_WINDOW_RIGHT1 = 102
        self.ID_WINDOW_BOTTOM = 103
        self._leftWindow1.Bind(wx.adv.EVT_SASH_DRAGGED_RANGE, self.OnFoldPanelBarDrag,
                               id=100, id2=103)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.ReCreateFoldPanel(0)
        self.normal_element_id=0
        self.complete_set_element_id=1
        self.date=['','']
        self.type = []
        self.remainingSpace.grid.Sec_dictory()
        self.Sec_refresh()
        self.timer = wx.PyTimer(self.Sec_refresh)
        self.timer.Start(10000)  # 设定计时间隔为10000毫秒
    def OnSize(self, event):
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        event.Skip()
    def OnQuit(self, event):
        self.Destroy()
    def OnToggleWindow(self, event):

        self._leftWindow1.Show(not self._leftWindow1.IsShown())
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()

        event.Skip()
    def OnFoldPanelBarDrag(self, event):

        # if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
        #     return

        if event.GetId() == self.ID_WINDOW_LEFT1:
            self._leftWindow1.SetDefaultSize(wx.Size(event.GetDragRect().width, 1000))

        # Leaves bits of itself behind sometimes
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()
        event.Skip()
    def ReCreateFoldPanel(self, fpb_flags):
        self._pnl = fpb.FoldPanelBar(self._leftWindow1, -1, wx.DefaultPosition,
                                     wx.Size(-1, -1), agwStyle=fpb_flags)
        Images = wx.ImageList(16, 16)
        Images.Add(GetExpandedIconBitmap())
        Images.Add(GetCollapsedIconBitmap())
        item = self._pnl.AddFoldPanel("按日期查询", False, foldIcons=Images)
        self.date_start = wx.DateTimeFromDMY
        self.date_end = wx.DateTimeFromDMY
        # 加上时间控件
        self.calendar_begin = PopDateControl(item, -1)
        self.calendar_begin.textCtrl.SetValue("从")
        self._pnl.AddFoldPanelWindow(item, self.calendar_begin, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.calendar_end = PopDateControl(item, -1)
        self.calendar_end.textCtrl.SetValue("至")
        self._pnl.AddFoldPanelWindow(item, self.calendar_end, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.today = wx.NewId()
        self.yesterday = wx.NewId()
        self.byesterday = wx.NewId()
        self.bbyesterday = wx.NewId()
        # # 加上开始日期查询按钮
        btn_date_start = wx.Button(item, wx.ID_ANY, "开始日期查询")
        self._pnl.AddFoldPanelWindow(item, btn_date_start)
        self.currStyle = wx.RadioButton(item, self.today, "今天")
        self._pnl.AddFoldPanelWindow(item, self.currStyle, fpb.FPB_ALIGN_WIDTH,
                                     fpb.FPB_DEFAULT_SPACING, 10)
        self.radio1 = wx.RadioButton(item, self.yesterday, "昨天")
        self.radio2 = wx.RadioButton(item, self.byesterday, "前天")
        self.radio3 = wx.RadioButton(item, self.bbyesterday, "大前天")
        self._pnl.AddFoldPanelWindow(item, self.radio1, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio2, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio3, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)

        self._pnl.AddFoldPanelSeparator(item)

        btn_date_clear = wx.Button(item, wx.ID_ANY, "清除日期索引")
        self._pnl.AddFoldPanelWindow(item, btn_date_clear)

        item = self._pnl.AddFoldPanel("按订单ID查询", False, foldIcons=Images)
        self.statictext3 = wx.StaticText(item, -1, label="选择查询的合同号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext3)
        self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10))
        # self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_READONLY)
        self._pnl.AddFoldPanelWindow(item, self.contract_combox)

        self.statictext4 = wx.StaticText(item, -1, label="选择查询的订单号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext4)
        self.order_combox = wx.ComboBox(item, -1, pos=(20, 10))
        self._pnl.AddFoldPanelWindow(item, self.order_combox)
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.order_combox.Enable(False)  # 开始使订单查询不使能，当有部件号后使能
        item = self._pnl.AddFoldPanel("按客户查询", False, foldIcons=Images)
        self.statictext6 = wx.StaticText(item, -1, label="选择查询的门店：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        self.store_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.store_combox)

        self.statictext7 = wx.StaticText(item, -1, label="选择查询的下单员：")
        self._pnl.AddFoldPanelWindow(item, self.statictext7)
        self.member_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.member_combox)

        self.statictext8 = wx.StaticText(item, -1, label="选择查询的终端客户：")
        self._pnl.AddFoldPanelWindow(item, self.statictext8)
        self.Terminal_customer = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.Terminal_customer)
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')

        item = self._pnl.AddFoldPanel("按类型查询", False, foldIcons=Images)
        self.normal = wx.CheckBox(item, -1, "普通")
        self._pnl.AddFoldPanelWindow(item, self.normal)
        self.complete_set = wx.CheckBox(item, -1, "成套")
        self._pnl.AddFoldPanelWindow(item, self.complete_set)
        btn_select = wx.Button(item, -1, "全选")
        self._pnl.AddFoldPanelWindow(item, btn_select)
        btn_cancel = wx.Button(item, -1, "全清")
        self._pnl.AddFoldPanelWindow(item, btn_cancel)

        self._pnl.AddFoldPanelSeparator(item)
        self.calendar_begin.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        self.calendar_end.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        btn_date_start.Bind(wx.EVT_BUTTON, self.onDateStart)
        self.currStyle.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        btn_date_clear.Bind(wx.EVT_BUTTON, self.time_clear)
        self.contract_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.contract_information_display)  # 触发合同combobox下拉事件
        self.contract_combox.Bind(wx.EVT_COMBOBOX, self.contract_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.order_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.order_information_display)  # 触发订单号combobox下拉事件
        self.order_combox.Bind(wx.EVT_COMBOBOX, self.order_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.store_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.store_information_display)  # 触发合同combobox下拉事件
        self.store_combox.Bind(wx.EVT_COMBOBOX, self.store_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.member_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.member_information_display)  # 触发订单号combobox下拉事件
        self.member_combox.Bind(wx.EVT_COMBOBOX, self.member_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.Terminal_information_display)  # 触发组件号combobox下拉事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX, self.Terminal_id_click)  # 触发组件号combobox下拉事件
        self.normal.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.complete_set.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        btn_select.Bind(wx.EVT_BUTTON, self.AllSelect)
        btn_cancel.Bind(wx.EVT_BUTTON, self.AllCancel)
        cs = fpb.CaptionBarStyle()
        cs.SetCaptionStyle(fpb.CAPTIONBAR_RECTANGLE)

    # -------------接口函数---------------------------
    def YLP_Combox_Setvalue(self, show_code):
        self.normal.SetValue(False)
        self.complete_set.SetValue(False)
        self.type = []

        self.contract_combox.SetValue(' ')
        self.order_combox.SetValue(' ')

        order_code = show_code

        contract_code = show_code.split('O')
        self.contract_combox.SetValue(contract_code[0])
        self.order_combox.SetValue(order_code)
        self.Sec_refresh()
    # ------------------------------------------------------
    #获得、处理时间程序
    def time_deal(self):
        try:
            begin_time = self.calendar_begin.GetValue()  # 获得开始时间
            end_time = self.calendar_end.GetValue()
            if begin_time != "从":
                t2 = str(begin_time).split('/')
                t3 = t2[2], t2[1], t2[0]
                st = '-'
                self.start_time = st.join(t3)
            else:
                self.start_time = '1900-01-01'
            # 转化截止时间格式函数为20180719
            if end_time != "至":
                t2_1 = str(end_time).split('/')
                t3_1 = t2_1[2], t2_1[1], t2_1[0]
                st_1 = '-'
                self.end_time = st_1.join(t3_1)
            else:
                now_time = str(time.strftime('%Y-%m-%d', time.localtime()))  # 本地当前时间
                self.end_time = now_time
            if begin_time == "从" and end_time != "至":
                self.start_time = '1900-01-10'
        except:
            pass

    #时间查询部分程序
    def contract_changed(self,event):
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.order_combox.Enable(False)
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.AllCancel(self)
    def onDateStart(self,event):
        self.Sec_refresh()
    def OnStyleChange(self, event):
    # try:
        eventid = event.GetId()
        now_time='0'
        self.contract_combox.SetValue('ALL')
        self.order_combox.SetValue('ALL')
        self.order_combox.Enable(False)
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.AllCancel(self)
        if eventid == self.today:
            now_time = str(time.strftime('%d/%m/%Y', time.localtime()))  # 本地当前时间
        elif eventid == self.yesterday:
            today=datetime.date.today()
            oneday=datetime.timedelta(days=1)
            now_time =(today-oneday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.byesterday:
            today = datetime.date.today()
            twoday = datetime.timedelta(days=2)
            now_time = (today - twoday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.bbyesterday:
            today = datetime.date.today()
            threeday = datetime.timedelta(days=3)
            now_time = (today - threeday).strftime('%d/%m/%Y')  # 本地当前时间
        self.calendar_begin.SetValue(now_time)
        self.calendar_end.SetValue(now_time)
        self.Sec_refresh()
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类查询今天、昨天等查询程序出现错误，请进行检查 \r\n')
    def time_clear(self,evt):
    # try:
        self.calendar_begin.SetValue("从")
        self.calendar_end.SetValue("至")
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.Sec_refresh()
    #合同、订单、组件、部件查询部分程序
    def contract_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.get_contract_id_list = []
            self.contract_combox.Clear()#初始化bimia
            self.contract_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.order_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.order_combox.Enable(False)  # 开始使订单查询不使能，当有部件号后使能
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `First_day`,`Contract_id` FROM `order_part_online` WHERE 1 ")
                get_contract_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_contract_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至": # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类合同查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_contract_time)):
                        self.contract_id_list_get(get_contract_time[i][1], self.get_contract_id_list)
                if len(self.get_contract_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类合同查询此时间范围无合同号，请进行检查 \r\n')
                else:
                    self.contract_combox.Append('ALL')
                    for i in range(len(self.get_contract_id_list)):
                        self.contract_combox.Append(self.get_contract_id_list[i])
            self.Sec_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类合同查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def contract_id_list_get(self,data1,data2):
        if data1 != None or data1 != '' or data1 != '0':
            if data1 not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                data2.append(data1)  #
    def contractt_time_id_list_get(self,time1,time2,data1,data2):
        for i in range(len(data1)):
            if data1[i][0] == None or data1[i][0] == '' or data1[i][0] == '0':
                pass
            else:
                get_time_str = (str(data1[i][0]))
                if get_time_str >= time1 and get_time_str <= time2:
                    if data1[i][1] != None or data1[i][1] != '' or data1[i][1] != '0':
                        if data1[i][1] not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                            data2.append(data1[i][1])  #
    def contract_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_contract_id_list) == 0:
            self.order_combox.Enable(False)
            pass
        else:
            self.order_combox.Enable(True)
            self.Sec_refresh()
    def order_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.get_order_id_list = []
            self.order_combox.Clear()  # 初始化 清空组件号combobox
            self.order_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute(
                    "SELECT `Contract_id`,`Order_id` FROM `order_part_online` WHERE 1 ")
                get_order_time = cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec连接数据库失败，请进行检查 \r\n')
            if len(get_order_time)==0:
                # print '在order_part_online中没有合同号、订单号'
                pass
            else:
                self.order_id_list_get(self.contract_combox.GetValue(), self.get_contract_id_list, get_order_time,self.get_order_id_list)
                if len(self.get_order_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类订单查询此合同范围无订单号，请进行检查 \r\n')
                else:
                    self.order_combox.Append('ALL')
                    for i in range(len(self.get_order_id_list)):
                        self.order_combox.Append(self.get_order_id_list[i])
            self.Sec_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类订单查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def order_id_list_get(self,date1,date2,date3,date4):
        if date1 == 'ALL':
            for i in range(len(date2)):
                for j in range(len(date3)):
                    if date2[i] == date3[j][0]:
                        if date3[j][1] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                            date4.append(date3[j][1])
                        break
        else:
            for j in range(len(date3)):
                if date1 == date3[j][0]:
                    if date3[j][1] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3[j][1])
    def order_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_order_id_list) == 0:
            pass
        else:
            self.Sec_refresh()
    def store_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.store_combox.Clear()
            self.store_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_store_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Dealer` FROM `order_contract_internal` WHERE 1 ")
                get_store_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_store_time)==0:
                # print '未查询到合同号'
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类门店查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time,self.end_time,get_store_time,self.contract_combox.GetValue(),self.get_store_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_store_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_store_time[i][1],get_store_time[i][2], self.get_store_id_list)
                if len(self.get_store_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类门店查询此时间范围无门店号，请进行检查 \r\n')
                else:
                    self.store_combox.Append('ALL')
                    for i in range(len(self.get_store_id_list)):
                        self.store_combox.Append(self.get_store_id_list[i])
            # self.Refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类门店查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def store_id_list_get(self,date1,date2,date3,date4):
        if date1!= 'ALL':
            if date2 == date1:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def store_id_time_list_get(self,time1,time2,date1,date2,date3):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date2!='ALL':
                        if date1[i][1]==date2:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date3.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                date3.append(date1[i][2])  #
    def store_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Sec_refresh()
    def member_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.member_combox.Clear()
            self.member_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_member_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name` FROM `order_contract_internal` WHERE 1 ")
                get_member_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_member_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类下单员查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_member_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_member_time[i][1],get_member_time[i][2], self.get_member_id_list)
                if len(self.get_member_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类下单员查询此时间范围无下单员，请进行检查 \r\n')
                else:
                    self.member_combox.Append('ALL')
                    for i in range(len(self.get_member_id_list)):
                        self.member_combox.Append(self.get_member_id_list[i])
            # self.Sec_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类下单员查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def member_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Sec_refresh()
    def terminal_information_time_get(self,time1,time2,date1,date2,date3,date4):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date2!='ALL':
                        if date1[i][3]==date2:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date4.append(date1[i][2])  #
                    elif date3!='ALL':
                        if date1[i][1]==date3:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date4.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                date4.append(date1[i][2])  #
    def terminal_information_get(self,date1,date2,date3,date4,date5,date6):
        if date1!= 'ALL':
            if date2 == date1:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        elif date5!='ALL':
            if date6==date5:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def Terminal_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.Terminal_customer.Clear()
            self.Terminal_customer.SetValue('ALL')
            self.AllCancel(self)
            self.get_terminal_customer_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name`,`Order_id` FROM `order_order_online` WHERE 1 ")
                get_terminal_customer_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_terminal_customer_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类终端客户查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.terminal_information_time_get(self.start_time,self.end_time,get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.order_combox.GetValue(),self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_terminal_customer_time)):
                        self.terminal_information_get(self.order_combox.GetValue(), get_terminal_customer_time[i][3],get_terminal_customer_time[i][2],self.get_terminal_customer_id_list,self.contract_combox.GetValue(), get_terminal_customer_time[i][1])
                if len(self.get_terminal_customer_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类终端客户查询此时间范围无终端客户，请进行检查 \r\n')
                else:
                    self.Terminal_customer.Append('ALL')
                    for i in range(len(self.get_terminal_customer_id_list)):
                        self.Terminal_customer.Append(self.get_terminal_customer_id_list[i])
            # self.Sec_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类终端客户查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def Terminal_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Sec_refresh()
    #类型查询部分程序
    def OnTypeChange(self, event):
        self.type = [2, 2]
        # 当在只有时间或有ID选择两种条件下，根据界面选择类型，得到界面显示的部件号
        if self.normal.IsChecked():
            if self.normal_element_id not in self.type:
                self.type[0] = self.normal_element_id
        if self.complete_set.IsChecked():
            if self.complete_set_element_id not in self.type:
                self.type[1] = self.complete_set_element_id
        if self.normal.IsChecked() == False and self.complete_set.IsChecked() == False:
            self.type = []
        self.Sec_refresh()
    def AllSelect(self,evt):
        self.normal.SetValue(True)
        self.complete_set.SetValue(True)
        self.type = [self.normal_element_id,self.complete_set_element_id]
        self.Sec_refresh()
    def AllCancel(self,evt):
    # try:
        self.normal.SetValue(False)
        self.complete_set.SetValue(False)
        self.type = []
        self.type = []
        self.Sec_refresh()
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec类中类型全清查询程序出现错误，请进行检查 \r\n')
    #界面工序信息、颜色显示
    def Sec_color_display(self):
        for i in range(self.remainingSpace.grid.table.GetRowsCount()):
            self.remainingSpace.grid.SetCellAlignment(i, 2, wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)  # 设置内容居中
            b = self.remainingSpace.grid.table.GetValue(i, 2)
            if b == '无工期计划':
                b = '-100'
            b = int(b)
            # # self.SetCellTextColour(i, 1, wx.CYAN)
            if b <= -1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.GREEN)
            if b == 0:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.GREEN)
            if b == 1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.CYAN)
            if b == 2:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.YELLOW)  # 设置背景颜色
            if b >= 3:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.RED)
    def Sec_refresh(self):
        self.time_deal()
        self.date[0] = self.start_time
        self.date[1] = self.end_time
        self.contract_id = []
        self.order_id = []
        self.store_content = []
        self.member_content = []
        self.terminal_customer_content = []
        try:
            self.contract_id.append(self.contract_combox.GetValue())
            self.order_id.append(self.order_combox.GetValue())
            self.store_content.append(self.store_combox.GetValue())
            self.member_content.append(self.member_combox.GetValue())
            self.terminal_customer_content.append(self.Terminal_customer.GetValue())
            self.remainingSpace.grid.DeleteRows(0,numRows=self.remainingSpace.grid.GetNumberRows())
            # start_time_2 = datetime.datetime.now()
            if self.remainingSpace.grid.Sec_display(self.date,self.contract_id,self.order_id,self.store_content,self.member_content,self.terminal_customer_content,self.type):
                self.Sec_color_display()
                self.remainingSpace.number_x.SetValue(str(self.remainingSpace.grid.contract_number))
                self.remainingSpace.number_y.SetValue(str(self.remainingSpace.grid.order_number))
                self.remainingSpace.number_z.SetValue(str(self.remainingSpace.grid.sec_number))
                # self.remainingSpace.number_m.SetValue(str(self.remainingSpace.grid.operator_number))
            # end_time_2 = datetime.datetime.now()
            # during_time_2 = (end_time_2 - start_time_2).seconds * 1000 + (end_time_2 - start_time_2).microseconds / 1000
            # print "组件显示时间", during_time_2
        except:
            pass

class Sec_LYB_Search_TopPanel(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)
        self.grid = Sec_SimpleGrid(self,self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中合同个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticbox_time_number_z = wx.StaticBox(self, -1)
            self.staticboxsizer_number_z = wx.StaticBoxSizer(self.staticbox_time_number_z, wx.HORIZONTAL)
            self.statictext7 = wx.StaticText(self, label="界面中订单个数:")
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))

            self.staticboxsizer_number_z.Add(self.statictext7, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_z.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=1, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_z, proportion=1, flag=wx.EXPAND, border=3)

            self.staticbox_time_number_y_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_y_1 = wx.StaticBoxSizer(self.staticbox_time_number_y_1, wx.HORIZONTAL)
            self.statictext8 = wx.StaticText(self, label="界面中组件个数:")  # 分别水平放'x:文本框'、'm:文本框'
            self.number_z = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_y_1.Add(self.statictext8, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1.Add(self.number_z, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_y_1, proportion=1, flag=wx.EXPAND, border=3)
            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)

            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Sec_LYB_Search_TopPanel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')

class Sec_DataTable(gridlib.GridTableBase):
    def __init__(self, data,field_name):
        gridlib.GridTableBase.__init__(self)
        self.data=data
        self.field_name=field_name
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                        ]
    #--------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True


    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )

                self.GetView().ProcessTableMessage(msg)
        innerSetValue(row, col, value)
        # self.data[row][col] = value
    def SetRowValue(self, row,value):
        def innerSetValue(row,value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row,value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()
        innerSetValue(row,value)
        # self.data[row][col] = value

    #--------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return  (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0,numRows):
            self.data.remove(self.data[numRows-1-pos-rowNum])
        gridView=self.GetView()
        gridView.BeginBatch()
        deleteMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED,pos,numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True
    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass

class Sec_SimpleGrid(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["组件名", "组件类型","工期计划", "状态", "下单日期", "排产日期", "预定交货日期", "加工中心","散板",
                                     "打孔", "铣边", "异形机砂", "压条", "手工打磨", "半检分色", "模压前分拣", "喷胶", "模压", "一次质检",
                                     "组装", "仿古做旧","质检","分包","打软包","硬包与入库","生成发货单","发货"]
        information_data = []
        self.table=Sec_DataTable(information_data,fyf_grid_operater_station)
        self.SetTable(self.table, True)
    def Sec_dictory(self):
        self.dict = {}  # 建状态——工位字典
        self.dict_name = {}  # 建工号——姓名字典
        self.get_state_list = []  # 存放状态字典Key列表
        self.get_operater_name_list = []  # 存放工号——姓名字典Key列表
        if MySql_Connect():
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor_management = db_management.cursor()
            cursor.execute("SELECT `workposition_name`,`state` FROM `info_state_online` WHERE 1")
            get_state = cursor.fetchall()  # 获取工位状态
            cursor_management.execute("SELECT `Name`,`Job_id` FROM `info_staff_new` WHERE 1")
            get_operater_name = cursor_management.fetchall()  # 得到工位号和姓名
            db.close()
            db_management.close()
            if len(get_operater_name)!=0 and len(get_state)!=0:
                for i in range(len(get_operater_name)):  # 把读到的工位号和姓名一对一写入字典
                    self.dict_name[get_operater_name[i][1]] = get_operater_name[i][0]
                    self.get_operater_name_list.append(get_operater_name[i][1])
                for i in range(len(get_state)):  # 把读到的状态值与工序状态一对一写入字典
                    self.dict[get_state[i][1]] = get_state[i][0]
                    self.get_state_list.append(get_state[i][1])
    def Sec_Mysql_Update(self):#计算组件的最大工期计划
        get_sec_type_list = []  # 获取全部部件 门型、类型、状态、下单时间、合同号列表
        fyf_get_door_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
        fyf_get_door_element_list = []
        self.sec_time_schedule=[]#存放组件工期计划的全局变量
        sec_temporary_list=[]
        sec_time_schedule_first=[]
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE 1 ORDER BY `Sec_id` ASC ")
            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##
            cursor.execute(
                "SELECT `Sec_id`,`First_day`,`Element_type_id`,`Time_schedule`,`Id` FROM `order_element_online` WHERE `Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6  ORDER BY `Time_schedule` DESC,Sec_id")
            fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            for i in range(len(get_sec_type)):  # 添加为部件门板的各个工序工号、时间列表
                get_sec_type_list.append(list(get_sec_type[i]))
            for i in range(len(fyf_get_door_element_id)):  # 添加为部件门板的各个工序工号、时间列表
                fyf_get_door_element_id_list.append(list(fyf_get_door_element_id[i]))
            for i in range(len(fyf_get_door_element_id)):
                if fyf_get_door_element_id[i][0] not in fyf_get_door_element_list:
                    fyf_get_door_element_list.append(fyf_get_door_element_id[i][0])
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_sec_type_list)!=0:
                for i in range(len(get_sec_type_list)):  # 按工期计划降序排列获取get_sec_type
                    sec_transfer_list = []
                    if get_sec_type_list[i][0] not in fyf_get_door_element_list:#未进入加工中心
                        w = -100
                        sec_transfer_list = [get_sec_type_list[i][0], w,'']
                    else:
                        for k in range(len(fyf_get_door_element_id_list)):
                            if get_sec_type_list[i][0]==fyf_get_door_element_id_list[k][0]:
                                sec_transfer_list=[fyf_get_door_element_id_list[k][0],fyf_get_door_element_id_list[k][3],fyf_get_door_element_id_list[k][4]]
                                break
                    sec_temporary_list.append(sec_transfer_list)
                sec_number = sec_temporary_list[0][0]
                b=sec_temporary_list[0][1]
                for i in range(len(sec_temporary_list)):#获取某一组件号的唯一最大工期计划
                    if sec_number==sec_temporary_list[i][0]:
                        if b<sec_temporary_list[i][1]:
                            b=sec_temporary_list[i][1]
                    else:
                        sec_number=sec_temporary_list[i][0]
                        b=sec_temporary_list[i][1]
                    if sec_number not in sec_time_schedule_first:
                        sec_time_schedule_first.append(sec_temporary_list[i][0])
                        self.sec_time_schedule.append(sec_temporary_list[i])
                    else:
                        for k in range(len(self.sec_time_schedule)):
                            if self.sec_time_schedule[k][0]==sec_number:
                                self.sec_time_schedule[k][1]=b
                                self.sec_time_schedule[k][2]=sec_temporary_list[i][2]
                                break
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Sec_SimpleGrid类Sec_Mysql_Update获取最大工期计划出现错误，请进行检查 \r\n')  #
    def Sec_display(self, date, contract_id, order_id,store,member,terminal_customer, type):  # 通过条件在界面显示列表信息
            get_sec_type_list = []  # 获取全部部件 门型、类型、状态、下单时间、合同号列表
            get_sec_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
            get_contract_number_list = []
            get_order_number_list = []
            get_receive_time_list = []
            # try:
            self.Sec_Mysql_Update()
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute(
                    "SELECT `Contract_id`,`Receive_time`,`Record_time`,`Order_id` FROM `order_order_online` WHERE 1 ")
                get_receive_time = cursor.fetchall()  # 获取合同号、预计完成订单时间
                cursor.execute(
                    "SELECT `Sec_id`,`First_day`,`Element_type_id`,`Id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6 ORDER BY `Time_schedule` DESC")
                get_sec_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
                ###################################编写在时间、id、类型条件下的筛选程序#########################################################################################################################################################################
                ###如果时间未选择情况下
                # start_time = datetime.datetime.now()
                if date[0] == '1900-01-01':
                    if contract_id[0] == 'ALL' and order_id[0] == 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE 1 ORDER BY `Sec_id` ASC ")
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE (`Sec_type`='%s' or `Sec_type`='%s') ORDER BY `Sec_id` ASC" % (
                                type[0], type[1]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    elif order_id[0] != 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `Order_id`='%s'ORDER BY `Sec_id` ASC  " %
                                order_id[0])
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `Order_id`='%s' and (`Sec_type`='%s' or `Sec_type`='%s') ORDER BY `Sec_id` ASC  " % (
                                order_id[0], type[0], type[1]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    elif contract_id[0] != 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `Contract_id`='%s'ORDER BY `Sec_id` ASC  " %
                                contract_id[0])
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online`WHERE `Contract_id`='%s' and (`Sec_type`='%s' or `Sec_type`='%s') ORDER BY `Sec_id` ASC  " % (
                                contract_id[0], type[0], type[1]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                #####如果时间选择情况下
                else:
                    if contract_id[0] == 'ALL' and order_id[0] == 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online`WHERE `First_day`>='%s' and `First_day`<='%s'ORDER BY `Sec_id` ASC " % (
                                date[0], date[1]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `First_day`>='%s' and `First_day`<='%s' and (`Sec_type`='%s' or `Sec_type`='%s') ORDER BY `Sec_id` ASC " % (
                                date[0], date[1], type[0], type[1]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    elif order_id[0] != 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Order_id`='%s'ORDER BY `Sec_id` ASC " % (
                                date[0], date[1], order_id[0]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Order_id`='%s' and (`Sec_type`='%s' or `Sec_type`='%s') ORDER BY `Sec_id` ASC " % (
                                date[0], date[1], order_id[0], type[0], type[1]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    elif contract_id[0] != 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s'ORDER BY `Sec_id` ASC " % (date[0], date[1], contract_id[0]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Sec_id`,`Sec_series`,`State`,`Contract_id`,`Order_id`,`Sec_thick` FROM `order_section_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s' and (`Sec_type`='%s' or `Sec_type`='%s') ORDER BY `Sec_id` ASC  " % (date[0], date[1], contract_id[0], type[0], type[1]))
                            get_sec_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                if store[0] != 'ALL':
                    cursor.execute(
                        "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Dealer`='%s' " % store[0])
                    get_store_contract = cursor.fetchall()  # 获取开始时间、合同号
                    get_member_contract = []
                    get_terminal_customer_contract = []
                elif member[0] != 'ALL':
                    cursor.execute(
                        "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Customer_name`='%s' " % member[0])
                    get_member_contract = cursor.fetchall()  # 获取开始时间、合同号
                    get_store_contract = []
                    get_terminal_customer_contract = []
                elif terminal_customer[0] != 'ALL':
                    cursor.execute(
                        "SELECT `Contract_id`,`Order_id` FROM `order_order_online` WHERE `Customer_name`='%s' " %
                        terminal_customer[0])
                    get_terminal_customer_contract = cursor.fetchall()  # 获取开始时间、合同号
                    get_store_contract = []
                    get_member_contract = []
                else:
                    get_store_contract = []
                    get_member_contract = []
                    get_terminal_customer_contract = []
                db.close()
                if len(get_store_contract)!=0:
                    self.get_sec_type_list_get(get_sec_type,get_store_contract,self.sec_time_schedule,get_sec_type_list)
                elif len(get_member_contract)!=0:
                    self.get_sec_type_list_get(get_sec_type, get_member_contract, self.sec_time_schedule,get_sec_type_list)
                elif len(get_terminal_customer_contract)!=0:
                    self.get_order_type_list_get_terminal(get_sec_type, get_terminal_customer_contract, self.sec_time_schedule,get_sec_type_list)
                else:
                    for i in range(len(get_sec_type)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
                        for k in range(len(self.sec_time_schedule)):
                            if get_sec_type[i][0] == self.sec_time_schedule[k][0]:
                                get_sec_element_list = [get_sec_type[i][0], get_sec_type[i][1], get_sec_type[i][2],get_sec_type[i][3], get_sec_type[i][4], get_sec_type[i][5],self.sec_time_schedule[k][1], self.sec_time_schedule[k][2]]
                                get_sec_type_list.append(get_sec_element_list)
                for i in range(len(get_sec_element_id)):  # 添加为部件门板的各个工序工号、时间列表
                    get_sec_element_id_list.append(list(get_sec_element_id[i]))
                for i in range(len(get_receive_time)):
                    if get_receive_time[i][0] not in get_receive_time_list:
                        get_receive_time_list.append(get_receive_time[i][0])
                get_sec_type_list.sort(key=lambda x:[-x[6]])
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Sec连接数据库失败，请进行检查 \r\n')
            try:
                for i in range(len(get_sec_type_list)):  # 显示组件的信息
                    # 往grid表单中填入工序信息# 往grid 中填入预定收货日期# 填部件号为预定发货时间
                    operator_information = []
                    m = 0
                    if get_sec_type_list[i][2] in self.get_state_list:  # 判断是否为有效值
                        m = get_sec_type_list[i][2]
                        state_number = unicode(self.dict[m]).encode("utf8")
                    else:
                        state_number = get_sec_type_list[i][2]
                    if get_sec_type_list[i][3] not in get_receive_time_list:
                        record_time = '未读到此合同号'
                        receive_time = '未读到此合同号'
                    else:
                        for k in range(len(get_receive_time)):
                            if get_sec_type_list[i][3] == get_receive_time[k][0] and get_sec_type_list[i][4] == get_receive_time[k][3]:
                                if get_receive_time[k][1] != '' or get_receive_time[k][1] != None or \
                                                get_receive_time[k][1] != '0':
                                    receive_time = str(get_receive_time[k][1].strftime('%Y-%m-%d'))
                                else:
                                    receive_time = '未读到此部件预定交货时间'
                                if get_receive_time[k][2] != '' or get_receive_time[k][2] != None or \
                                                get_receive_time[k][2] != '0':
                                    record_time = str(get_receive_time[k][2].strftime('%Y-%m-%d'))
                                else:
                                    record_time = '未读到此部件下单时间'
                                break
                    b = get_sec_type_list[i][6]
                    if b == -100:
                        shedule = '无工期计划'
                        first_day = '未排产'
                        operator_information = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','','']
                    else:
                        shedule = str(b)
                        for k in range(len(get_sec_element_id_list)):
                            if get_sec_type_list[i][0] == get_sec_element_id_list[k][0] and get_sec_type_list[i][7] == \
                                    get_sec_element_id_list[k][3]:
                                if get_sec_element_id_list[k][1] == None or get_sec_element_id_list[k][1] == 0 or \
                                                get_sec_element_id_list[k][1] == '':
                                    first_day = '未排产'
                                else:
                                    first_day = get_sec_element_id_list[k][1]
                                for j in range(0, len(get_sec_element_id_list[k]) - 4, 2):
                                    fyf_insert_operator_name=''
                                    if get_sec_element_id_list[k][j + 4] == None or get_sec_element_id_list[k][j + 4] == '':  # 当读到员工工位为空时
                                        fyf_insert_operator_name = ''
                                    else:  # 当读到有效员工工位时，查询员工姓名
                                        m = 0
                                        if '&' not in get_sec_element_id_list[k][j + 4].strip():
                                            if get_sec_element_id_list[k][j + 4].strip() in self.get_operater_name_list:  # 判断是否为有效值
                                                m = get_sec_element_id_list[k][j + 4].strip()
                                                fyf_insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                            elif get_sec_element_id_list[k][j + 4].strip() == '0':
                                                fyf_insert_operator_name = '管理员'
                                            else:
                                                fyf_insert_operator_name = str(get_sec_element_id_list[k][j + 4]).strip()  # 若不是有效值则传值'101'
                                        else:
                                            get_name_list = get_sec_element_id_list[k][j + 4].strip().split('&')
                                            for n in range(len(get_name_list)):
                                                if get_name_list[n] in self.get_operater_name_list:  # 判断是否为有效值
                                                    m = get_name_list[n]
                                                    insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                                elif get_name_list[n] == '0':
                                                    insert_operator_name = '管理员'
                                                else:
                                                    insert_operator_name = str(get_name_list[n])  # 若不是有效值则传值'101'
                                                    # self.log.WriteText('生产进度管理，FYF_Pane.py中IDSimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                                if fyf_insert_operator_name == '':
                                                    fyf_insert_operator_name = insert_operator_name
                                                else:
                                                    fyf_insert_operator_name = fyf_insert_operator_name + ',' + insert_operator_name
                                        # 通过字典获取员工姓名
                                            # self.log.WriteText('生产进度管理，FYF_Pane.py中SimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                        # 通过字典获取员工姓名
                                    if fyf_insert_operator_name == None or fyf_insert_operator_name == '0':
                                        fyf_insert_operator_name = ''  # 如果读到姓名为空或者姓名为零时，将姓名赋值为空
                                    if get_sec_element_id_list[k][j + 5] == None:  # 当读到开始时间为空时
                                        get_sec_element_id_list[k][j + 5] = ''
                                    if fyf_insert_operator_name == '':  # 当没有工序操作员时，则没有此工位工序信息
                                        get_sec_element_id_list[k][j + 4] = ''
                                    else:  # 有操作员时，输出员工姓名此工序开始时间
                                        get_sec_element_id_list[k][j + 4] = str(get_sec_element_id_list[k][j + 5])
                                    # 对grid界面分走cnc还是散板进行显示
                                    if get_sec_type_list[i][5] != 18:
                                        if j == 0:
                                            operator_information.append('')
                                            operator_information.append(get_sec_element_id_list[k][j + 4])
                                        else:
                                            operator_information.append(get_sec_element_id_list[k][j + 4])
                                    else:
                                        if j == 0:  # 如果走cnc则第一道工序填到第8列cnc工序，否则填到第十列之后
                                            operator_information.append(get_sec_element_id_list[k][4])
                                        elif j == 2:
                                            operator_information.append('')
                                            operator_information.append(get_sec_element_id_list[k][6])
                                        else:
                                            operator_information.append(get_sec_element_id_list[k][j + 4])
                                break
                    inform = [get_sec_type_list[i][0], get_sec_type_list[i][1], shedule, state_number, record_time,
                              first_day, receive_time, operator_information[0], operator_information[1],
                              operator_information[2], operator_information[3], operator_information[4],
                              operator_information[5], operator_information[6], operator_information[7],
                              operator_information[8], operator_information[9], operator_information[10],
                              operator_information[11], operator_information[12], operator_information[13],
                              operator_information[14], operator_information[15], operator_information[16],
                              operator_information[17], operator_information[18]]
                    self.table.SetRowValue(i, inform)
                self.AutoSizeColumns(True)
                self.EnableEditing(False)
                for i in range(len(get_sec_type_list)):  # 因为之前simple中统一显示，在这里因时间、或筛选原因不统一显示
                    if get_sec_type_list[i][3] not in get_contract_number_list:
                        get_contract_number_list.append(get_sec_type_list[i][3])
                for i in range(len(get_sec_type_list)):
                    if get_sec_type_list[i][4] not in get_order_number_list:
                        get_order_number_list.append(get_sec_type_list[i][4])
                self.contract_number = len(get_contract_number_list)
                self.order_number = len(get_order_number_list)
                self.sec_number = len(get_sec_type_list)
                # # 获得部件号中的合同、订单、组件个数
                return True
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Sec_SimpleGrid类Grid信息显示、获得合同、订单、组件、部件个数出现错误，请进行检查 \r\n')
                return False
    def get_sec_type_list_get(self,date1,date2,date3,date5):
        for i in range(len(date1)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
            for j in range(len(date2)):
                if date1[i][3] == date2[j][0]:
                    for k in range(len(date3)):
                        if date1[i][0] == date3[k][0]:
                            date4 = [date1[i][0], date1[i][1], date1[i][2],date1[i][3], date1[i][4], date1[i][5],date3[k][1], date3[k][2]]
                            date5.append(date4)
                            break
                    break
    def get_order_type_list_get_terminal(self, date1, date2, date3, date5):
        for i in range(len(date1)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
            for j in range(len(date2)):
                if date1[i][4] == date2[j][1]:
                    for k in range(len(date3)):
                        if date1[i][0] == date3[k][0]:
                            date4 = [date1[i][0], date1[i][1], date1[i][2], date1[i][3], date1[i][4],
                                     date1[i][5],
                                     date3[k][1], date3[k][2]]
                            date5.append(date4)
                            break
                    break

#----------------------------------------------------------------------------------------------------------
#编写订单生产进度管理
#----------------------------------------------------------------------------------------------------------

class Progress_Manage_Panel_Order(wx.Panel):
    def __init__(self, parent, log, id=wx.ID_ANY, title="", pos=wx.DefaultPosition,
                 size=(700, 650), style=wx.DEFAULT_FRAME_STYLE):
        wx.Panel.__init__(self, parent)
        self._flags = 0
        self.log = log
        self._leftWindow1 = wx.adv.SashLayoutWindow(self, 101, wx.DefaultPosition,
                                                    wx.Size(200, 1000), wx.NO_BORDER |
                                                    wx.adv.SW_3D | wx.CLIP_CHILDREN)
        self._leftWindow1.SetDefaultSize(wx.Size(220, 1000))
        self._leftWindow1.SetOrientation(wx.adv.LAYOUT_VERTICAL)
        self._leftWindow1.SetAlignment(wx.adv.LAYOUT_LEFT)
        self._leftWindow1.SetSashVisible(wx.adv.SASH_RIGHT, True)
        self._leftWindow1.SetExtraBorderSize(10)
        self._pnl = 0
        self.remainingSpace = Order_LYB_Search_TopPanel(self,self.log)
        self.ID_WINDOW_TOP = 100
        self.ID_WINDOW_LEFT1 = 101
        self.ID_WINDOW_RIGHT1 = 102
        self.ID_WINDOW_BOTTOM = 103
        self._leftWindow1.Bind(wx.adv.EVT_SASH_DRAGGED_RANGE, self.OnFoldPanelBarDrag,
                               id=100, id2=103)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.ReCreateFoldPanel(0)
        self.normal_element_id='普通'
        self.short_term_element_id='加急'
        self.supplement_element_id='补单'
        self.test_order_element_id='售后'
        self.date=['','']
        self.type = []
        self.remainingSpace.grid.Order_dictory()
        self.Order_refresh()
        self.timer = wx.PyTimer(self.Order_refresh)
        self.timer.Start(10000)  # 设定计时间隔为10000毫秒
    def OnSize(self, event):
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        event.Skip()
    def OnQuit(self, event):
        self.Destroy()
    def OnToggleWindow(self, event):

        self._leftWindow1.Show(not self._leftWindow1.IsShown())
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()

        event.Skip()
    def OnFoldPanelBarDrag(self, event):

        # if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
        #     return

        if event.GetId() == self.ID_WINDOW_LEFT1:
            self._leftWindow1.SetDefaultSize(wx.Size(event.GetDragRect().width, 1000))

        # Leaves bits of itself behind sometimes
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()
        event.Skip()
    def ReCreateFoldPanel(self, fpb_flags):
        self._pnl = fpb.FoldPanelBar(self._leftWindow1, -1, wx.DefaultPosition,
                                     wx.Size(-1, -1), agwStyle=fpb_flags)
        Images = wx.ImageList(16, 16)
        Images.Add(GetExpandedIconBitmap())
        Images.Add(GetCollapsedIconBitmap())
        item = self._pnl.AddFoldPanel("按日期查询", False, foldIcons=Images)
        self.date_start = wx.DateTimeFromDMY
        self.date_end = wx.DateTimeFromDMY
        # 加上时间控件
        self.calendar_begin = PopDateControl(item, -1)
        self.calendar_begin.textCtrl.SetValue("从")
        self._pnl.AddFoldPanelWindow(item, self.calendar_begin, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.calendar_end = PopDateControl(item, -1)
        self.calendar_end.textCtrl.SetValue("至")
        self._pnl.AddFoldPanelWindow(item, self.calendar_end, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.today = wx.NewId()
        self.yesterday = wx.NewId()
        self.byesterday = wx.NewId()
        self.bbyesterday = wx.NewId()
        # # 加上开始日期查询按钮
        btn_date_start = wx.Button(item, wx.ID_ANY, "开始日期查询")
        self._pnl.AddFoldPanelWindow(item, btn_date_start)
        self.currStyle = wx.RadioButton(item, self.today, "今天")
        self._pnl.AddFoldPanelWindow(item, self.currStyle, fpb.FPB_ALIGN_WIDTH,
                                     fpb.FPB_DEFAULT_SPACING, 10)
        self.radio1 = wx.RadioButton(item, self.yesterday, "昨天")
        self.radio2 = wx.RadioButton(item, self.byesterday, "前天")
        self.radio3 = wx.RadioButton(item, self.bbyesterday, "大前天")
        self._pnl.AddFoldPanelWindow(item, self.radio1, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio2, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio3, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)

        self._pnl.AddFoldPanelSeparator(item)

        btn_date_clear = wx.Button(item, wx.ID_ANY, "清除日期索引")
        self._pnl.AddFoldPanelWindow(item, btn_date_clear)

        item = self._pnl.AddFoldPanel("按订单ID查询", False, foldIcons=Images)
        self.statictext3 = wx.StaticText(item, -1, label="选择查询的合同号：")
        self._pnl.AddFoldPanelWindow(item, self.statictext3)
        self.contract_combox = wx.ComboBox(item, -1, pos=(20, 10))
        self._pnl.AddFoldPanelWindow(item, self.contract_combox)

        self.contract_combox.SetValue('ALL')
        item = self._pnl.AddFoldPanel("按客户查询", False, foldIcons=Images)
        self.statictext6 = wx.StaticText(item, -1, label="选择查询的门店：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        self.store_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.store_combox)

        self.statictext7 = wx.StaticText(item, -1, label="选择查询的下单员：")
        self._pnl.AddFoldPanelWindow(item, self.statictext7)
        self.member_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.member_combox)

        self.statictext8 = wx.StaticText(item, -1, label="选择查询的终端客户：")
        self._pnl.AddFoldPanelWindow(item, self.statictext8)
        self.Terminal_customer = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.Terminal_customer)
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')

        item = self._pnl.AddFoldPanel("按类型查询", False, foldIcons=Images)
        self.normal = wx.CheckBox(item, -1, "普通")
        self._pnl.AddFoldPanelWindow(item, self.normal)
        self.short_term = wx.CheckBox(item, -1, "加急")
        self._pnl.AddFoldPanelWindow(item, self.short_term)
        self.supplement = wx.CheckBox(item, -1, "补单")
        self._pnl.AddFoldPanelWindow(item, self.supplement)
        self.test_order = wx.CheckBox(item, -1, "售后")
        self._pnl.AddFoldPanelWindow(item, self.test_order)
        btn_select = wx.Button(item, -1, "全选")
        self._pnl.AddFoldPanelWindow(item, btn_select)
        btn_cancel = wx.Button(item, -1, "全清")
        self._pnl.AddFoldPanelWindow(item, btn_cancel)

        self._pnl.AddFoldPanelSeparator(item)
        self.calendar_begin.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        self.calendar_end.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        btn_date_start.Bind(wx.EVT_BUTTON, self.onDateStart)
        self.currStyle.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        btn_date_clear.Bind(wx.EVT_BUTTON, self.time_clear)
        self.contract_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.contract_information_display)  # 触发合同combobox下拉事件
        self.contract_combox.Bind(wx.EVT_COMBOBOX, self.contract_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.store_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.store_information_display)  # 触发合同combobox下拉事件
        self.store_combox.Bind(wx.EVT_COMBOBOX, self.store_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.member_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.member_information_display)  # 触发订单号combobox下拉事件
        self.member_combox.Bind(wx.EVT_COMBOBOX, self.member_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.Terminal_information_display)  # 触发组件号combobox下拉事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX, self.Terminal_id_click)  # 触发组件号combobox下拉事件
        self.normal.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.short_term.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.supplement.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.test_order.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        btn_select.Bind(wx.EVT_BUTTON, self.AllSelect)
        btn_cancel.Bind(wx.EVT_BUTTON, self.AllCancel)
        cs = fpb.CaptionBarStyle()
        cs.SetCaptionStyle(fpb.CAPTIONBAR_RECTANGLE)

    # -------------接口函数---------------------------
    def YLP_Combox_Setvalue(self, show_code):
        self.normal.SetValue(False)
        self.short_term.SetValue(False)
        self.supplement.SetValue(False)
        self.test_order.SetValue(False)
        self.type = []

        self.contract_combox.SetValue(' ')

        sec_code = show_code
        self.contract_combox.SetValue(sec_code)
        self.Order_refresh()
    # ------------------------------------------------------
    #获得、处理时间程序
    def time_deal(self):
        try:
            begin_time = self.calendar_begin.GetValue()  # 获得开始时间
            end_time = self.calendar_end.GetValue()
            if begin_time != "从":
                t2 = str(begin_time).split('/')
                t3 = t2[2], t2[1], t2[0]
                st = '-'
                self.start_time = st.join(t3)
            else:
                self.start_time='1900-01-01'
            # 转化截止时间格式函数为20180719
            if end_time != "至":
                t2_1 = str(end_time).split('/')
                t3_1 = t2_1[2], t2_1[1], t2_1[0]
                st_1 = '-'
                self.end_time = st_1.join(t3_1)
            else:
                now_time = str(time.strftime('%Y-%m-%d', time.localtime()))  # 本地当前时间
                self.end_time=now_time
            if begin_time == "从" and end_time != "至":
                self.start_time='1900-01-10'
        except:
            pass
    #时间查询部分程序
    def contract_changed(self,event):
        self.contract_combox.SetValue('ALL')
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.AllCancel(self)
    def onDateStart(self,event):
        self.Order_refresh()
    def OnStyleChange(self, event):
    # try:
        eventid = event.GetId()
        now_time='0'
        self.contract_combox.SetValue('ALL')
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.AllCancel(self)
        if eventid == self.today:
            now_time = str(time.strftime('%d/%m/%Y', time.localtime()))  # 本地当前时间
        elif eventid == self.yesterday:
            today=datetime.date.today()
            oneday=datetime.timedelta(days=1)
            now_time =(today-oneday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.byesterday:
            today = datetime.date.today()
            twoday = datetime.timedelta(days=2)
            now_time = (today - twoday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.bbyesterday:
            today = datetime.date.today()
            threeday = datetime.timedelta(days=3)
            now_time = (today - threeday).strftime('%d/%m/%Y')  # 本地当前时间
        self.calendar_begin.SetValue(now_time)
        self.calendar_end.SetValue(now_time)
        self.Order_refresh()
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类查询今天、昨天等查询程序出现错误，请进行检查 \r\n')
    def time_clear(self,evt):
    # try:
        self.calendar_begin.SetValue("从")
        self.calendar_end.SetValue("至")
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.Order_refresh()
    #合同、订单、组件、部件查询部分程序
    def contract_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.get_contract_id_list = []
            self.contract_combox.Clear()#初始化bimia
            self.contract_combox.SetValue('ALL')  # 下拉列表筛选时，其下属combobox控件内容清零、且不使能
            self.AllCancel(self)
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `First_day`,`Contract_id` FROM `order_order_online` WHERE 1 ")
                get_contract_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_contract_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至": # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类合同查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.contractt_time_id_list_get(self.start_time,self.end_time,get_contract_time, self.get_contract_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_contract_time)):
                        self.contract_id_list_get(get_contract_time[i][1], self.get_contract_id_list)
                if len(self.get_contract_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类合同查询此时间范围无合同号，请进行检查 \r\n')
                else:
                    self.contract_combox.Append('ALL')
                    for i in range(len(self.get_contract_id_list)):
                        self.contract_combox.Append(self.get_contract_id_list[i])
            self.Order_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类合同查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def contract_id_list_get(self,data1,data2):
        if data1 != None or data1 != '' or data1 != '0':
            if data1 not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                data2.append(data1)  #
    def contractt_time_id_list_get(self,time1,time2,data1,data2):
        for i in range(len(data1)):
            if data1[i][0] == None or data1[i][0] == '' or data1[i][0] == '0':
                pass
            else:
                get_time_str = (str(data1[i][0]))
                if get_time_str >= time1 and get_time_str <= time2:
                    if data1[i][1] != None or data1[i][1] != '' or data1[i][1] != '0':
                        if data1[i][1] not in data2:  # 对读到的单号去重后放入列表get_contract_id_list
                            data2.append(data1[i][1])  #
    def contract_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        if len(self.get_contract_id_list) == 0:
            pass
        else:
            self.Order_refresh()
    def store_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.store_combox.Clear()
            self.store_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_store_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Dealer` FROM `order_contract_internal` WHERE 1 ")
                get_store_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_store_time)==0:
                # print '未查询到合同号'
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类门店查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time,self.end_time,get_store_time,self.contract_combox.GetValue(),self.get_store_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time,self.contract_combox.GetValue(), self.get_store_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_store_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_store_time[i][1],get_store_time[i][2], self.get_store_id_list)
                if len(self.get_store_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类门店查询此时间范围无门店号，请进行检查 \r\n')
                else:
                    self.store_combox.Append('ALL')
                    for i in range(len(self.get_store_id_list)):
                        self.store_combox.Append(self.get_store_id_list[i])
            # self.Refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类门店查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def store_id_list_get(self,date1,date2,date3,date4):
        if date1!= 'ALL':
            if date2 == date1:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def store_id_time_list_get(self,time1,time2,date1,date2,date3):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date2!='ALL':
                        if date1[i][1]==date2:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date3.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                                date3.append(date1[i][2])  #
    def store_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Order_refresh()
    def member_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.member_combox.Clear()
            self.member_combox.SetValue('ALL')
            self.AllCancel(self)
            self.get_member_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name` FROM `order_contract_internal` WHERE 1 ")
                get_member_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_member_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类下单员查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.contract_combox.GetValue(), self.get_member_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_member_time)):
                        self.store_id_list_get(self.contract_combox.GetValue(), get_member_time[i][1],get_member_time[i][2], self.get_member_id_list)
                if len(self.get_member_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类下单员查询此时间范围无下单员，请进行检查 \r\n')
                else:
                    self.member_combox.Append('ALL')
                    for i in range(len(self.get_member_id_list)):
                        self.member_combox.Append(self.get_member_id_list[i])
            # self.Order_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类下单员查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def member_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Order_refresh()
    def terminal_information_time_get(self,time1,time2,date1,date3,date4):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date3!='ALL':
                        if date1[i][1]==date3:
                            if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                                if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                    date4.append(date1[i][2])  #
                    else:
                        if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                            if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                                date4.append(date1[i][2])  #
    def terminal_information_get(self,date3,date4,date5,date6):
        if date5!='ALL':
            if date6==date5:
                if date3 != None or date3 != '' or date3 != '0':
                    if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                        date4.append(date3)  #
        else:
            if date3 != None or date3 != '' or date3 != '0':
                if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                    date4.append(date3)  #
    def Terminal_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
    # try:
        self.Terminal_customer.Clear()
        self.Terminal_customer.SetValue('ALL')
        self.AllCancel(self)
        self.get_terminal_customer_id_list=[]
        self.type = []
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name` FROM `order_order_online` WHERE 1 ")
            get_terminal_customer_time= cursor.fetchall()  # 获取开始时间、合同号
            db.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_terminal_customer_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类终端客户查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.terminal_information_time_get(self.start_time,self.end_time,get_terminal_customer_time,self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.contract_combox.GetValue(),self.get_terminal_customer_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_terminal_customer_time)):
                        self.terminal_information_get(get_terminal_customer_time[i][2],self.get_terminal_customer_id_list,self.contract_combox.GetValue(), get_terminal_customer_time[i][1])
                if len(self.get_terminal_customer_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类终端客户查询此时间范围无终端客户，请进行检查 \r\n')
                else:
                    self.Terminal_customer.Append('ALL')
                    for i in range(len(self.get_terminal_customer_id_list)):
                        self.Terminal_customer.Append(self.get_terminal_customer_id_list[i])
            # self.Order_refresh()

    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类终端客户查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def Terminal_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Order_refresh()
    #类型查询部分程序
    def OnTypeChange(self, event):
        self.type = [1,1,1,1]
        # 当在只有时间或有ID选择两种条件下，根据界面选择类型，得到界面显示的部件号
        if self.normal.IsChecked():
            if self.normal_element_id not in self.type:
                self.type[0] = self.normal_element_id
        if self.short_term.IsChecked():
            if self.short_term_element_id not in self.type:
                self.type[1] = self.short_term_element_id
        if self.supplement.IsChecked():
            if self.supplement_element_id not in self.type:
                self.type[2] = self.supplement_element_id
        if self.test_order.IsChecked():
            if self.test_order_element_id not in self.type:
                self.type[3] = self.test_order_element_id
        if self.normal.IsChecked() == False and self.short_term.IsChecked() == False and self.supplement.IsChecked() == False and self.test_order.IsChecked() == False:
            self.type = []
        self.Order_refresh()
    def AllSelect(self,evt):
        self.normal.SetValue(True)
        self.short_term.SetValue(True)
        self.supplement.SetValue(True)
        self.test_order.SetValue(True)
        self.type = [self.normal_element_id, self.short_term_element_id,self.supplement_element_id,self.test_order_element_id]
        self.Order_refresh()
    def AllCancel(self,evt):
    # try:
        self.normal.SetValue(False)
        self.short_term.SetValue(False)
        self.supplement.SetValue(False)
        self.test_order.SetValue(False)
        self.type = []
        self.Order_refresh()
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order类中类型全清查询程序出现错误，请进行检查 \r\n')
    #界面工序信息、颜色显示
    def Order_color_display(self):
        for i in range(self.remainingSpace.grid.table.GetRowsCount()):
            self.remainingSpace.grid.SetCellAlignment(i, 2, wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)  # 设置内容居中
            b = self.remainingSpace.grid.table.GetValue(i, 2)
            if b == '无工期计划':
                b = '-100'
            b = int(b)
            # # self.SetCellTextColour(i, 1, wx.CYAN)
            if b <= -1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.GREEN)
            if b == 0:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.GREEN)
            if b == 1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.CYAN)
            if b == 2:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.YELLOW)  # 设置背景颜色
            if b >= 3:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 2, wx.RED)
    def Order_refresh(self):
        self.time_deal()
        self.date[0] = self.start_time
        self.date[1] = self.end_time
        self.contract_id = []
        self.store_content = []
        self.member_content = []
        self.terminal_customer_content = []
        try:
            self.contract_id.append(self.contract_combox.GetValue())
            self.store_content.append(self.store_combox.GetValue())
            self.member_content.append(self.member_combox.GetValue())
            self.terminal_customer_content.append(self.Terminal_customer.GetValue())
            self.remainingSpace.grid.DeleteRows(0,numRows=self.remainingSpace.grid.GetNumberRows())
        except:
            pass
        # start_time_2 = datetime.datetime.now()
        if self.remainingSpace.grid.Order_display(self.date,self.contract_id,self.store_content,self.member_content,self.terminal_customer_content,self.type):
            self.Order_color_display()
            self.remainingSpace.number_x.SetValue(str(self.remainingSpace.grid.contract_number))
            self.remainingSpace.number_y.SetValue(str(self.remainingSpace.grid.order_number))
        # end_time_2 = datetime.datetime.now()
        # during_time_2 = (end_time_2 - start_time_2).seconds * 1000 + (end_time_2 - start_time_2).microseconds / 1000
        # print "订单显示时间", during_time_2

class Order_LYB_Search_TopPanel(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)
        self.grid = Order_SimpleGrid(self,self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中合同个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticbox_time_number_z = wx.StaticBox(self, -1)
            self.staticboxsizer_number_z = wx.StaticBoxSizer(self.staticbox_time_number_z, wx.HORIZONTAL)
            self.statictext7 = wx.StaticText(self, label="界面中订单个数:")
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))

            self.staticboxsizer_number_z.Add(self.statictext7, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_z.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=1, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_z, proportion=1, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Sec_LYB_Search_TopPanel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')

class Order_DataTable(gridlib.GridTableBase):
    def __init__(self, data,field_name):
        gridlib.GridTableBase.__init__(self)
        self.data=data
        self.field_name=field_name
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_DATETIME,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                            gridlib.GRID_VALUE_TEXT,
                        ]
    #--------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True


    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )

                self.GetView().ProcessTableMessage(msg)
        innerSetValue(row, col, value)
        # self.data[row][col] = value
    def SetRowValue(self, row,value):
        def innerSetValue(row,value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row,value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()
        innerSetValue(row,value)
        # self.data[row][col] = value

    #--------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return  (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0,numRows):
            self.data.remove(self.data[numRows-1-pos-rowNum])
        gridView=self.GetView()
        gridView.BeginBatch()
        deleteMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED,pos,numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True
    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass

class Order_SimpleGrid(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["订单号", "下单门店", "工期计划", "状态", "下单日期", "排产日期", "预定交货日期", "加工中心", "打孔", "铣边", "异形机砂", "压条", "手工打磨", "半检分色", "模压前分拣", "喷胶", "模压", "一次质检",
                                     "组装", "仿古做旧","质检", "分包", "打软包", "硬包与入库", "生成发货单", "发货"]
        information_data = []
        self.table=Order_DataTable(information_data,fyf_grid_operater_station)
        self.SetTable(self.table, True)
    def Order_dictory(self):
        self.dict = {}  # 建状态——工位字典
        self.dict_name = {}  # 建工号——姓名字典
        self.get_state_list = []  # 存放状态字典Key列表
        self.get_operater_name_list = []  # 存放工号——姓名字典Key列表
        if MySql_Connect():
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor_management = db_management.cursor()
            cursor.execute("SELECT `workposition_name`,`state` FROM `info_state_online` WHERE 1")
            get_state = cursor.fetchall()  # 获取工位状态
            cursor_management.execute("SELECT `Name`,`Job_id` FROM `info_staff_new` WHERE 1")
            get_operater_name = cursor_management.fetchall()  # 得到工位号和姓名
            db.close()
            db_management.close()
            if len(get_operater_name)!=0 and len(get_state)!=0:
                for i in range(len(get_operater_name)):  # 把读到的工位号和姓名一对一写入字典
                    self.dict_name[get_operater_name[i][1]] = get_operater_name[i][0]
                    self.get_operater_name_list.append(get_operater_name[i][1])
                for i in range(len(get_state)):  # 把读到的状态值与工序状态一对一写入字典
                    self.dict[get_state[i][1]] = get_state[i][0]
                    self.get_state_list.append(get_state[i][1])
    def Order_Mysql_Update(self):#计算组件的最大工期计划
        get_order_type_list = []  # 获取全部部件 门型、类型、状态、下单时间、合同号列表
        fyf_get_door_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
        fyf_get_door_element_list = []
        self.order_time_schedule=[]#存放组件工期计划的全局变量
        order_temporary_list=[]
        order_time_schedule_first=[]
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Order_id` FROM `order_order_online` WHERE 1 ORDER BY `order_id` ASC ")
            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##
            cursor.execute(
                "SELECT `order_id`,`First_day`,`Element_type_id`,`Time_schedule`,`Id` FROM `order_element_online` WHERE `Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6  ORDER BY `Time_schedule` DESC,order_id")
            fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            for i in range(len(get_order_type)):  # 添加为部件门板的各个工序工号、时间列表
                get_order_type_list.append(list(get_order_type[i]))
            for i in range(len(fyf_get_door_element_id)):  # 添加为部件门板的各个工序工号、时间列表
                fyf_get_door_element_id_list.append(list(fyf_get_door_element_id[i]))
            for i in range(len(fyf_get_door_element_id)):
                if fyf_get_door_element_id[i][0] not in fyf_get_door_element_list:
                    fyf_get_door_element_list.append(fyf_get_door_element_id[i][0])
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_order_type_list)!=0:
                for i in range(len(get_order_type_list)):  # 按工期计划降序排列获取get_order_type
                    order_transfer_list = []
                    if get_order_type_list[i][0] not in fyf_get_door_element_list:#未进入加工中心
                        w = -100
                        order_transfer_list = [get_order_type_list[i][0], w,'']
                    else:
                        for k in range(len(fyf_get_door_element_id_list)):
                            if get_order_type_list[i][0]==fyf_get_door_element_id_list[k][0]:
                                order_transfer_list=[fyf_get_door_element_id_list[k][0],fyf_get_door_element_id_list[k][3],fyf_get_door_element_id_list[k][4]]
                                break
                    order_temporary_list.append(order_transfer_list)
                order_number = order_temporary_list[0][0]
                b=order_temporary_list[0][1]
                for i in range(len(order_temporary_list)):#获取某一组件号的唯一最大工期计划
                    if order_number==order_temporary_list[i][0]:
                        if b<order_temporary_list[i][1]:
                            b=order_temporary_list[i][1]
                    else:
                        order_number=order_temporary_list[i][0]
                        b=order_temporary_list[i][1]
                    if order_number not in order_time_schedule_first:
                        order_time_schedule_first.append(order_temporary_list[i][0])
                        self.order_time_schedule.append(order_temporary_list[i])
                    else:
                        for k in range(len(self.order_time_schedule)):
                            if self.order_time_schedule[k][0]==order_number:
                                self.order_time_schedule[k][1]=b
                                self.order_time_schedule[k][2]=[i][2]
                                break
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Order_SimpleGrid类order_Mysql_Update获取最大工期计划出现错误，请进行检查 \r\n')  #
    def Order_display(self, date, contract_id,store,member,terminal_customer, type):  # 通过条件在界面显示列表信息
            get_order_type_list = []  # 获取全部部件 门型、类型、状态、下单时间、合同号列表
            get_order_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
            get_contract_number_list = []
            # try:
            self.Order_Mysql_Update()
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute(
                    "SELECT `Order_id`,`First_day`,`Element_type_id`,`Id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6 ORDER BY `Time_schedule` DESC")
                get_order_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等

                ###################################编写在时间、id、类型条件下的筛选程序#########################################################################################################################################################################
                ###如果时间未选择情况下
                # start_time = datetime.datetime.now()
                if date[0] == '1900-01-01':
                    if contract_id[0] == 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            # cursor.execute(
                            #     "SELECT `Order_id`,`remarks`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online` WHERE 1 ORDER BY `order_id` ASC ")
                            # get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online` WHERE 1 ORDER BY `Order_id` ASC ")
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online` WHERE (`Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s') ORDER BY `Order_id` ASC" % (type[0], type[1],type[2], type[3]))
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online` WHERE `Contract_id`='%s'ORDER BY `Order_id` ASC  " % contract_id[0])
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online`WHERE `Contract_id`='%s' and (`Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s') ORDER BY `Order_id` ASC  " % (contract_id[0], type[0], type[1],type[2], type[3]))
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                #####如果时间选择情况下
                else:
                    if contract_id[0] == 'ALL':
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online`WHERE `First_day`>='%s' and `First_day`<='%s'ORDER BY `Order_id` ASC " % (date[0], date[1]))
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online` WHERE `First_day`>='%s' and `First_day`<='%s' and (`Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s') ORDER BY `Order_id` ASC " % (date[0], date[1], type[0], type[1],type[2], type[3]))
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s'ORDER BY `Order_id` ASC " % (date[0], date[1], contract_id[0]))
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                        else:
                            cursor.execute(
                                "SELECT `Order_id`,`Dealer`,`State`,`Contract_id`,`Record_time`,`Receive_time` FROM `order_order_online` WHERE `First_day`>='%s' and `First_day`<='%s' and `Contract_id`='%s' and (`Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s' or `Order_type`='%s') ORDER BY `Order_id` ASC  " % (date[0], date[1], contract_id[0], type[0], type[1],type[2], type[3]))
                            get_order_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                if store[0] != 'ALL':
                    cursor.execute(
                        "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Dealer`='%s' " % store[0])
                    get_store_contract = cursor.fetchall()  # 获取开始时间、合同号
                    get_member_contract = []
                    get_terminal_customer_contract = []
                elif member[0] != 'ALL':
                    cursor.execute(
                        "SELECT `Contract_id` FROM `order_contract_internal` WHERE `Customer_name`='%s' " % member[0])
                    get_member_contract = cursor.fetchall()  # 获取开始时间、合同号
                    get_store_contract = []
                    get_terminal_customer_contract = []
                elif terminal_customer[0] != 'ALL':
                    cursor.execute(
                        "SELECT `Contract_id`,`Order_id` FROM `order_order_online` WHERE `Customer_name`='%s' " % terminal_customer[0])
                    get_terminal_customer_contract = cursor.fetchall()  # 获取开始时间、合同号
                    get_store_contract = []
                    get_member_contract = []
                else:
                    get_store_contract = []
                    get_member_contract = []
                    get_terminal_customer_contract = []
                db.close()
                if len(get_store_contract)!=0:
                    self.get_order_type_list_get(get_order_type,get_store_contract,self.order_time_schedule,get_order_type_list)
                elif len(get_member_contract)!=0:
                    self.get_order_type_list_get(get_order_type, get_member_contract, self.order_time_schedule,get_order_type_list)
                elif len(get_terminal_customer_contract)!=0:
                    self.get_order_type_list_get_terminal(get_order_type, get_terminal_customer_contract, self.order_time_schedule,get_order_type_list)
                else:
                    for i in range(len(get_order_type)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
                        for k in range(len(self.order_time_schedule)):
                            if get_order_type[i][0] == self.order_time_schedule[k][0]:
                                get_order_element_list = [get_order_type[i][0], get_order_type[i][1], get_order_type[i][2],get_order_type[i][3], get_order_type[i][4], get_order_type[i][5],self.order_time_schedule[k][1], self.order_time_schedule[k][2]]
                                get_order_type_list.append(get_order_element_list)
                for i in range(len(get_order_element_id)):  # 添加为部件门板的各个工序工号、时间列表
                    get_order_element_id_list.append(list(get_order_element_id[i]))
                start_time_1 = datetime.datetime.now()
                get_order_type_list.sort(key=lambda x: [-x[6]])
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Order连接数据库失败，请进行检查 \r\n')
            try:
                for i in range(len(get_order_type_list)):  # 显示组件的信息
                    # 往grid表单中填入工序信息# 往grid 中填入预定收货日期# 填部件号为预定发货时间
                    operator_information = []
                    if get_order_type_list[i][1]==None or get_order_type_list[i][1]=='0':
                        get_order_type_list[i][1]=''
                    m = 0
                    if get_order_type_list[i][2] in self.get_state_list:  # 判断是否为有效值
                        m = get_order_type_list[i][2]
                        state_number = unicode(self.dict[m]).encode("utf8")
                    else:
                        state_number = get_order_type_list[i][2]
                    if get_order_type_list[i][4] != '' or get_order_type_list[i][4] != None or get_order_type_list[i][4] != '0':
                        record_time = str(get_order_type_list[i][4].strftime('%Y-%m-%d'))
                    else:
                        record_time = '未读到此部件下单时间'
                    if get_order_type_list[i][5] != '' or get_order_type_list[i][5] != None or get_order_type_list[i][5] != '0':
                        receive_time= str(get_order_type_list[i][5].strftime('%Y-%m-%d'))
                    else:
                        receive_time = '未读到此部件预定交货时间'
                    b = get_order_type_list[i][6]
                    if b == -100:
                        shedule = '无工期计划'
                        first_day = '未排产'
                        operator_information = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','','']
                    else:
                        shedule = str(b)
                        for k in range(len(get_order_element_id_list)):
                            if get_order_type_list[i][0] == get_order_element_id_list[k][0] and get_order_type_list[i][7] == get_order_element_id_list[k][3]:
                                if get_order_element_id_list[k][1] == None or get_order_element_id_list[k][1] == 0 or \
                                                get_order_element_id_list[k][1] == '':
                                    first_day = '未排产'
                                else:
                                    first_day = get_order_element_id_list[k][1]
                                for j in range(0, len(get_order_element_id_list[k]) - 4, 2):
                                    fyf_insert_operator_name=''
                                    if get_order_element_id_list[k][j + 4] == None or get_order_element_id_list[k][j + 4] == '':  # 当读到员工工位为空时
                                        fyf_insert_operator_name = ''
                                    else:  # 当读到有效员工工位时，查询员工姓名
                                        m = 0
                                        if '&' not in get_order_element_id_list[k][j + 4].strip():
                                            if get_order_element_id_list[k][j + 4].strip() in self.get_operater_name_list:  # 判断是否为有效值
                                                m = get_order_element_id_list[k][j + 4].strip()
                                                fyf_insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                            elif get_order_element_id_list[k][j + 4].strip() == '0':
                                                fyf_insert_operator_name = '管理员'
                                            else:
                                                fyf_insert_operator_name = str(get_order_element_id_list[k][j + 4]).strip()  # 若不是有效值则传值'101'
                                        else:
                                            get_name_list = get_order_element_id_list[k][j + 4].strip().split('&')
                                            for n in range(len(get_name_list)):
                                                if get_name_list[n] in self.get_operater_name_list:  # 判断是否为有效值
                                                    m = get_name_list[n]
                                                    insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                                elif get_name_list[n] == '0':
                                                    insert_operator_name = '管理员'
                                                else:
                                                    insert_operator_name = str(get_name_list[n])  # 若不是有效值则传值'101'
                                                    # self.log.WriteText('生产进度管理，FYF_Pane.py中IDSimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                                if fyf_insert_operator_name == '':
                                                    fyf_insert_operator_name = insert_operator_name
                                                else:
                                                    fyf_insert_operator_name = fyf_insert_operator_name + ',' + insert_operator_name
                                        # 通过字典获取员工姓名
                                            # self.log.WriteText('生产进度管理，FYF_Pane.py中SimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                        # 通过字典获取员工姓名
                                    if fyf_insert_operator_name == None or fyf_insert_operator_name == '0':
                                        fyf_insert_operator_name = ''  # 如果读到姓名为空或者姓名为零时，将姓名赋值为空
                                    if get_order_element_id_list[k][j + 5] == None:  # 当读到开始时间为空时
                                        get_order_element_id_list[k][j + 5] = ''
                                    if fyf_insert_operator_name == '':  # 当没有工序操作员时，则没有此工位工序信息
                                        get_order_element_id_list[k][j + 4] = ''
                                    else:  # 有操作员时，输出员工姓名此工序开始时间
                                        get_order_element_id_list[k][j + 4] = str(get_order_element_id_list[k][j + 5])
                                    operator_information.append(get_order_element_id_list[k][j + 4])
                                    # 对grid界面分走cnc还是散板进行显示
                                break
                    inform = [get_order_type_list[i][0], get_order_type_list[i][1], shedule, state_number, record_time,
                              first_day, receive_time, operator_information[0], operator_information[1],
                              operator_information[2], operator_information[3], operator_information[4],
                              operator_information[5], operator_information[6], operator_information[7],
                              operator_information[8], operator_information[9], operator_information[10],
                              operator_information[11], operator_information[12], operator_information[13],
                              operator_information[14], operator_information[15], operator_information[16],
                              operator_information[17],operator_information[18]]
                    self.table.SetRowValue(i, inform)
                self.AutoSizeColumns(True)
                self.EnableEditing(False)
                for i in range(len(get_order_type_list)):  # 因为之前simple中统一显示，在这里因时间、或筛选原因不统一显示
                    if get_order_type_list[i][3] not in get_contract_number_list:
                        get_contract_number_list.append(get_order_type_list[i][3])
                self.contract_number = len(get_contract_number_list)
                self.order_number = len(get_order_type_list)
                # # 获得部件号中的合同、订单、组件个数
                return True
            except:
                # pass
                self.log.WriteText('生产进度管理，FYF_Pane.py中Order_SimpleGrid类Grid信息显示、获得合同、订单、组件、部件个数出现错误，请进行检查 \r\n')
                return False
    def get_order_type_list_get(self,date1,date2,date3,date5):
        for i in range(len(date1)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
            for j in range(len(date2)):
                if date1[i][3] == date2[j][0]:
                    for k in range(len(date3)):
                        if date1[i][0] == date3[k][0]:
                            date4 = [date1[i][0], date1[i][1], date1[i][2],date1[i][3], date1[i][4], date1[i][5],date3[k][1], date3[k][2]]
                            date5.append(date4)
                            break
                    break
    def get_order_type_list_get_terminal(self, date1, date2, date3, date5):
        for i in range(len(date1)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
            for j in range(len(date2)):
                if date1[i][0] == date2[j][1]:
                    for k in range(len(date3)):
                        if date1[i][0] == date3[k][0]:
                            date4 = [date1[i][0], date1[i][1], date1[i][2], date1[i][3], date1[i][4], date1[i][5],
                                     date3[k][1], date3[k][2]]
                            date5.append(date4)
                            break
                    break

#----------------------------------------------------------------------------------------------------------
#编写合同生产进度管理
#----------------------------------------------------------------------------------------------------------
class Progress_Manage_Panel_Contract(wx.Panel):
    def __init__(self, parent, log, id=wx.ID_ANY, title="", pos=wx.DefaultPosition,
                 size=(700, 650), style=wx.DEFAULT_FRAME_STYLE):
        wx.Panel.__init__(self, parent)
        self._flags = 0
        self.log = log
        self._leftWindow1 = wx.adv.SashLayoutWindow(self, 101, wx.DefaultPosition,
                                                    wx.Size(200, 1000), wx.NO_BORDER |
                                                    wx.adv.SW_3D | wx.CLIP_CHILDREN)
        self._leftWindow1.SetDefaultSize(wx.Size(220, 1000))
        self._leftWindow1.SetOrientation(wx.adv.LAYOUT_VERTICAL)
        self._leftWindow1.SetAlignment(wx.adv.LAYOUT_LEFT)
        self._leftWindow1.SetSashVisible(wx.adv.SASH_RIGHT, True)
        self._leftWindow1.SetExtraBorderSize(10)
        self._pnl = 0
        self.remainingSpace = Contract_LYB_Search_TopPanel(self,self.log)
        self.ID_WINDOW_TOP = 100
        self.ID_WINDOW_LEFT1 = 101
        self.ID_WINDOW_RIGHT1 = 102
        self.ID_WINDOW_BOTTOM = 103
        self._leftWindow1.Bind(wx.adv.EVT_SASH_DRAGGED_RANGE, self.OnFoldPanelBarDrag,
                               id=100, id2=103)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.ReCreateFoldPanel(0)
        self.in_production_element_id=128
        self.shipped_element_id=130
        self.date=['','']
        self.type = []
        self.remainingSpace.grid.Contract_dictory()
        self.Contract_refresh()
        self.timer = wx.PyTimer(self.Contract_refresh)
        self.timer.Start(10000)  # 设定计时间隔为10000毫秒

    def OnSize(self, event):
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        event.Skip()
    def OnQuit(self, event):
        self.Destroy()
    def OnToggleWindow(self, event):

        self._leftWindow1.Show(not self._leftWindow1.IsShown())
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()

        event.Skip()
    def OnFoldPanelBarDrag(self, event):

        # if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
        #     return

        if event.GetId() == self.ID_WINDOW_LEFT1:
            self._leftWindow1.SetDefaultSize(wx.Size(event.GetDragRect().width, 1000))

        # Leaves bits of itself behind sometimes
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()
        event.Skip()
    def ReCreateFoldPanel(self, fpb_flags):
        self._pnl = fpb.FoldPanelBar(self._leftWindow1, -1, wx.DefaultPosition,
                                     wx.Size(-1, -1), agwStyle=fpb_flags)
        Images = wx.ImageList(16, 16)
        Images.Add(GetExpandedIconBitmap())
        Images.Add(GetCollapsedIconBitmap())
        item = self._pnl.AddFoldPanel("按日期查询", False, foldIcons=Images)
        self.date_start = wx.DateTimeFromDMY
        self.date_end = wx.DateTimeFromDMY
        # 加上时间控件
        self.calendar_begin = PopDateControl(item, -1)
        self.calendar_begin.textCtrl.SetValue("从")
        self._pnl.AddFoldPanelWindow(item, self.calendar_begin, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.calendar_end = PopDateControl(item, -1)
        self.calendar_end.textCtrl.SetValue("至")
        self._pnl.AddFoldPanelWindow(item, self.calendar_end, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self.today = wx.NewId()
        self.yesterday = wx.NewId()
        self.byesterday = wx.NewId()
        self.bbyesterday = wx.NewId()
        # # 加上开始日期查询按钮
        btn_date_start = wx.Button(item, wx.ID_ANY, "开始日期查询")
        self._pnl.AddFoldPanelWindow(item, btn_date_start)
        self.currStyle = wx.RadioButton(item, self.today, "今天")
        self._pnl.AddFoldPanelWindow(item, self.currStyle, fpb.FPB_ALIGN_WIDTH,
                                     fpb.FPB_DEFAULT_SPACING, 10)
        self.radio1 = wx.RadioButton(item, self.yesterday, "昨天")
        self.radio2 = wx.RadioButton(item, self.byesterday, "前天")
        self.radio3 = wx.RadioButton(item, self.bbyesterday, "大前天")
        self._pnl.AddFoldPanelWindow(item, self.radio1, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio2, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio3, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)

        self._pnl.AddFoldPanelSeparator(item)

        btn_date_clear = wx.Button(item, wx.ID_ANY, "清除日期索引")
        self._pnl.AddFoldPanelWindow(item, btn_date_clear)
        item = self._pnl.AddFoldPanel("按客户查询", False, foldIcons=Images)
        self.statictext6 = wx.StaticText(item, -1, label="选择查询的门店：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        self.store_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.store_combox)

        self.statictext7 = wx.StaticText(item, -1, label="选择查询的下单员：")
        self._pnl.AddFoldPanelWindow(item, self.statictext7)
        self.member_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.member_combox)

        self.statictext8 = wx.StaticText(item, -1, label="选择查询的终端客户：")
        self._pnl.AddFoldPanelWindow(item, self.statictext8)
        self.Terminal_customer = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.Terminal_customer)
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')

        item = self._pnl.AddFoldPanel("按类型查询", False, foldIcons=Images)
        self.in_production = wx.CheckBox(item, -1, "正在生产")
        self._pnl.AddFoldPanelWindow(item, self.in_production)
        self.shipped = wx.CheckBox(item, -1, "已发货")
        self._pnl.AddFoldPanelWindow(item, self.shipped)
        btn_select = wx.Button(item, -1, "全选")
        self._pnl.AddFoldPanelWindow(item, btn_select)
        btn_cancel = wx.Button(item, -1, "全清")
        self._pnl.AddFoldPanelWindow(item, btn_cancel)

        self._pnl.AddFoldPanelSeparator(item)
        self.calendar_begin.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        self.calendar_end.cal.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.contract_changed)
        btn_date_start.Bind(wx.EVT_BUTTON, self.onDateStart)
        self.currStyle.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        btn_date_clear.Bind(wx.EVT_BUTTON, self.time_clear)
        self.store_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.store_information_display)  # 触发合同combobox下拉事件
        self.store_combox.Bind(wx.EVT_COMBOBOX, self.store_id_click)  # 触发合同combobox下拉框中内容被选中事件
        self.member_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.member_information_display)  # 触发订单号combobox下拉事件
        self.member_combox.Bind(wx.EVT_COMBOBOX, self.member_id_click)  # 触发订单号combobox下拉框中内容被选中事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.Terminal_information_display)  # 触发组件号combobox下拉事件
        self.Terminal_customer.Bind(wx.EVT_COMBOBOX, self.Terminal_id_click)  # 触发组件号combobox下拉事件
        self.in_production.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        self.shipped.Bind(wx.EVT_CHECKBOX, self.OnTypeChange)
        btn_select.Bind(wx.EVT_BUTTON, self.AllSelect)
        btn_cancel.Bind(wx.EVT_BUTTON, self.AllCancel)
        cs = fpb.CaptionBarStyle()
        cs.SetCaptionStyle(fpb.CAPTIONBAR_RECTANGLE)
    #获得、处理时间程序
    def time_deal(self):
        try:
            begin_time = self.calendar_begin.GetValue()  # 获得开始时间
            end_time = self.calendar_end.GetValue()
            if begin_time != "从":
                t2 = str(begin_time).split('/')
                t3 = t2[2], t2[1], t2[0]
                st = '-'
                self.start_time = st.join(t3)
            else:
                self.start_time = '1900-01-01'
            # 转化截止时间格式函数为20180719
            if end_time != "至":
                t2_1 = str(end_time).split('/')
                t3_1 = t2_1[2], t2_1[1], t2_1[0]
                st_1 = '-'
                self.end_time = st_1.join(t3_1)
            else:
                now_time = str(time.strftime('%Y-%m-%d', time.localtime()))  # 本地当前时间
                self.end_time = now_time
            if begin_time == "从" and end_time != "至":
                self.start_time = '1900-01-10 00:00:00'
        except:
            pass

    #时间查询部分程序
    def contract_changed(self,event):
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        # self.AllCancel(self)
    def onDateStart(self,event):
        self.Contract_refresh()
    def OnStyleChange(self, event):
    # try:
        eventid = event.GetId()
        now_time='0'
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        # self.AllCancel(self)
        if eventid == self.today:
            now_time = str(time.strftime('%d/%m/%Y', time.localtime()))  # 本地当前时间
        elif eventid == self.yesterday:
            today=datetime.date.today()
            oneday=datetime.timedelta(days=1)
            now_time =(today-oneday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.byesterday:
            today = datetime.date.today()
            twoday = datetime.timedelta(days=2)
            now_time = (today - twoday).strftime('%d/%m/%Y')  # 本地当前时间
        elif eventid == self.bbyesterday:
            today = datetime.date.today()
            threeday = datetime.timedelta(days=3)
            now_time = (today - threeday).strftime('%d/%m/%Y')  # 本地当前时间
        self.calendar_begin.SetValue(now_time)
        self.calendar_end.SetValue(now_time)
        self.Contract_refresh()
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel类查询今天、昨天等查询程序出现错误，请进行检查 \r\n')
    def time_clear(self,evt):
    # try:
        self.calendar_begin.SetValue("从")
        self.calendar_end.SetValue("至")
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.Contract_refresh()
    def store_information_display(self, evt):  # 合同号combobox下拉列表时触发的事件
        try:
            self.store_combox.Clear()
            self.store_combox.SetValue('ALL')
            # self.AllCancel(self)
            self.get_store_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Dealer` FROM `order_contract_internal` WHERE 1 ")
                get_store_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_store_time)==0:
                # print '未查询到合同号'
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类门店查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time,self.end_time,get_store_time,self.get_store_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time, self.get_store_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_store_time, self.get_store_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_store_time)):
                        self.store_id_list_get(get_store_time[i][2], self.get_store_id_list)
                if len(self.get_store_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类门店查询此时间范围无门店号，请进行检查 \r\n')
                else:
                    self.store_combox.Append('ALL')
                    for i in range(len(self.get_store_id_list)):
                        self.store_combox.Append(self.get_store_id_list[i])
            # self.Refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类门店查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def store_id_list_get(self,date3,date4):
        if date3 != None or date3 != '' or date3 != '0':
            if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                date4.append(date3)  #
    def store_id_time_list_get(self,time1,time2,date1,date3):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                        if date1[i][2] not in date3:  # 对读到的单号去重后放入列表get_contract_id_list
                            date3.append(date1[i][2])  #
    def store_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件，当选中某一选项时，grid界面随着更新
        self.member_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Contract_refresh()
    def member_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
        try:
            self.member_combox.Clear()
            self.member_combox.SetValue('ALL')
            # self.AllCancel(self)
            self.get_member_id_list=[]
            self.type = []
            try:
                db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                     charset=charset)  # 打开数据库连接注charset是否需要
                cursor = db.cursor()  # 使用cursor()方法获取操作游标
                cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name` FROM `order_contract_internal` WHERE 1 ")
                get_member_time= cursor.fetchall()  # 获取开始时间、合同号
                db.close()
            except:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract连接数据库失败，请进行检查 \r\n')
            self.time_deal()
            if len(get_member_time)==0:
                pass
            else:
                if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                    # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                    if self.start_time > self.end_time:
                        self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类下单员查询时间范围有误，请进行检查 \r\n')
                    else:
                        self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.get_member_id_list)
                elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.get_member_id_list)
                elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                    self.store_id_time_list_get(self.start_time, self.end_time, get_member_time,self.get_member_id_list)
                else:  # 筛选大于某一个值
                    for i in range(len(get_member_time)):
                        self.store_id_list_get(get_member_time[i][2], self.get_member_id_list)
                if len(self.get_member_id_list) == 0:
                    self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类下单员查询此时间范围无下单员，请进行检查 \r\n')
                else:
                    self.member_combox.Append('ALL')
                    for i in range(len(self.get_member_id_list)):
                        self.member_combox.Append(self.get_member_id_list[i])
            # self.Contract_refresh()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类下单员查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def member_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.Terminal_customer.SetValue('ALL')
        self.Contract_refresh()
    def terminal_information_time_get(self,time1,time2,date1,date4):
        for i in range(len(date1)):
            if date1[i][0] == None or date1[i][0] == '' or date1[i][0] == '0':
                pass
            else:
                get_time_str = str(date1[i][0].strftime('%Y-%m-%d'))
                if get_time_str >= time1 and get_time_str <= time2:
                    if date1[i][2] != None or date1[i][2] != '' or date1[i][2] != '0':
                        if date1[i][2] not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                            date4.append(date1[i][2])  #
    def terminal_information_get(self,date3,date4):
        if date3 != None or date3 != '' or date3 != '0':
            if date3 not in date4:  # 对读到的单号去重后放入列表get_contract_id_list
                date4.append(date3)  #
    def Terminal_information_display(self, evt):  # 订单号combobox下拉列表时触发的事件
    # try:
        self.Terminal_customer.Clear()
        self.Terminal_customer.SetValue('ALL')
        # self.AllCancel(self)
        self.get_terminal_customer_id_list=[]
        self.type = []
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute("SELECT `Contract_C_Time`,`Contract_id`,`Customer_name` FROM `order_order_online` WHERE 1 ")
            get_terminal_customer_time= cursor.fetchall()  # 获取开始时间、合同号
            db.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract连接数据库失败，请进行检查 \r\n')
        self.time_deal()
        if len(get_terminal_customer_time)==0:
            pass
        else:
            if self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() != "至":
                # 转化开始时间格式函数为20180719   ##在获取合同号时读取时间范围内的合同号
                if self.start_time > self.end_time:
                    self.log.WriteText( '生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类终端客户查询时间范围有误，请进行检查 \r\n')
                else:
                    self.terminal_information_time_get(self.start_time,self.end_time,get_terminal_customer_time,self.get_terminal_customer_id_list)
            elif self.calendar_begin.GetValue() != "从" and self.calendar_end.GetValue() == "至":  # 筛选大于某一个值
                self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.get_terminal_customer_id_list)
            elif self.calendar_begin.GetValue() == "从" and self.calendar_end.GetValue() != "至":  # 筛选大于某一个值
                self.terminal_information_time_get(self.start_time, self.end_time, get_terminal_customer_time,self.get_terminal_customer_id_list)
            else:  # 筛选大于某一个值
                for i in range(len(get_terminal_customer_time)):
                    self.terminal_information_get(get_terminal_customer_time[i][2],self.get_terminal_customer_id_list)
            if len(self.get_terminal_customer_id_list) == 0:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类终端客户查询此时间范围无终端客户，请进行检查 \r\n')
            else:
                self.Terminal_customer.Append('ALL')
                for i in range(len(self.get_terminal_customer_id_list)):
                    self.Terminal_customer.Append(self.get_terminal_customer_id_list[i])
        # self.Contract_refresh()

    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类终端客户查询下拉触发事件部分出现错误，请进行检查 \r\n')
    def Terminal_id_click(self, evt):  # 当合同号combobox下拉框选择内容后触发的事件
        self.store_combox.SetValue('ALL')
        self.member_combox.SetValue('ALL')
        self.Contract_refresh()
    #类型查询部分程序
    def OnTypeChange(self, event):
        self.type = [-1,2000]
        # 当在只有时间或有ID选择两种条件下，根据界面选择类型，得到界面显示的部件号
        if self.in_production.IsChecked():
            if self.in_production_element_id not in self.type:
                self.type[0] = self.in_production_element_id
        if self.shipped.IsChecked():
            if self.shipped_element_id not in self.type:
                self.type[1] = self.shipped_element_id
        if self.in_production.IsChecked() == False and self.shipped.IsChecked() == False:
            self.type = []
        self.Contract_refresh()
    def AllSelect(self,evt):
        self.in_production.SetValue(True)
        self.shipped.SetValue(True)
        self.type = [self.in_production_element_id, self.shipped_element_id]
        self.Contract_refresh()
    def AllCancel(self,evt):
    # try:
        self.in_production.SetValue(False)
        self.shipped.SetValue(False)
        self.type = []
        self.Contract_refresh()
    # except:
    #     self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract类中类型全清查询程序出现错误，请进行检查 \r\n')
    #界面工序信息、颜色显示
    def Contract_color_display(self):
        for i in range(self.remainingSpace.grid.table.GetRowsCount()):
            self.remainingSpace.grid.SetCellAlignment(i, 1, wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)  # 设置内容居中
            b = self.remainingSpace.grid.table.GetValue(i, 1)
            if b == '无工期计划'or b=='已出库':
                b = '-100'
            b = int(b)
            # # self.SetCellTextColour(i, 1, wx.CYAN)
            if b <= -1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 1, wx.GREEN)
            if b == 0:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 1, wx.GREEN)
            if b == 1:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 1, wx.CYAN)
            if b == 2:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 1, wx.YELLOW)  # 设置背景颜色
            if b >= 3:
                self.remainingSpace.grid.SetCellBackgroundColour(i, 1, wx.RED)
    def Contract_refresh(self):
        self.time_deal()
        self.date[0] = self.start_time
        self.date[1] = self.end_time
        self.store_content = []
        self.member_content = []
        self.terminal_customer_content = []
        try:
            self.store_content.append(self.store_combox.GetValue())
            self.member_content.append(self.member_combox.GetValue())
            self.terminal_customer_content.append(self.Terminal_customer.GetValue())
            self.remainingSpace.grid.DeleteRows(0,numRows=self.remainingSpace.grid.GetNumberRows())
            # start_time_2 = datetime.datetime.now()
            if self.remainingSpace.grid.Contract_display(self.date,self.store_content,self.member_content,self.terminal_customer_content,self.type):
                self.Contract_color_display()
                self.remainingSpace.number_x.SetValue(str(self.remainingSpace.grid.contract_number))
            # end_time_2 = datetime.datetime.now()
            # during_time_2 = (end_time_2 - start_time_2).seconds * 1000 + (end_time_2 - start_time_2).microseconds / 1000
            # print "合同显示时间", during_time_2
        except:
            pass

class Contract_LYB_Search_TopPanel(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)
        self.grid = Contract_SimpleGrid(self,self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中合同个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=1, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Sec_LYB_Search_TopPanel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')

class Contract_DataTable(gridlib.GridTableBase):
    def __init__(self, data,field_name):
        gridlib.GridTableBase.__init__(self)
        self.data=data
        self.field_name=field_name
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_DATETIME,
                          gridlib.GRID_VALUE_DATETIME,
                          gridlib.GRID_VALUE_DATETIME,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          gridlib.GRID_VALUE_TEXT,
                          ]
    #--------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True


    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )

                self.GetView().ProcessTableMessage(msg)
        innerSetValue(row, col, value)
        # self.data[row][col] = value
    def SetRowValue(self, row,value):
        def innerSetValue(row,value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row,value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()
        innerSetValue(row,value)
        # self.data[row][col] = value

    #--------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return  (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0,numRows):
            self.data.remove(self.data[numRows-1-pos-rowNum])
        gridView=self.GetView()
        gridView.BeginBatch()
        deleteMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED,pos,numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True
    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass

class Contract_SimpleGrid(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["合同号","工期计划", "状态", "下单日期", "排产日期", "预定交货日期", "加工中心", "打孔", "铣边", "异形机砂", "压条", "手工打磨", "半检分色", "模压前分拣", "喷胶", "模压", "一次质检",
                                     "组装", "仿古做旧","质检", "分包", "打软包", "硬包与入库", "生成发货单", "发货"]
        information_data = []
        self.deliver_mark=130
        self.table=Contract_DataTable(information_data,fyf_grid_operater_station)
        self.SetTable(self.table, True)
    def Contract_dictory(self):
        self.dict = {}  # 建状态——工位字典
        self.dict_name = {}  # 建工号——姓名字典
        self.get_state_list = []  # 存放状态字典Key列表
        self.get_operater_name_list = []  # 存放工号——姓名字典Key列表
        if MySql_Connect():
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor_management = db_management.cursor()
            cursor.execute("SELECT `workposition_name`,`state` FROM `info_state_online` WHERE 1")
            get_state = cursor.fetchall()  # 获取工位状态
            cursor_management.execute("SELECT `Name`,`Job_id` FROM `info_staff_new` WHERE 1")
            get_operater_name = cursor_management.fetchall()  # 得到工位号和姓名
            db.close()
            db_management.close()
            for i in range(len(get_operater_name)):  # 把读到的工位号和姓名一对一写入字典
                self.dict_name[get_operater_name[i][1]] = get_operater_name[i][0]
                self.get_operater_name_list.append(get_operater_name[i][1])
            for i in range(len(get_state)):  # 把读到的状态值与工序状态一对一写入字典
                self.dict[get_state[i][1]] = get_state[i][0]
                self.get_state_list.append(get_state[i][1])
    def Contract_Mysql_Update(self):#计算组件的最大工期计划
        get_contract_type_list = []  # 获取全部部件 门型、类型、状态、下单时间、合同号列表
        fyf_get_door_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
        fyf_get_door_element_list = []
        self.contract_time_schedule=[]#存放组件工期计划的全局变量
        contract_temporary_list=[]
        contract_time_schedule_first=[]
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Contract_id` FROM `order_contract_internal` WHERE 1 ORDER BY `Contract_id` ASC ")
            get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##
            cursor.execute(
                "SELECT `Contract_id`,`First_day`,`Element_type_id`,`Time_schedule`,`Id` FROM `order_element_online` WHERE `Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6  ORDER BY `Time_schedule` DESC,order_id")
            fyf_get_door_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            for i in range(len(get_contract_type)):  # 添加为部件门板的各个工序工号、时间列表
                get_contract_type_list.append(list(get_contract_type[i]))
            for i in range(len(fyf_get_door_element_id)):  # 添加为部件门板的各个工序工号、时间列表
                fyf_get_door_element_id_list.append(list(fyf_get_door_element_id[i]))
            for i in range(len(fyf_get_door_element_id)):
                if fyf_get_door_element_id[i][0] not in fyf_get_door_element_list:
                    fyf_get_door_element_list.append(fyf_get_door_element_id[i][0])
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_contract_type_list)!=0:
                for i in range(len(get_contract_type_list)):  # 按工期计划降序排列获取get_contract_type
                    contract_transfer_list = []
                    if get_contract_type_list[i][0] not in fyf_get_door_element_list:#未进入加工中心
                        w = -100
                        contract_transfer_list = [get_contract_type_list[i][0], w,'']
                    else:
                        for k in range(len(fyf_get_door_element_id_list)):
                            if get_contract_type_list[i][0]==fyf_get_door_element_id_list[k][0]:
                                contract_transfer_list=[fyf_get_door_element_id_list[k][0],fyf_get_door_element_id_list[k][3],fyf_get_door_element_id_list[k][4]]
                                break
                    contract_temporary_list.append(contract_transfer_list)
                contract_number = contract_temporary_list[0][0]
                b=contract_temporary_list[0][1]
                for i in range(len(contract_temporary_list)):#获取某一组件号的唯一最大工期计划
                    if contract_number==contract_temporary_list[i][0]:
                        if b<contract_temporary_list[i][1]:
                            b=contract_temporary_list[i][1]
                    else:
                        contract_number=contract_temporary_list[i][0]
                        b=contract_temporary_list[i][1]
                    if contract_number not in contract_time_schedule_first:
                        contract_time_schedule_first.append(contract_temporary_list[i][0])
                        self.contract_time_schedule.append(contract_temporary_list[i])
                    else:
                        for k in range(len(self.contract_time_schedule)):
                            if self.contract_time_schedule[k][0]==contract_number:
                                self.contract_time_schedule[k][1]=b
                                self.contract_time_schedule[k][2]=contract_temporary_list[i][2]
                                break
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Contract_SimpleGrid类Contract_Mysql_Update获取最大工期计划出现错误，请进行检查 \r\n')  #
    def Contract_display(self, date,store,member,terminal_customer, type):  # 通过条件在界面显示列表信息
        get_contract_type_list = []  # 获取全部部件 门型、类型、状态、下单时间、合同号列表
        get_contract_element_id_list = []  # 获取全部部件号为门板第一天、加工中心、打孔至压条等工序的工位号、时间列表
        get_receive_time_list=[]
        # try:
        # start_time_4=datetime.datetime.now()
        self.Contract_Mysql_Update()
        # end_time_4 = datetime.datetime.now()
        # during_time_4 = (end_time_4 - start_time_4).seconds * 1000 + (end_time_4 - start_time_4).microseconds / 1000
        # print "合同获取最大工期计划时间", during_time_4
        try:
            # start_time_1=datetime.datetime.now()
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Contract_id`,`Receive_time`,`Record_time` FROM `order_order_online` WHERE 1 ")
            get_receive_time = cursor.fetchall()  # 获取合同号、预计完成订单时间
            cursor.execute(
                "SELECT `Contract_id`,`First_day`,`Element_type_id`,`Id`,`Machining_operator_id`,`Start_Machining_Time`,`Drilling_operator_id`,`Drilling_begin_time`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Polish_operator_id`,`Polish_begin_time`,`Regula_operator_id`,`Regula_begin_time`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Half_test_operator_id`,`Half_test_begin_time`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`First_quality_inspection_operator_id`,`First_quality_inspection_begin_time`,`Assemble_operator_id`,`Assemble_begin_time`,`Archaize_operator_id`,`Archaize_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Deliver_operator_id`,`Deliver_begin_time` FROM `order_element_online` WHERE `Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6 ORDER BY `Time_schedule` DESC")
            get_contract_element_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            ###################################编写在时间、id、类型条件下的筛选程序#########################################################################################################################################################################
            ###如果时间未选择情况下
            # start_time = datetime.datetime.now()
            if date[0] == '1900-01-01':
                if store[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE `Dealer`='%s' ORDER BY `Contract_id` ASC " % store[0])
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE `Dealer`='%s' and (`State`<='%s' or `State`>='%s') ORDER BY `Contract_id` ASC" % (store[0], type[0], type[1]))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif member[0] != 'ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE `Customer_name`='%s' ORDER BY `Contract_id` ASC " % member[0])
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE `Customer_name`='%s' and (`State`<='%s' or `State`>='%s') ORDER BY `Contract_id` ASC" % (member[0], type[0], type[1]))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif store[0]=='ALL' and member[0]=='ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE 1 ORDER BY `Contract_id` ASC ")
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                            cursor.execute(
                                "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE (`State`<='%s' or `State`>='%s') ORDER BY `Contract_id` ASC" % (type[0], type[1]))
                            get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
            #####如果时间选择情况下
            else:
                date_time1=datetime.datetime.strptime(date[0],'%Y-%m-%d')#处理时间为datetime型
                date_time2=datetime.datetime.strptime(date[1],'%Y-%m-%d')
                date_time2=(date_time2+datetime.timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')
                if store[0]!='ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal`WHERE `Contract_C_Time`>='%s' and `Contract_C_Time`<='%s'and `Dealer`='%s'ORDER BY `Contract_id` ASC " % (date_time1, date_time2,store[0]))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE `Contract_C_Time`>='%s' and `Contract_C_Time`<='%s' and `Dealer`='%s' and (`State`<='%s' or `State`>='%s') ORDER BY `Contract_id` ASC " % (date_time1, date_time2,store[0],type[0],type[1]))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif member[0]!='ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal`WHERE `Contract_C_Time`>='%s' and `Contract_C_Time`<='%s'and `Customer_name`='%s'ORDER BY `Contract_id` ASC " % (date_time1, date_time2,member[0]))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE `Contract_C_Time`>='%s' and `Contract_C_Time`<='%s' and `Customer_name`='%s' and (`State`<='%s' or `State`>='%s') ORDER BY `Contract_id` ASC " % (date_time1, date_time2,member[0],type[0],type[1]))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                elif store[0]=='ALL' and member[0]=='ALL':
                    if len(type) == 0:  # 合同、订单、组件均为all，类型未选择
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal`WHERE `Contract_C_Time`>='%s' and `Contract_C_Time`<='%s'ORDER BY `Contract_id` ASC " % (date_time1, date_time2))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
                    else:
                        cursor.execute(
                            "SELECT `Contract_id`,`State` FROM `order_contract_internal` WHERE `Contract_C_Time`>='%s' and `Contract_C_Time   `<='%s' and (`State`<='%s' or `State`>='%s') ORDER BY `Contract_id` ASC " % (date_time1,date_time2, type[0], type[1]))
                        get_contract_type = cursor.fetchall()  # 获取部件号、门型、部件型号、状态、下单时间、合同号工序##,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Membrane_operator_id`,`Membrane_begin_time`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Package_operator_id`,`Package_begin_time`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`
            if terminal_customer[0] != 'ALL':
                cursor.execute(
                    "SELECT `Contract_id`,`Order_id` FROM `order_order_online` WHERE `Customer_name`='%s' " % terminal_customer[0])
                get_terminal_customer_contract = cursor.fetchall()  # 获取开始时间、合同号
            else:
                get_terminal_customer_contract = []
            db.close()
            if len(get_terminal_customer_contract)!=0:
                self.get_contract_type_list_get(get_contract_type,get_terminal_customer_contract,self.contract_time_schedule,get_contract_type_list)
            else:
                for i in range(len(get_contract_type)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
                    for k in range(len(self.contract_time_schedule)):
                        if get_contract_type[i][0] == self.contract_time_schedule[k][0]:
                            get_contract_element_list = [get_contract_type[i][0], get_contract_type[i][1],self.contract_time_schedule[k][1], self.contract_time_schedule[k][2]]
                            get_contract_type_list.append(get_contract_element_list)
                            break
            for i in range(len(get_contract_element_id)):  # 添加为部件门板的各个工序工号、时间列表
                get_contract_element_id_list.append(list(get_contract_element_id[i]))
            for i in range(len(get_receive_time)):
                if get_receive_time[i][0] not in get_receive_time_list:
                    get_receive_time_list.append(get_receive_time[i][0])
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Progress_Manage_Panel_Contract连接数据库失败，请进行检查 \r\n')
        try:
            get_contract_type_list.sort(key=lambda x: [-x[2]])
            for i in range(len(get_contract_type_list)):  # 显示组件的信息
                # 往grid表单中填入工序信息# 往grid 中填入预定收货日期# 填部件号为预定发货时间
                operator_information = []
                m = 0
                if get_contract_type_list[i][1] in self.get_state_list:  # 判断是否为有效值
                    m = get_contract_type_list[i][1]
                    state_number = unicode(self.dict[m]).encode("utf8")
                else:
                    state_number = get_contract_type_list[i][1]
                if get_contract_type_list[i][0] not in get_receive_time_list:
                    record_time = '未读到此合同号'
                    receive_time = '未读到此合同号'
                else:
                    for k in range(len(get_receive_time)):
                        if get_contract_type_list[i][0] == get_receive_time[k][0]:
                            if get_receive_time[k][1] != '' or get_receive_time[k][1] != None or \
                                            get_receive_time[k][1] != '0':
                                receive_time = str(get_receive_time[k][1].strftime('%Y-%m-%d'))
                            else:
                                receive_time = '未读到此部件预定交货时间'
                            if get_receive_time[k][2] != '' or get_receive_time[k][2] != None or \
                                            get_receive_time[k][2] != '0':
                                record_time = str(get_receive_time[k][2].strftime('%Y-%m-%d'))
                            else:
                                record_time = '未读到此部件下单时间'
                            break
                b = get_contract_type_list[i][2]
                if b == -100 and get_contract_type_list[i][1]<self.deliver_mark:
                    shedule = '无工期计划'
                    first_day = '未排产'
                    operator_information = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','','','']
                elif b == -100 and get_contract_type_list[i][1]>=self.deliver_mark:
                    shedule = '已出库'
                    first_day = ''
                    record_time = ''
                    receive_time = ''
                    operator_information = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','']
                else:
                    shedule = str(b)
                    for k in range(len(get_contract_element_id_list)):
                        if get_contract_type_list[i][0] == get_contract_element_id_list[k][0] and get_contract_type_list[i][3] == get_contract_element_id_list[k][3]:
                            if get_contract_element_id_list[k][1] == None or get_contract_element_id_list[k][1] == 0 or \
                                            get_contract_element_id_list[k][1] == '':
                                first_day = '未排产'
                            else:
                                first_day = get_contract_element_id_list[k][1]
                            for j in range(0, len(get_contract_element_id_list[k]) - 4, 2):
                                fyf_insert_operator_name=''
                                if get_contract_element_id_list[k][j + 4] == None or get_contract_element_id_list[k][j + 4] == '':  # 当读到员工工位为空时
                                    fyf_insert_operator_name = ''
                                else:  # 当读到有效员工工位时，查询员工姓名
                                    m = 0
                                    if '&' not in get_contract_element_id_list[k][j + 4].strip():
                                        if get_contract_element_id_list[k][j + 4].strip() in self.get_operater_name_list:  # 判断是否为有效值
                                            m = get_contract_element_id_list[k][j + 4].strip()
                                            fyf_insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                        elif get_contract_element_id_list[k][j + 4].strip() == '0':
                                            fyf_insert_operator_name = '管理员'
                                        else:
                                            fyf_insert_operator_name = str(get_contract_element_id_list[k][j + 4]).strip()  # 若不是有效值则传值'101'
                                    else:
                                        get_name_list = get_contract_element_id_list[k][j + 4].strip().split('&')
                                        for n in range(len(get_name_list)):
                                            if get_name_list[n] in self.get_operater_name_list:  # 判断是否为有效值
                                                m = get_name_list[n]
                                                insert_operator_name = unicode(self.dict_name[m]).encode("utf8")
                                            elif get_name_list[n] == '0':
                                                insert_operator_name = '管理员'
                                            else:
                                                insert_operator_name = str(get_name_list[n])  # 若不是有效值则传值'101'
                                                # self.log.WriteText('生产进度管理，FYF_Pane.py中IDSimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                            if fyf_insert_operator_name == '':
                                                fyf_insert_operator_name = insert_operator_name
                                            else:
                                                fyf_insert_operator_name = fyf_insert_operator_name + ',' + insert_operator_name
                                    # 通过字典获取员工姓名
                                        # self.log.WriteText('生产进度管理，FYF_Pane.py中SimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                                    # 通过字典获取员工姓名
                                if fyf_insert_operator_name == None or fyf_insert_operator_name == '0':
                                    fyf_insert_operator_name = ''  # 如果读到姓名为空或者姓名为零时，将姓名赋值为空
                                if get_contract_element_id_list[k][j + 5] == None:  # 当读到开始时间为空时
                                    get_contract_element_id_list[k][j + 5] = ''
                                if fyf_insert_operator_name == '':  # 当没有工序操作员时，则没有此工位工序信息
                                    get_contract_element_id_list[k][j + 4] = ''
                                else:  # 有操作员时，输出员工姓名此工序开始时间
                                    get_contract_element_id_list[k][j + 4] = str(get_contract_element_id_list[k][j + 5])
                                operator_information.append(get_contract_element_id_list[k][j + 4])
                            break
                inform = [get_contract_type_list[i][0],shedule, state_number, record_time,
                          first_day, receive_time, operator_information[0], operator_information[1],
                          operator_information[2], operator_information[3], operator_information[4],
                          operator_information[5], operator_information[6], operator_information[7],
                          operator_information[8], operator_information[9], operator_information[10],
                          operator_information[11], operator_information[12], operator_information[13],
                          operator_information[14], operator_information[15], operator_information[16],
                          operator_information[17],operator_information[18]]
                self.table.SetRowValue(i, inform)
            # end_time_1 = datetime.datetime.now()
            # during_time_1 = (end_time_1 - start_time_1).seconds * 1000 + (end_time_1 - start_time_1).microseconds / 1000
            # print "合同获取显示信息时间", during_time_1
            # start_time_3 = datetime.datetime.now()
            self.AutoSizeColumns(True)
            self.EnableEditing(False)
            self.contract_number = len(get_contract_type_list)
            # end_time_3 = datetime.datetime.now()
            # during_time_3 = (end_time_3 - start_time_3).seconds * 1000 + (end_time_3 - start_time_3).microseconds / 1000
            # print "合同获取界面调整时间", during_time_3
            # # 获得部件号中的合同、订单、组件个数
            return True
        except:
            # pass
            self.log.WriteText('生产进度管理，FYF_Pane.py中Contract_Mysql_Update类Grid信息显示、获得合同、订单、组件、部件个数出现错误，请进行检查 \r\n')
            return False
    def get_contract_type_list_get(self,date1,date2,date3,date5):
        for i in range(len(date1)):  # 获取组件号、门型、部件型号、状态、工序列表，与从工期计划获得的工期计划、零件号组合成一个列表
            for j in range(len(date2)):
                if date1[i][0] == date2[j][0]:
                    for k in range(len(date3)):
                        if date1[i][0] == date3[k][0]:
                            date4 = [date1[i][0], date1[i][1],date3[k][1], date3[k][2]]
                            date5.append(date4)
                            break
                    break

#---------------------------------------------------------------------------------------------------------
#编写员工日工作量统计
#---------------------------------------------------------------------------------------------------------
class Staff_Workload_Statistics_Day(wx.Panel):
    def __init__(self, parent, log, id=wx.ID_ANY, title="", pos=wx.DefaultPosition,
                 size=(700, 650), style=wx.DEFAULT_FRAME_STYLE):
        wx.Panel.__init__(self, parent)
        self._flags = 0
        self.log = log
        self._leftWindow1 = wx.adv.SashLayoutWindow(self, 101, wx.DefaultPosition,
                                                    wx.Size(200, 1000), wx.NO_BORDER |
                                                    wx.adv.SW_3D | wx.CLIP_CHILDREN)
        self._leftWindow1.SetDefaultSize(wx.Size(250, 1000))
        self._leftWindow1.SetOrientation(wx.adv.LAYOUT_VERTICAL)
        self._leftWindow1.SetAlignment(wx.adv.LAYOUT_LEFT)
        self._leftWindow1.SetSashVisible(wx.adv.SASH_RIGHT, True)
        self._leftWindow1.SetExtraBorderSize(10)
        self._pnl = 0
        self.remainingSpace = Staff_Workload_Statistics_Day_Addpage_Panel(self,-1,self.log)
        self.ID_WINDOW_TOP = 100
        self.ID_WINDOW_LEFT1 = 101
        self.ID_WINDOW_RIGHT1 = 102
        self.ID_WINDOW_BOTTOM = 103
        self._leftWindow1.Bind(wx.adv.EVT_SASH_DRAGGED_RANGE, self.OnFoldPanelBarDrag,
                               id=100, id2=103)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.remainingSpace.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnPageChanged)
        self.remainingSpace.panelOne.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.CNC_area_calculate)
        self.remainingSpace.panelTwo.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Drilling_area_calculate)
        self.remainingSpace.panelThree.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Edge_milling_area_calculate)
        self.remainingSpace.panelFour.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Polish_area_calculate)
        self.remainingSpace.panelFive.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Regula_area_calculate)
        self.remainingSpace.panelSix.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Artificial_area_calculate)
        self.remainingSpace.panelSeven.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Half_test_area_calculate)
        self.remainingSpace.panelEight.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Sort_before_membrane_area_calculate)
        self.remainingSpace.panelNine.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Glue_spray_area_calculate)
        self.remainingSpace.panelTen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Membrane_area_calculate)
        self.remainingSpace.panelEleven.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Static_area_calculate)
        self.remainingSpace.panelTwelve.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Assemble_area_calculate)
        self.remainingSpace.panelThirteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Archaize_area_calculate)
        self.remainingSpace.panelFourteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.First_quality_area_calculate)
        self.remainingSpace.panelFifteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Shelf_after_membrane_area_calculate)
        self.remainingSpace.panelSixteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Package_area_calculate)
        self.remainingSpace.panelSeventeen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Shelf_after_package_area_calculate)
        self.remainingSpace.panelEighteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Delievery_schedule_area_calculate)
        self.remainingSpace.panelNineteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Deliver_area_calculate)
        self.remainingSpace.panelTwenty.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Line_area_calculate)
        self.ReCreateFoldPanel(0)
        self.in_production_element_id = 128
        self.shipped_element_id = 130
        self.Day_refresh()
        self.timer = wx.PyTimer(self.Day_refresh)
        self.timer.Start(10000)  # 设定计时间隔为10000毫秒
    def OnSize(self, event):
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        event.Skip()
    def OnFoldPanelBarDrag(self, event):

        # if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
        #     return

        if event.GetId() == self.ID_WINDOW_LEFT1:
            self._leftWindow1.SetDefaultSize(wx.Size(event.GetDragRect().width, 1000))

        # Leaves bits of itself behind sometimes
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()
        event.Skip()
    def ReCreateFoldPanel(self, fpb_flags):
        self._pnl = fpb.FoldPanelBar(self._leftWindow1, -1, wx.DefaultPosition,
                                     wx.Size(-1, -1), agwStyle=fpb_flags)
        Images = wx.ImageList(16, 16)
        Images.Add(GetExpandedIconBitmap())
        Images.Add(GetCollapsedIconBitmap())
        # # 加上开始日期查询按钮
        item = self._pnl.AddFoldPanel("查询日工作量", False, foldIcons=Images)
        self.calendar_begin = CalendarCtrl(item, -1,style=wx.adv.CAL_SEQUENTIAL_MONTH_SELECTION)
        self._pnl.AddFoldPanelWindow(item, self.calendar_begin, fpb.FPB_ALIGN_WIDTH, 2, 20)
        self._pnl.AddFoldPanelSeparator(item)
        self.today = wx.NewId()
        self.yesterday = wx.NewId()
        self.byesterday = wx.NewId()
        self.bbyesterday = wx.NewId()
        self.currStyle = wx.RadioButton(item, self.today, "今天")
        self._pnl.AddFoldPanelWindow(item, self.currStyle, fpb.FPB_ALIGN_WIDTH,fpb.FPB_DEFAULT_SPACING, 10)
        self.radio1 = wx.RadioButton(item, self.yesterday, "昨天")
        self._pnl.AddFoldPanelWindow(item, self.radio1, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self.radio2 = wx.RadioButton(item, self.byesterday, "前天")
        self._pnl.AddFoldPanelWindow(item, self.radio2, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self.radio3 = wx.RadioButton(item, self.bbyesterday, "大前天")
        self._pnl.AddFoldPanelWindow(item, self.radio3, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelSeparator(item)
        item = self._pnl.AddFoldPanel("按员工查询", False, foldIcons=Images)
        self.statictext6 = wx.StaticText(item, -1, label="选择本工位查询的员工：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        self.employee_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.employee_combox)
        self.employee_combox.SetValue('None')
        self.calendar_begin.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.OnChanged)
        self.currStyle.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.OnStyleChange)
        self.employee_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.employee_information_display)
        self.employee_combox.Bind(wx.EVT_COMBOBOX, self.employee_click)  # 触发合同combobox下拉框中内容被选中事件
        self._pnl.AddFoldPanelSeparator(item)
    def CNC_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelOne.grid.GetNumberRows()
        employee_Total_area=0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            #从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            #每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute("SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (self.start_time,CNC_position))
            get_staff_manual_area=cursor.fetchall()
            if len(get_staff_manual_area)==0:
                for i in range(grid_numRows):
                    employee_name= self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_name)
                    employee_id= self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_id)
                    employee_door_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_glass)
                    employee_roman_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_door)
                    employee_Fault_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_fault_position)
                    employee_Manual_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_manual_position)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8"))
                    self.remainingSpace.panelOne.grid.cnc_table.SetValue(i, cnc_area, employee_Total)
                    employee_Total_area = employee_Total_area + employee_Total
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" %(employee_name,employee_id,CNC_position,employee_Fault_area,employee_Manual_area,self.start_time))
                        # cursor.execute("UPDATE work_staff_workload_manual_area SET manual_area='%s',`First_day`='%s' WHERE `Job_id`='%s'" % (employee_Manual_area,self.start_time, employee_id))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id= self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_id)
                    employee_door_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_glass)
                    employee_roman_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_door)
                    employee_Fault_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_fault_position)
                    employee_Manual_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_manual_position)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8"))
                    self.remainingSpace.panelOne.grid.cnc_table.SetValue(i, cnc_area, employee_Total)
                    employee_Total_area = employee_Total_area + employee_Total
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id,CNC_position,self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelOne.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中CNC_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Drilling_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelTwo.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (self.start_time,Drilling_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwo.grid.GetCellValue(i,other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwo.grid.GetCellValue(i,other_fascial)
                    employee_Fault_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwo.grid.GetCellValue(i,manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwo.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Drilling_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_fascial)
                    employee_Fault_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwo.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Drilling_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTwo.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Drilling_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Edge_milling_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelThree.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (self.start_time, Edge_milling_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelThree.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelThree.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_fascial)
                    employee_Fault_area = self.remainingSpace.panelThree.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThree.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThree.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id,Edge_milling_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelThree.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_fascial)
                    employee_Fault_area = self.remainingSpace.panelThree.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThree.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThree.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Edge_milling_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelThree.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Edge_milling_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Polish_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelFour.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (self.start_time, Polish_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area)==0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFour.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFour.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFour.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFour.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFour.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Polish_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFour.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFour.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFour.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFour.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Polish_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFour.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Polish_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Regula_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelFive.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (self.start_time, Regula_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area)==0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFive.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFive.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFive.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFive.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFive.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Regula_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFive.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFive.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFive.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFive.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Regula_position,self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFive.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Regula_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Artificial_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelSix.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Artificial_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSix.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSix.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSix.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSix.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSix.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Artificial_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSix.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSix.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSix.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSix.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Artificial_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSix.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Artificial_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Half_test_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelSeven.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Half_test_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeven.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Half_test_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeven.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Half_test_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSeven.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Half_test_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Sort_before_membrane_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelEight.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Sort_before_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelEight.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelEight.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEight.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEight.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEight.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Sort_before_membrane_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelEight.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEight.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEight.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEight.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Sort_before_membrane_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelEight.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Sort_before_membrane_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Glue_spray_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelNine.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Glue_spray_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelNine.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelNine.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNine.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNine.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNine.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Glue_spray_position, employee_Fault_area, employee_Manual_area,
                        self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelNine.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNine.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNine.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNine.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Glue_spray_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelNine.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Glue_spray_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Membrane_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelTen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Membrane_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Membrane_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Membrane_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Membrane_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Static_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelEleven.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Static_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEleven.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Static_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEleven.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Static_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelEleven.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Static_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Assemble_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelTwelve.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time,Assemble_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwelve.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Assemble_position, employee_Fault_area, employee_Manual_area,
                        self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwelve.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Assemble_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTwelve.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Assemble_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Archaize_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelThirteen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time,Archaize_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThirteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Archaize_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThirteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Archaize_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelThirteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Archaize_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def First_quality_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelFourteen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time,Quality_testing_position ))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFourteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Quality_testing_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFourteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Quality_testing_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFourteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中First_quality_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Shelf_after_membrane_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelFifteen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Shelf_after_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFifteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Shelf_after_membrane_position, employee_Fault_area, employee_Manual_area,
                        self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))+ float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFifteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Shelf_after_membrane_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFifteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Shelf_after_membrane_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Package_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelSixteen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Package_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSixteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Package_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSixteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Package_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSixteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Package_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Shelf_after_package_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelSeventeen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Shelf_after_package_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeventeen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Shelf_after_package_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeventeen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Shelf_after_package_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSeventeen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Shelf_after_package_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Delievery_schedule_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelEighteen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (
                self.start_time, Delievery_schedule_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEighteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Delievery_schedule_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEighteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Delievery_schedule_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelEighteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Delievery_schedule_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Deliver_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelNineteen.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (self.start_time,Deliver_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNineteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Deliver_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNineteen.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Deliver_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelNineteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Deliver_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Line_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelTwenty.grid.GetNumberRows()
        employee_Total_area = 0
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`Position`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and `Position`='%s'" % (self.start_time, Line_position))
            get_staff_manual_area = cursor.fetchall()
            if len(get_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwenty.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Work_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Line_position, employee_Fault_area, employee_Manual_area,self.start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwenty.grid.table.SetValue(i, area_pos, employee_Total)
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Work_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Line_position, self.start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTwenty.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Line_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def OnPageChanged(self,event):
        if self:
            old = event.GetOldSelection()
            new = event.GetSelection()
            sel = self.remainingSpace.GetSelection()
            self.time_clear(self)
            self.employee_combox.SetValue('None')
            self.Day_refresh()
            # self.log.write('OnPageChanged,  old:%d, new:%d, sel:%d\n' % (old, new, sel))
        event.Skip()
    def time_deal(self):
        try:
            begin_time = self.calendar_begin.GetDate()  # 获得开始时间
            t1=str(begin_time).split(' ')
            t2 = t1[0].split('/')
            self.start_time = '%s%s-%s-%s' % ('20', t2[2], t2[0], t2[1])
        except:
            pass
    def time_clear(self,evt):
    # try:
        now_time=time.localtime(time.time())
        now_time_1=str(now_time.tm_year).split('20')
        t3 = now_time_1[1], str(now_time.tm_mday), str(now_time.tm_mon)
        st = '/'
        now_time = st.join(t3)
        date_time = datetime.datetime.strptime(now_time, '%y/%d/%m')
        self.calendar_begin.SetDate(date_time)
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.Day_refresh()
    def OnChanged(self,event):
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        self.employee_combox.SetValue('None')
        if self.remainingSpace.GetSelection() == 0:
            self.remainingSpace.panelOne.grid.cnc_table.DeleteRows(0, self.remainingSpace.panelOne.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 1:
                    self.remainingSpace.panelTwo.grid.table.DeleteRows(0, self.remainingSpace.panelTwo.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 2:
            self.remainingSpace.panelThree.grid.table.DeleteRows(0, self.remainingSpace.panelThree.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 3:
            self.remainingSpace.panelFour.grid.table.DeleteRows(0, self.remainingSpace.panelFour.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 4:
            self.remainingSpace.panelFive.grid.table.DeleteRows(0, self.remainingSpace.panelFive.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 5:
            self.remainingSpace.panelTwenty.grid.table.DeleteRows(0, self.remainingSpace.panelTwenty.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 6:
            self.remainingSpace.panelSix.grid.table.DeleteRows(0, self.remainingSpace.panelSix.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 7:
            self.remainingSpace.panelSeven.grid.table.DeleteRows(0, self.remainingSpace.panelSeven.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 8:
            self.remainingSpace.panelEight.grid.table.DeleteRows(0, self.remainingSpace.panelEight.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 9:
            self.remainingSpace.panelNine.grid.table.DeleteRows(0, self.remainingSpace.panelNine.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 10:
            self.remainingSpace.panelTen.grid.table.DeleteRows(0, self.remainingSpace.panelTen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 11:
            self.remainingSpace.panelEleven.grid.table.DeleteRows(0, self.remainingSpace.panelEleven.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 12:
            self.remainingSpace.panelTwelve.grid.table.DeleteRows(0, self.remainingSpace.panelTwelve.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 13:
            self.remainingSpace.panelThirteen.grid.table.DeleteRows(0, self.remainingSpace.panelThirteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 14:
            self.remainingSpace.panelFourteen.grid.table.DeleteRows(0,self.remainingSpace.panelFourteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 15:
            self.remainingSpace.panelFifteen.grid.table.DeleteRows(0,self.remainingSpace.panelFifteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 16:
            self.remainingSpace.panelSixteen.grid.table.DeleteRows(0, self.remainingSpace.panelSixteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 17:
            self.remainingSpace.panelSeventeen.grid.table.DeleteRows(0, self.remainingSpace.panelSeventeen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 18:
            self.remainingSpace.panelEighteen.grid.table.DeleteRows(0,self.remainingSpace.panelEighteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 19:
            self.remainingSpace.panelNine.grid.table.DeleteRows(0, self.remainingSpace.panelNine.grid.GetNumberRows())
        self.Day_refresh()
    def OnStyleChange(self,event):
        eventid = event.GetId()
        now_time = '0'
        self.employee_combox.SetValue('None')
        # self.NoneCancel(self)
        if eventid == self.today:
            now_time =time.localtime(time.time())  # 本地当前时间
        elif eventid == self.yesterday:
            today = datetime.date.today()
            oneday = datetime.timedelta(days=1)
            now_time = (today - oneday).timetuple()  # 本地当前时间
        elif eventid == self.byesterday:
            today = datetime.date.today()
            twoday = datetime.timedelta(days=2)
            now_time = (today - twoday).timetuple()  # 本地当前时间
        elif eventid == self.bbyesterday:
            today = datetime.date.today()
            threeday = datetime.timedelta(days=3)
            now_time = (today - threeday).timetuple()  # 本地当前时间
        now_time_1 = str(now_time.tm_year).split('20')
        t3 = now_time_1[1], str(now_time.tm_mday), str(now_time.tm_mon)
        st = '/'
        now_time = st.join(t3)
        date_time = datetime.datetime.strptime(now_time, '%y/%d/%m')
        self.calendar_begin.SetDate(date_time)
        self.Day_refresh()
    def employee_information_display(self,event):
        self.time_deal()
        self.display_operator_name=[]
        self.display_operator_id=[]
        self.display_operator={}
        get_employee_id=()
        get_employee_id_list=[]
        self.employee_combox.Clear()
        self.employee_combox.SetValue('None')
        try:
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            if self.remainingSpace.GetSelection() == 0:  # 如果为cnc工位
                cursor_management.execute("SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % CNC_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 1:  # 如果为cnc工位
                cursor_management.execute("SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Drilling_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 2:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Edge_milling_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 3:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Polish_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 4:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Regula_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 5:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Line_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 6:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Artificial_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 7:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Half_test_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 8:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Sort_before_membrane_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 9:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Glue_spray_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 10:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Membrane_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 11:  # 如果为静置工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % static_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 12:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Assemble_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 13:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Archaize_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 14:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Quality_testing_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 15:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Shelf_after_membrane_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 16:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Package_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 17:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Shelf_after_package_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 18:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Delievery_schedule_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 19:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Deliver_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.other_operator_calculate(get_employee_id, get_employee_id_list)
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day连接数据库失败，请进行检查 \r\n')
        if len(get_employee_id_list)!=0:
            # 判断是否有多员工登陆，如果有多员工登陆，获取其中单个员工的id，并对总的单元和多员工中的单员工进行汇总，并去重
            for i in range(len(get_employee_id_list)):
                m = 0
                if '&' in get_employee_id_list[i][0].strip():
                    get_name_list = get_employee_id_list[i][0].strip().split('&')
                    for n in range(len(get_name_list)):
                        transfer=[get_name_list[n]]
                        get_employee_id_list.append(transfer)
                            # 通过字典获取员工姓名
                            # self.log.WriteText('生产进度管理，FYF_Pane.py中SimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                            # 通过字典获取员工姓名
            for i in range(len(get_employee_id_list)):
                m = 0
                if '&' not in get_employee_id_list[i][0].strip():
                    if get_employee_id_list[i][0].strip() in get_operater_name_list:  # 判断是否为有效值
                        m = get_employee_id_list[i][0].strip()
                        operator_name = unicode(dict_name[m]).encode("utf8")
                    elif get_employee_id_list[i][0].strip() == '0':
                        operator_name = '管理员'
                    else:
                        operator_name = str(get_employee_id_list[i][0]).strip()  # 若不是有效值则传值'101'
                    if get_employee_id_list[i][0] not in self.display_operator_id:#对添加的job_id进行去重
                        self.display_operator_id.append(get_employee_id_list[i][0])
                        self.display_operator_name.append(operator_name)
                        self.display_operator[operator_name] = get_employee_id_list[i][0]
            if len(self.display_operator_name)==0:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day类员工查询此时间范围无员工姓名，请进行检查 \r\n')
            else:
                self.employee_combox.Append('None')
                for i in range(len(self.display_operator_name)):
                    self.employee_combox.Append(self.display_operator_name[i])
    def operator_calculate(self,data1,data2,data3):
        for i in range(len(data1)):
            if data1[i][2] != '' and data1[i][2] != None:
                data2.append(list(data1[i]))
        for i in range(len(data3)):
            if data3[i][2] != '' and data3[i][2] != None:
                data2.append(list(data3[i]))
    def other_operator_calculate(self,data1,data2):
        for i in range(len(data1)):
            if data1[i][0] != '' and data1[i][0] != None:
                data2.append(list(data1[i]))
    def employee_click(self,event):
        self.Day_refresh()
    def Day_refresh(self):
        self.time_deal()
        self.employee_name=[]
        try:
            if self.employee_combox.GetValue()!='None':
                m=str(self.employee_combox.GetValue())
                self.employee_name.append(unicode(self.display_operator[m]).encode("utf8"))
            else:
                self.employee_name.append(self.employee_combox.GetValue())
        #通过Notebook界面选择，显示界面对应工位信息。
            if self.remainingSpace.GetSelection()==0:
                if self.remainingSpace.panelOne.grid.CNC_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelOne.number_x.SetValue(str(self.remainingSpace.panelOne.grid.employee))
                    self.remainingSpace.panelOne.number_y.SetValue(str(self.remainingSpace.panelOne.grid.employee_area))
            if self.remainingSpace.GetSelection()==1:
                if self.remainingSpace.panelTwo.grid.Drilling_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelTwo.number_x.SetValue(str(self.remainingSpace.panelTwo.grid.employee))
                    self.remainingSpace.panelTwo.number_y.SetValue(str(self.remainingSpace.panelTwo.grid.employee_area))
            if self.remainingSpace.GetSelection()==2:
                if self.remainingSpace.panelThree.grid.Edge_milling_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelThree.number_x.SetValue(str(self.remainingSpace.panelThree.grid.employee))
                    self.remainingSpace.panelThree.number_y.SetValue(str(self.remainingSpace.panelThree.grid.employee_area))
            if self.remainingSpace.GetSelection()==3:
                if self.remainingSpace.panelFour.grid.Polish_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFour.number_x.SetValue(str(self.remainingSpace.panelFour.grid.employee))
                    self.remainingSpace.panelFour.number_y.SetValue(str(self.remainingSpace.panelFour.grid.employee_area))
            if self.remainingSpace.GetSelection()==4:
                if self.remainingSpace.panelFive.grid.Regula_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFive.number_x.SetValue(str(self.remainingSpace.panelFive.grid.employee))
                    self.remainingSpace.panelFive.number_y.SetValue(str(self.remainingSpace.panelFive.grid.employee_area))
            if self.remainingSpace.GetSelection()==5:
                if self.remainingSpace.panelTwenty.grid.Line_display(self.start_time, self.employee_name):
                    self.remainingSpace.panelTwenty.number_x.SetValue(str(self.remainingSpace.panelTwenty.grid.employee))
                    self.remainingSpace.panelTwenty.number_y.SetValue(str(self.remainingSpace.panelTwenty.grid.employee_area))
            if self.remainingSpace.GetSelection()==6:
                if self.remainingSpace.panelSix.grid.Artificial_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSix.number_x.SetValue(str(self.remainingSpace.panelSix.grid.employee))
                    self.remainingSpace.panelSix.number_y.SetValue(str(self.remainingSpace.panelSix.grid.employee_area))
            if self.remainingSpace.GetSelection()==7:
                if self.remainingSpace.panelSeven.grid.Half_test_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSeven.number_x.SetValue(str(self.remainingSpace.panelSeven.grid.employee))
                    self.remainingSpace.panelSeven.number_y.SetValue(str(self.remainingSpace.panelSeven.grid.employee_area))
            if self.remainingSpace.GetSelection()==8:
                if self.remainingSpace.panelEight.grid.Sort_before_membrane_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelEight.number_x.SetValue(str(self.remainingSpace.panelEight.grid.employee))
                    self.remainingSpace.panelEight.number_y.SetValue(str(self.remainingSpace.panelEight.grid.employee_area))
            if self.remainingSpace.GetSelection()==9:
                if self.remainingSpace.panelNine.grid.Glue_spray_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelNine.number_x.SetValue(str(self.remainingSpace.panelNine.grid.employee))
                    self.remainingSpace.panelNine.number_y.SetValue(str(self.remainingSpace.panelNine.grid.employee_area))
            if self.remainingSpace.GetSelection()==10:
                if self.remainingSpace.panelTen.grid.Membrane_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelTen.number_x.SetValue(str(self.remainingSpace.panelTen.grid.employee))
                    self.remainingSpace.panelTen.number_y.SetValue(str(self.remainingSpace.panelTen.grid.employee_area))
            if self.remainingSpace.GetSelection()==11:
                if self.remainingSpace.panelEleven.grid.Static_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelEleven.number_x.SetValue(str(self.remainingSpace.panelEleven.grid.employee))
                    self.remainingSpace.panelEleven.number_y.SetValue(str(self.remainingSpace.panelEleven.grid.employee_area))
            if self.remainingSpace.GetSelection()==12:
                if self.remainingSpace.panelTwelve.grid.Assemble_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelTwelve.number_x.SetValue(str(self.remainingSpace.panelTwelve.grid.employee))
                    self.remainingSpace.panelTwelve.number_y.SetValue(str(self.remainingSpace.panelTwelve.grid.employee_area))
            if self.remainingSpace.GetSelection()==13:
                if self.remainingSpace.panelThirteen.grid.Archaize_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelThirteen.number_x.SetValue(str(self.remainingSpace.panelThirteen.grid.employee))
                    self.remainingSpace.panelThirteen.number_y.SetValue(str(self.remainingSpace.panelThirteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==14:
                if self.remainingSpace.panelFourteen.grid.First_quality_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFourteen.number_x.SetValue(str(self.remainingSpace.panelFourteen.grid.employee))
                    self.remainingSpace.panelFourteen.number_y.SetValue(str(self.remainingSpace.panelFourteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==15:
                if self.remainingSpace.panelFifteen.grid.Shelf_after_membrane_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFifteen.number_x.SetValue(str(self.remainingSpace.panelFifteen.grid.employee))
                    self.remainingSpace.panelFifteen.number_y.SetValue(str(self.remainingSpace.panelFifteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==16:
                if self.remainingSpace.panelSixteen.grid.Package_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSixteen.number_x.SetValue(str(self.remainingSpace.panelSixteen.grid.employee))
                    self.remainingSpace.panelSixteen.number_y.SetValue(str(self.remainingSpace.panelSixteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==17:
                if self.remainingSpace.panelSeventeen.grid.Shelf_after_package_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSeventeen.number_x.SetValue(str(self.remainingSpace.panelSeventeen.grid.employee))
                    self.remainingSpace.panelSeventeen.number_y.SetValue(str(self.remainingSpace.panelSeventeen.grid.employee_area))
            if self.remainingSpace.GetSelection()==18:
                if self.remainingSpace.panelEighteen.grid.Delievery_schedule_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelEighteen.number_x.SetValue(str(self.remainingSpace.panelEighteen.grid.employee))
                    self.remainingSpace.panelEighteen.number_y.SetValue(str(self.remainingSpace.panelEighteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==19:
                if self.remainingSpace.panelNineteen.grid.Deliver_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelNineteen.number_x.SetValue(str(self.remainingSpace.panelNineteen.grid.employee))
                    self.remainingSpace.panelNineteen.number_y.SetValue(str(self.remainingSpace.panelNineteen.grid.employee_area))
        except:
            pass
class Staff_Workload_Statistics_Day_Addpage_Panel(wx.Notebook):
    def __init__(self, parent, id, log):
        wx.Notebook.__init__(self, parent, id, size=(21,21), style=
                             wx.BK_DEFAULT|wx.SUNKEN_BORDER
                             #wx.BK_TOP
                             #wx.BK_BOTTOM
                             #wx.BK_LEFT
                             #wx.BK_RIGHT
                             # | wx.NB_MULTILINE
                             )
        self.log = log
        self.panelOne = Staff_Workload_Statistics_Day_Panel_CNC(self, log)
        self.panelTwo = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelThree = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelFour = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelFive = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelSix = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelSeven = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelEight = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelNine = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelTen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelEleven = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelTwelve = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelThirteen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelFourteen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelFifteen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelSixteen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelSeventeen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelEighteen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelNineteen = Staff_Workload_Statistics_Day_Panel(self, log)
        self.panelTwenty = Staff_Workload_Statistics_Day_Panel(self, log)
        self.AddPage(self.panelOne, "CNC工位")
        self.AddPage(self.panelTwo, "打孔")
        self.AddPage(self.panelThree, "铣边")
        self.AddPage(self.panelFour, "异形机砂")
        self.AddPage(self.panelFive, "压条")
        self.AddPage(self.panelTwenty, "线条工位")
        self.AddPage(self.panelSix, "手工打磨")
        self.AddPage(self.panelSeven, "半检分色")
        self.AddPage(self.panelEight, "模压前分拣")
        self.AddPage(self.panelNine, "喷胶")
        self.AddPage(self.panelTen, "膜压")
        self.AddPage(self.panelEleven, "静置")
        self.AddPage(self.panelTwelve, "组装")
        self.AddPage(self.panelThirteen,"仿古做旧")
        self.AddPage(self.panelFourteen, "质检")
        self.AddPage(self.panelFifteen, "分包")
        self.AddPage(self.panelSixteen,"打软包")
        self.AddPage(self.panelSeventeen,"硬包与入库")
        self.AddPage(self.panelEighteen,"生成发货单")
        self.AddPage(self.panelNineteen,"发货")
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnPageChanged)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.OnPageChanging)
    def OnPageChanged(self, event):
        if self:
            old = event.GetOldSelection()
            new = event.GetSelection()
            sel = self.GetSelection()
            # self.log.write('OnPageChanged,  old:%d, new:%d, sel:%d\n' % (old, new, sel))
        event.Skip()
    def OnPageChanging(self, event):
        if self:
            old = event.GetOldSelection()
            new = event.GetSelection()
            sel = self.GetSelection()
            # self.log.write('OnPageChanging, old:%d, new:%d, sel:%d\n' % (old, new, sel))
        event.Skip()
class Staff_Workload_Statistics_Day_Panel_CNC(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)
        self.grid = Staff_Workload_Statistics_Day_SimpleGrid_CNC(self,self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中员工个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext2 = wx.StaticText(self, label="界面中工作量总和:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(100, 20))
            self.staticboxsizer_number_y_1.Add(self.statictext2, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)

            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_y_1, proportion=0, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Sec_LYB_Search_TopPanel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')
class Staff_Workload_Statistics_Day_Panel(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)
        self.grid = Staff_Workload_Statistics_Day_SimpleGrid(self,self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中员工个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext2 = wx.StaticText(self, label="界面中工作量总和:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(100, 20))
            self.staticboxsizer_number_y_1.Add(self.statictext2, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)

            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_y_1, proportion=0, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Sec_LYB_Search_TopPanel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')
class Staff_Workload_Statistics_Day_DataTable(gridlib.GridTableBase):
    def __init__(self, data,field_name):
        gridlib.GridTableBase.__init__(self)
        self.data=data
        self.field_name=field_name
        self.odd = gridlib.GridCellAttr()
        self.even = gridlib.GridCellAttr()
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                        ]

        def GetAttr(self, row, col, kind):
            attr = [self.even,self.odd][row % 8]
            attr.IncRef()
            return attr
    #--------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True


    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )

                self.GetView().ProcessTableMessage(msg)
        innerSetValue(row, col, value)
        # self.data[row][col] = value
    def SetRowValue(self, row,value):
        def innerSetValue(row,value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row,value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()
        innerSetValue(row,value)
        # self.data[row][col] = value

    #--------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return  (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0,numRows):
            self.data.remove(self.data[numRows-1-pos-rowNum])
        gridView=self.GetView()
        gridView.BeginBatch()
        deleteMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED,pos,numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True
    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass
class Staff_Workload_Statistics_Day_CNC_DataTable(gridlib.GridTableBase):
    def __init__(self, data,field_name):
        gridlib.GridTableBase.__init__(self)
        self.data=data
        self.field_name=field_name
        self.odd = gridlib.GridCellAttr()
        self.even = gridlib.GridCellAttr()
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_STRING,
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                            gridlib.GRID_VALUE_FLOAT + ':6,6',
                        ]

        def GetAttr(self, row, col, kind):
            attr = [self.even,self.odd][row % 8]
            attr.IncRef()
            return attr
    #--------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True


    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )

                self.GetView().ProcessTableMessage(msg)
        innerSetValue(row, col, value)
        # self.data[row][col] = value
    def SetRowValue(self, row,value):
        def innerSetValue(row,value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row,value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,            # The table
                        gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED, # what we did to it
                        1                                       # how many
                        )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()
        innerSetValue(row,value)
        # self.data[row][col] = value

    #--------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return  (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0,numRows):
            self.data.remove(self.data[numRows-1-pos-rowNum])
        gridView=self.GetView()
        gridView.BeginBatch()
        deleteMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED,pos,numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg=wx.grid.GridTableMessage(self,wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True
    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass
class Staff_Workload_Statistics_Day_SimpleGrid_CNC(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["姓名", "工位号", "玻璃门板面积", "普通门板面积", "顶线面积", "腰线面积", "脚线面积", "故障面积", "手工面积",
                                     "总工作量"]
        information_data = []
        self.cnc_table = Staff_Workload_Statistics_Day_CNC_DataTable(information_data, fyf_grid_operater_station)
        self.SetTable(self.cnc_table, True)
        self.date_item=[]
    def operator_calculate(self,data1,data2,data3):
        for i in range(len(data1)):
            if data1[i][2] != '' and data1[i][2] != None:
                data2.append(list(data1[i]))
        for i in range(len(data3)):
            if data3[i][2] != '' and data3[i][2] != None:
                data2.append(list(data3[i]))
    def CNC_display(self,date,data):#从数据库读取界面显示日期下的手工输入数据，如果未读到，界面手工输入面积显示零；如果读到，界面显示手工输入面积；
        get_door_type_area_id_list = []
        count_area=0
        self.get_job_id=[]
        self.employee_area=0
        self.employee_manual_area = []
        self.DeleteRows(0, self.GetNumberRows())
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id`,`Start_Machining_Time`,`Board_height`,`Board_width`,`Board_type` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Start_Machining_Time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id`,`Start_Machining_Time`,`Board_height`,`Board_width`,`Board_type` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Start_Machining_Time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            cursor.execute("SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (date, CNC_position))
            get_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute( "SELECT `Job_id`,`Name`FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % (CNC_position))
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            #将从数据库读到的员工工位、手输面积表单的数据放入列表中
            self.information_display(get_job_id,self.get_job_id,get_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id,get_door_type_area_id_list,get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
        # 对于同一工号的员工的生活量进行相加
            #当读到在线数据不为零或不为零，通过读到的在线数据、手输输入数据显示页面信息
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.cnc_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.cnc_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee =len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def information_display(self,data1,data2,data3,data4):
        transfer = []
        for i in range(len(data1)):
            if data1[i][0] not in transfer:
                transfer.append(data1[i][0])
                data2.append(list(data1[i]))
        for i in range(len(data2)):
            for x in range(0,7):
                self.SetReadOnly(i, x, True)
            self.SetReadOnly(i, cnc_area, True)
        for i in range(len(data3)):
            data4.append(list(data3[i]))
    def cnc_area_calculate(self,data1,data3,data4,data5,data6):
        id_number = data1[0][2]
        transfer_two=[]
        display=[]
        id_time_schedule_first=[]
        get_area_id_list=[]
        fault_area = 0
        manual_area = 0
        # 获取读到的同一ID的总的工作量
        for i in range(len(data1)):
            glass_door_area = 0
            door_area = 0
            roman_column_area = 0
            fascia_board_area = 0
            ceiling_area = 0
            belt_line_area = 0
            foot_line_area = 0
            if id_number != data1[i][2]:
                id_number = data1[i][2]
            if data1[i][1]==1 and '玻璃' in data1[i][2]:
                glass_door_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==1:
                door_area = data1[i][4] * data1[i][5]
            if data1[i][1]==3:
                roman_column_area=data1[i][4] * data1[i][5]
            if data1[i][1]==9:
                fascia_board_area = data1[i][4] * data1[i][5]
            total=glass_door_area+door_area+roman_column_area+fascia_board_area+ceiling_area+belt_line_area+foot_line_area
            door_area=door_area+roman_column_area+fascia_board_area
            if id_number not in id_time_schedule_first:
                id_time_schedule_first.append(id_number)
                transfer_list = [id_number,glass_door_area,door_area,ceiling_area,belt_line_area,foot_line_area,total]
                get_area_id_list.append(transfer_list)
            else:
                for k in range(len(get_area_id_list)):
                    if get_area_id_list[k][0] == id_number:
                        get_area_id_list[k][1] = glass_door_area+get_area_id_list[k][1]
                        get_area_id_list[k][2] = door_area+get_area_id_list[k][2]
                        get_area_id_list[k][3] = ceiling_area+get_area_id_list[k][3]
                        get_area_id_list[k][4] = belt_line_area+get_area_id_list[k][4]
                        get_area_id_list[k][5] = foot_line_area+get_area_id_list[k][5]
                        get_area_id_list[k][6] = total+get_area_id_list[k][6]
                        break
        #处理有多人登录时，把工作量平分，然后添加到get_area_id_list中
        #对处理过多人登录的get_area_id_list再次进行同一id工作量统计相加放到display列表中
        for i in range(len(get_area_id_list)):
            id_number=get_area_id_list[i][0]
            if id_number not in transfer_two:
                transfer_two.append(get_area_id_list[i][0])
                transfer_list = [id_number,get_area_id_list[i][1],get_area_id_list[i][2],get_area_id_list[i][3],get_area_id_list[i][4],get_area_id_list[i][5],get_area_id_list[i][6]]
                display.append(transfer_list)
            else:
                for k in range(len(display)):
                    if display[k][0] == id_number:
                        display[k][1] = get_area_id_list[i][1]+display[k][1]
                        display[k][2] = get_area_id_list[i][2]+display[k][2]
                        display[k][3] = get_area_id_list[i][3]+display[k][3]
                        display[k][4] = get_area_id_list[i][4]+display[k][4]
                        display[k][5] = get_area_id_list[i][5]+display[k][5]
                        display[k][6] = get_area_id_list[i][6]+display[k][6]
                        break
        #判断从数据库是否读到此日期下的cnc工位的手输面积，如果读到则在界面显示读到的数据，没有读到则在界面显示非手输面积
        if len(data3)!=0:
            for k in range(len(data5)):
                if data5[k][0] in transfer_two:
                    for i in range(len(display)):
                        if data5[k][0]==display[i][0]:
                            for h in range(len(data3)):
                                if display[i][0] == data3[h][1]:
                                    fault_area = data3[h][2]
                                    manual_area = data3[h][3]
                            display[i][6] = (display[i][6] / 1000000 + fault_area + manual_area) * 1000000
                            data4 = data4 + display[i][6]
                            inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000, fault_area,manual_area,display[i][6]/ 1000000]
                            self.cnc_table.SetRowValue(k, inform)
                            for x in range(0, 10):
                                self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
                else:
                    for h in range(len(data3)):
                        if data5[k][0]==data3[h][1]:
                            data4 = data4 + (data3[h][2]+data3[h][3])*1000000
                            inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0', data3[h][2],data3[h][3],data3[h][2]+data3[h][3]]
                            self.cnc_table.SetRowValue(k, inform)
                            if (data3[h][2]+data3[h][3])!=0 and (data3[h][2]+data3[h][3])!=0.0 and (data3[h][2]+data3[h][3])!=' ':
                                for x in range(0, 10):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
        else:
            for k in range(len(data5)):
                for i in range(len(display)):
                    if data5[k][0]==display[i][0]:
                        data4 = data4 + display[i][6]
                        inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000, '0','0',display[i][6]/ 1000000]
                        self.cnc_table.SetRowValue(k, inform)
                        for x in range(0, 10):
                            self.SetCellBackgroundColour(k, x, wx.YELLOW)
                        break
                    else:
                        inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0', '0', '0','0']
                        self.cnc_table.SetRowValue(k, inform)
        if data6[0]!='None':
            for k in range(len(data5)):
                if data5[k][0]==data6[0]:
                    for x in range(0,10):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data4/ 1000000
    def cnc_only_Under_line_area(self,data1,data2,data3,data6):
        for i in range(len(data6)):
            if len(data1) != 0:
                for h in range(len(data1)):
                    if data6[i][0]==data1[h][1]:
                        data2 = data2 +(data1[h][2]+data1[h][3])
                        inform = [data1[h][0], data1[h][1], '0', '0', '0', '0', '0', data1[h][2], data1[h][3],data1[h][2]+data1[h][3]]
                        self.cnc_table.SetRowValue(i, inform)
                        if (data1[h][2]+data1[h][3]) != 0 and (data1[h][2]+data1[h][3]) != 0.0 and (data1[h][2]+data1[h][3]) != ' ':
                            for x in range(0,10):
                                self.SetCellBackgroundColour(i, x, wx.YELLOW)
            else:
                inform = [data6[i][1], data6[i][0], '0', '0', '0', '0', '0', '0', '0','0']
                self.cnc_table.SetRowValue(i, inform)
                        # self.SetCellBackgroundColour(h, 0, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 1, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 2, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 3, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 4, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 5, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 6, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 7, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 8, wx.YELLOW)
                        # self.SetCellBackgroundColour(h, 9, wx.YELLOW)
        if data3[0]!='None':
            for k in range(len(data6)):
                if data6[k][0]==data3[0]:
                    for x in range(0,10):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data2
class Staff_Workload_Statistics_Day_SimpleGrid(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["姓名","工位号", "门板面积", "罗马柱面积","楣板面积", "顶线面积","腰线面积","脚线面积","故障面积","手工面积","总工作量"]
        information_data = []
        self.deliver_mark=130
        self.table=Staff_Workload_Statistics_Day_DataTable(information_data,fyf_grid_operater_station)
        self.SetTable(self.table, True)
    def operator_calculate(self,data1,data2,data3):
        for i in range(len(data1)):
            if data1[i][2] != '' and data1[i][2] != None:
                data2.append(list(data1[i]))
        for i in range(len(data3)):
            if data3[i][2] != '' and data3[i][2] != None:
                data2.append(list(data3[i]))
    def information_display(self, data1, data2, data3, data4):
        transfer = []
        for i in range(len(data1)):
            if data1[i][0] not in transfer:
                transfer.append(data1[i][0])
                data2.append(list(data1[i]))
        for i in range(len(data2)):
            for x in range(0, 8):
                self.SetReadOnly(i, x, True)
            self.SetReadOnly(i, area_pos, True)
        for i in range(len(data3)):
            data4.append(list(data3[i]))
    def six_area_calculate(self,data1,data3,data4,data5,data6):
        id_number = data1[0][2]
        transfer_two=[]
        display=[]
        id_time_schedule_first=[]
        get_area_id_list=[]
        fault_area = 0
        manual_area = 0
        # 获取读到的同一ID的总的工作量
        for i in range(len(data1)):
            door_area = 0
            roman_column_area = 0
            fascia_board_area = 0
            ceiling_area = 0
            belt_line_area = 0
            foot_line_area = 0
            if id_number != data1[i][2]:
                id_number = data1[i][2]
            if data1[i][1]==1:
                door_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==3:
                roman_column_area=data1[i][4] * data1[i][5]
            elif data1[i][1]==9:
                fascia_board_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==4:
                ceiling_area=data1[i][5]
            elif data1[i][1]==5:
                belt_line_area=data1[i][5]
            elif data1[i][1]==6:
                foot_line_area=data1[i][5]
            total=door_area+roman_column_area+fascia_board_area+ceiling_area+belt_line_area+foot_line_area
            if id_number not in id_time_schedule_first:
                id_time_schedule_first.append(id_number)
                transfer_list = [id_number, door_area ,roman_column_area,fascia_board_area,ceiling_area,belt_line_area,foot_line_area,total]
                get_area_id_list.append(transfer_list)
            else:
                for k in range(len(get_area_id_list)):
                    if get_area_id_list[k][0] == id_number:
                        get_area_id_list[k][1] = door_area+get_area_id_list[k][1]
                        get_area_id_list[k][2] = roman_column_area+get_area_id_list[k][2]
                        get_area_id_list[k][3] = fascia_board_area+get_area_id_list[k][3]
                        get_area_id_list[k][4] = ceiling_area+get_area_id_list[k][4]
                        get_area_id_list[k][5] = belt_line_area+get_area_id_list[k][5]
                        get_area_id_list[k][6] = foot_line_area+get_area_id_list[k][6]
                        get_area_id_list[k][7] = total+get_area_id_list[k][7]
                        break
        #处理有多人登录时，把工作量平分，然后添加到get_area_id_list中
        #对处理过多人登录的get_area_id_list再次进行同一id工作量统计相加放到display列表中
        for i in range(len(get_area_id_list)):
            id_number=get_area_id_list[i][0]
            if id_number not in transfer_two:
                transfer_two.append(get_area_id_list[i][0])
                transfer_list = [id_number,get_area_id_list[i][1],get_area_id_list[i][2],get_area_id_list[i][3],get_area_id_list[i][4],get_area_id_list[i][5],get_area_id_list[i][6],get_area_id_list[i][7]]
                display.append(transfer_list)
            else:
                for k in range(len(display)):
                    if display[k][0] == id_number:
                        display[k][1] = get_area_id_list[i][1]+display[k][1]
                        display[k][2] = get_area_id_list[i][2]+display[k][2]
                        display[k][3] = get_area_id_list[i][3]+display[k][3]
                        display[k][4] = get_area_id_list[i][4]+display[k][4]
                        display[k][5] = get_area_id_list[i][5]+display[k][5]
                        display[k][6] = get_area_id_list[i][6]+display[k][6]
                        display[k][7] = get_area_id_list[i][7]+display[k][7]
                        break
        if len(data3)!=0:
            for k in range(len(data5)):
                if data5[k][0] in transfer_two:
                    for i in range(len(display)):
                        if data5[k][0]==display[i][0]:
                            for h in range(len(data3)):
                                if display[i][0] == data3[h][1]:
                                    fault_area = data3[h][2]
                                    manual_area = data3[h][3]
                            display[i][7] = (display[i][7] / 1000000 + fault_area + manual_area) * 1000000
                            data4 = data4 + display[i][7]
                            inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000,fault_area,manual_area,display[i][7]/ 1000000]
                            self.table.SetRowValue(k, inform)
                            for x in range(0, 11):
                                self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
                else:
                    for h in range(len(data3)):
                        if data5[k][0]==data3[h][1]:
                            data4 = data4 + (data3[h][2]+data3[h][3])*1000000
                            inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0','0',data3[h][2],data3[h][3],data3[h][2]+data3[h][3]]
                            self.table.SetRowValue(k, inform)
                            if (data3[h][2]+data3[h][3])!=0 and (data3[h][2]+data3[h][3])!=0.0 and (data3[h][2]+data3[h][3])!=' ':
                                for x in range(0, 11):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
        else:
            for k in range(len(data5)):
                for i in range(len(display)):
                    if data5[k][0]==display[i][0]:
                        data4 = data4 + display[i][7]
                        inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000, '0','0',display[i][7]/ 1000000]
                        self.table.SetRowValue(k, inform)
                        for x in range(0, 11):
                            self.SetCellBackgroundColour(k, x, wx.YELLOW)
                        break
                    else:
                        inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0', '0', '0', '0','0']
                        self.table.SetRowValue(k, inform)
        if data6[0]!='None':#如果界面查询到有效员工，则此行显示青色
            for k in range(len(data5)):
                if data5[k][0]==data6[0]:
                    for x in range(0, 11):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data4/ 1000000
    def six_only_Under_line_area(self,data1,data2,data3,data6):
        for i in range(len(data6)):
            if len(data1) != 0:
                for h in range(len(data1)):
                    if data6[i][0]==data1[h][1]:
                        data2 = data2 +(data1[h][2]+data1[h][3])
                        inform = [data1[h][0], data1[h][1], '0', '0', '0', '0', '0','0', data1[h][2], data1[h][3],data1[h][2]+data1[h][3]]
                        self.table.SetRowValue(i, inform)
                        if (data1[h][2]+data1[h][3]) != 0 and (data1[h][2]+data1[h][3]) != 0.0 and (data1[h][2]+data1[h][3]) != ' ':
                            for x in range(0,11):
                                self.SetCellBackgroundColour(i, x, wx.YELLOW)
            else:
                inform = [data6[i][1], data6[i][0], '0', '0', '0', '0', '0','0', '0', '0','0']
                self.table.SetRowValue(i, inform)
        if data3[0]!='None':
            for k in range(len(data6)):
                if data6[k][0]==data3[0]:
                    for x in range(0,11):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data2
    def Drilling_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area = []
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Drilling_operator_id`,`Drilling_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1) and DATE_FORMAT(`Drilling_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') and `Hole`!='%s'" % (date,hole_type))
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Drilling_operator_id`,`Drilling_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1) and DATE_FORMAT(`Drilling_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') and `Hole`!='%s'" % (date,hole_type))
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute("SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (date,Drilling_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Drilling_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list,get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
        try:
            # 对于同一工号的员工的生活量进行相加
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Edge_milling_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1) and DATE_FORMAT(`Edge_milling_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') and (`Edge_type`!='' and `Edge_type`!='0'and `Edge_type`!='平板直边')" % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1) and DATE_FORMAT(`Edge_milling_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') and (`Edge_type`!='' and `Edge_type`!='0' and `Edge_type`!='平板直边')" % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute("SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (date,Edge_milling_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Edge_milling_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id,get_door_type_area_id_list,get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Polish_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Polish_operator_id`,`Polish_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Polish_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Polish_operator_id`,`Polish_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Polish_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute("SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (date, Polish_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Polish_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id,get_door_type_area_id_list,get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
        try:
            # 对于同一工号的员工的生活量进行相加
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Regula_display(self,date,data):#压条暂时不考虑顶线、腰线、脚线
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Regula_operator_id`,`Regula_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9) and DATE_FORMAT(`Regula_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') and (`Bar_type`!='' and `Bar_type`!='0')" % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Regula_operator_id`,`Regula_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9) and DATE_FORMAT(`Regula_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') and (`Bar_type`!='' and `Bar_type`!='0')" % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (date,Regula_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Regula_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id,get_door_type_area_id_list,get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Line_display(self,date,data):#压条暂时不考虑顶线、腰线、脚线
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id`,`Start_Machining_Time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Start_Machining_Time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d')" % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id`,`Start_Machining_Time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Start_Machining_Time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (date, Line_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Line_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id,get_door_type_area_id_list,get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Multiple_six_area_calculate(self,data1,data3,data4,data5,data6):
        id_number = data1[0][2]
        transfer_two=[]
        display=[]
        id_time_schedule_first=[]
        get_area_id_list=[]
        # 获取读到的同一ID的总的工作量
        for i in range(len(data1)):
            door_area = 0
            roman_column_area = 0
            fascia_board_area = 0
            ceiling_area = 0
            belt_line_area = 0
            foot_line_area = 0
            if id_number != data1[i][2]:
                id_number = data1[i][2]
            if data1[i][1]==1:
                door_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==3:
                roman_column_area=data1[i][4] * data1[i][5]
            elif data1[i][1]==9:
                fascia_board_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==4:
                ceiling_area=data1[i][5]
            elif data1[i][1]==5:
                belt_line_area=data1[i][5]
            elif data1[i][1]==6:
                foot_line_area=data1[i][5]
            total=door_area+roman_column_area+fascia_board_area+ceiling_area+belt_line_area+foot_line_area
            if id_number not in id_time_schedule_first:
                id_time_schedule_first.append(id_number)
                transfer_list = [id_number, door_area ,roman_column_area,fascia_board_area,ceiling_area,belt_line_area,foot_line_area,total]
                get_area_id_list.append(transfer_list)
            else:
                for k in range(len(get_area_id_list)):
                    if get_area_id_list[k][0] == id_number:
                        get_area_id_list[k][1] = door_area+get_area_id_list[k][1]
                        get_area_id_list[k][2] = roman_column_area+get_area_id_list[k][2]
                        get_area_id_list[k][3] = fascia_board_area+get_area_id_list[k][3]
                        get_area_id_list[k][4] = ceiling_area+get_area_id_list[k][4]
                        get_area_id_list[k][5] = belt_line_area+get_area_id_list[k][5]
                        get_area_id_list[k][6] = foot_line_area+get_area_id_list[k][6]
                        get_area_id_list[k][7] = total+get_area_id_list[k][7]
                        break
        #处理有多人登录时，把工作量平分，然后添加到get_area_id_list中
        for i in range(len(get_area_id_list)):
            if '&' in get_area_id_list[i][0].strip():
                get_name_list = get_area_id_list[i][0].strip().split('&')
                m=len(get_name_list)
                for n in range(len(get_name_list)):
                    transfer=[get_name_list[n],get_area_id_list[i][1]/m,get_area_id_list[i][2]/m,get_area_id_list[i][3]/m,get_area_id_list[i][4]/m,get_area_id_list[i][5]/m,get_area_id_list[i][6]/m,get_area_id_list[i][7]/m]
                    get_area_id_list.append(transfer)
        #对处理过多人登录的get_area_id_list再次进行同一id工作量统计相加放到display列表中
        for i in range(len(get_area_id_list)):
            id_number=get_area_id_list[i][0]
            if id_number not in transfer_two:
                transfer_two.append(get_area_id_list[i][0])
                transfer_list = [id_number,get_area_id_list[i][1],get_area_id_list[i][2],get_area_id_list[i][3],get_area_id_list[i][4],get_area_id_list[i][5],get_area_id_list[i][6],get_area_id_list[i][7]]
                display.append(transfer_list)
            else:
                for k in range(len(display)):
                    if display[k][0] == id_number:
                        display[k][1] = get_area_id_list[i][1]+display[k][1]
                        display[k][2] = get_area_id_list[i][2]+display[k][2]
                        display[k][3] = get_area_id_list[i][3]+display[k][3]
                        display[k][4] = get_area_id_list[i][4]+display[k][4]
                        display[k][5] = get_area_id_list[i][5]+display[k][5]
                        display[k][6] = get_area_id_list[i][6]+display[k][6]
                        display[k][7] = get_area_id_list[i][7]+display[k][7]
                        break
        # for i in range(len(display)):#获取在数据库读到的工作量总和
        #     if '&' not in display[i][0].strip():
        #         data5 = self.Multiple_display(display[i][0], display[i][1], display[i][2], display[i][3], display[i][4],display[i][5], display[i][6], display[i][7], data4, data5, data6)
        if len(data4)!=0:
            for k in range(len(data6)):
                if data6[k][0] in transfer_two:
                    for i in range(len(display)):
                        if '&' not in display[i][0].strip():
                            if data6[k][0]==display[i][0]:
                                for h in range(len(data4)):
                                    if display[i][0] == data4[h][1]:
                                        fault_area = data4[h][2]
                                        manual_area = data4[h][3]
                                display[i][7] = (display[i][7] / 1000000 + fault_area + manual_area) * 1000000
                                data5 = data5 + display[i][7]
                                inform = [data6[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000,fault_area,manual_area,display[i][7]/ 1000000]
                                self.table.SetRowValue(k, inform)
                                for x in range(0, 11):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                                break
                else:
                    for h in range(len(data4)):
                        if data6[k][0]==data4[h][1]:
                            data5 = data5 + (data4[h][2]+data4[h][3])*1000000
                            inform = [data6[k][1], data6[k][0], '0', '0','0', '0', '0','0',data4[h][2],data4[h][3],data4[h][2]+data4[h][3]]
                            self.table.SetRowValue(k, inform)
                            if (data4[h][2]+data4[h][3])!=0 and (data4[h][2]+data4[h][3])!=0.0 and (data4[h][2]+data4[h][3])!=' ':
                                for x in range(0, 11):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
        else:
            for k in range(len(data6)):
                for i in range(len(display)):
                    if '&' not in display[i][0].strip():
                        if data6[k][0]==display[i][0]:
                            data5 = data5 + display[i][7]
                            inform = [data6[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000, '0','0',display[i][7]/ 1000000]
                            self.table.SetRowValue(k, inform)
                            for x in range(0, 11):
                                self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
                        else:
                            inform = [data6[k][1], data6[k][0], '0', '0','0', '0', '0', '0', '0', '0','0']
                            self.table.SetRowValue(k, inform)
        if data3[0]!='None':#如果界面员工筛选为某一固定员工
            for k in range(len(data6)):
                if data6[k][0] == data3[0]:
                    for x in range(0, 11):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data5/1000000
    def Other_six_area_calculate(self,data1,data2,data4,data5,data6):
        Total = 0
        door_total = 0
        romal_total = 0
        fascial_total = 0
        ceiling_area = 0
        belt_line_area = 0
        foot_line_area = 0
        fault_area = 0
        manual_area = 0
        for i in range(len(data1)):
            if data1[i][1] == 1:
                door_total = door_total + data1[i][4] * data1[i][5]
            if data1[i][1] == 9:
                fascial_total = fascial_total + data1[i][4] * data1[i][5]
            if data1[i][1] == 3:
                romal_total = romal_total + data1[i][4] * data1[i][5]
            if data1[i][1] == 4:
                ceiling_area = ceiling_area + data1[i][5]
            if data1[i][1] == 5:
                belt_line_area = belt_line_area + data1[i][5]
            if data1[i][1] == 6:
                foot_line_area = foot_line_area + data1[i][5]
        Total = Total + door_total+fascial_total+romal_total+ceiling_area+belt_line_area+foot_line_area
        b=len(data5)
        if len(data2) != 0:
            for i in range(len(data5)):
                for k in range(0,8):
                    self.SetReadOnly(i, k, True)
                for k in range(len(data2)):
                    if data5[i][0]==data2[k][1]:
                        fault_area=data2[k][2]
                        manual_area=data2[k][3]
                Total=(Total/ b/ 1000000+fault_area+manual_area)*1000000*b
                data4=Total/b+data4
                inform = [data5[i][1], data5[i][0], door_total / b / 1000000, romal_total / b / 1000000,fascial_total / b / 1000000,
                          ceiling_area / b / 1000000, belt_line_area / b / 1000000, foot_line_area / b / 1000000,fault_area, manual_area, Total / b / 1000000]
                self.table.SetRowValue(i, inform)
                for x in range(0, 11):
                    self.SetCellBackgroundColour(i, x, wx.YELLOW)
        else:
            data4 = Total
            for i in range(len(data5)):
                for k in range(0,8):
                    self.SetReadOnly(i, k, True)
                inform = [data5[i][1], data5[i][0], door_total / b / 1000000, romal_total / b / 1000000,fascial_total / b / 1000000,
                          ceiling_area / b / 1000000, belt_line_area / b / 1000000, foot_line_area / b / 1000000,'0', '0', Total / b / 1000000]
                self.table.SetRowValue(i, inform)
                for x in range(0, 11):
                    self.SetCellBackgroundColour(i, x, wx.YELLOW)
        if data6[0] != 'None':
            for i in range(len(data5)):
                if data5[i][0] == data6[0]:
                    for x in range(0,11):
                        self.SetCellBackgroundColour(i, x, wx.CYAN)
        return data4/1000000
    def Artificial_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Artificial_polishing_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Artificial_polishing_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                date, Artificial_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Artificial_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Half_test_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Half_test_operator_id`,`Half_test_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Half_test_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Half_test_operator_id`,`Half_test_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Half_test_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Half_test_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Half_test_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
    def Sort_before_membrane_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Sort_before_membrane_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Sort_before_membrane_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Sort_before_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Sort_before_membrane_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Glue_spray_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Glue_spray_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Glue_spray_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Glue_spray_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Glue_spray_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Membrane_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.get_job_id=[]
        self.employee_area = 0
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Membrane_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Membrane_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id,get_door_type_area_id_list,get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.Multiple_six_area_calculate(get_door_type_area_id_list,data,self.employee_manual_area,count_area,self.get_job_id)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Static_display(self,date,data):
        get_door_type_area_id_list = []
        get_static_id=()
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, static_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % static_position)
            get_static_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_static_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.Other_six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def First_quality_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Quality_testing_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Quality_testing_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Quality_testing_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Quality_testing_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Assemble_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Assemble_operator_id`,`Assemble_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Assemble_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Assemble_operator_id`,`Assemble_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Assemble_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Assemble_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Assemble_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
            db.close()
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Archaize_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Archaize_operator_id`,`Archaize_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Archaize_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Archaize_operator_id`,`Archaize_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Archaize_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Archaize_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Archaize_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Shelf_after_membrane_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_membrane_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_membrane_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Shelf_after_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Shelf_after_membrane_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Package_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Package_operator_id`,`Package_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Package_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Package_operator_id`,`Package_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Package_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Package_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Package_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Shelf_after_package_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_package_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_package_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Shelf_after_package_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Shelf_after_package_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Delievery_schedule_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Delievery_schedule_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Delievery_schedule_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Delievery_schedule_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Delievery_schedule_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
    def Deliver_display(self,date,data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area=[]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Deliver_operator_id`,`Deliver_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Deliver_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Deliver_operator_id`,`Deliver_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Deliver_begin_time`, '%%Y%%m%%d')=DATE_FORMAT(('%s'), '%%Y%%m%%d') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Work_day`='%s' and  `Position`='%s'" % (
                    date, Deliver_position))
            get_staff_manual_area = cursor.fetchall()
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Deliver_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day_SimpleGrid界面数据处理、显示失败，请进行检查 \r\n')
class TestPanel(wx.Panel):
    def __init__(self, parent, ID, log):
        wx.Panel.__init__(self, parent, ID)
        self.log = log
        native = self.cal = CalendarCtrl(self, -1, wx.DateTime().Today(),
                                    style=wx.adv.CAL_SEQUENTIAL_MONTH_SELECTION)
        self.OnChangeMonth()
        # bind some event handlers to each calendar
        native.Bind(wx.adv.EVT_CALENDAR,                 self.OnCalSelected)
        native.Bind(wx.adv.EVT_CALENDAR_MONTH,           self.OnChangeMonth)
        native.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED,     self.OnCalSelChanged)
        native.Bind(wx.adv.EVT_CALENDAR_WEEKDAY_CLICKED, self.OnCalWeekdayClicked)

        # create some sizers for layout
        fgs = wx.FlexGridSizer(cols=2, hgap=50, vgap=50)
        fgs.Add(native)
        box = wx.BoxSizer()
        box.Add(fgs, 1, wx.EXPAND|wx.ALL, 25)
        self.SetSizer(box)



    def OnCalSelected(self, evt):
        self.log.write('OnCalSelected: %s\n' % evt.Date)
        if evt.Date.month == wx.DateTime.Aug and evt.Date.day == 14:
            self.log.write("HAPPY BIRTHDAY!")

    def OnCalWeekdayClicked(self, evt):
        self.log.write('OnCalWeekdayClicked: %s\n' % evt.GetWeekDay())

    def OnCalSelChanged(self, evt):
        cal = evt.GetEventObject()
        self.log.write("OnCalSelChanged:\n\t%s: %s\n\t%s: %s" %
                       ("EventObject", cal.__class__,
                        "Date       ", cal.GetDate(),
                        ))

    def OnChangeMonth(self, evt=None):
        if evt is None:
            cal = self.cal
        else:
            cal = evt.GetEventObject()
        self.log.write('OnChangeMonth: %s\n' % cal.GetDate())
        cur_month = cal.GetDate().GetMonth() + 1   # convert wxDateTime 0-11 => 1-12

        # August 14th is a special day, mark it with a blue square...
        if cur_month == 8:
            attr = CalendarDateAttr(border=wx.adv.CAL_BORDER_SQUARE,
                                          colBorder="blue")
            cal.SetAttr(14, attr)
        else:
            cal.ResetAttr(14)

#--------------------------------------------------------------------------------------------------------------
#查询员工月工作量统计
#--------------------------------------------------------------------------------------------------------------
class Staff_Workload_Statistics_Month(wx.Panel):
    def __init__(self, parent, log, id=wx.ID_ANY, title="", pos=wx.DefaultPosition,
                 size=(700, 650), style=wx.DEFAULT_FRAME_STYLE):
        wx.Panel.__init__(self, parent)
        self._flags = 0
        self.log = log
        self._leftWindow1 = wx.adv.SashLayoutWindow(self, 101, wx.DefaultPosition,
                                                    wx.Size(200, 1000), wx.NO_BORDER |
                                                    wx.adv.SW_3D | wx.CLIP_CHILDREN)
        self._leftWindow1.SetDefaultSize(wx.Size(250, 1000))
        self._leftWindow1.SetOrientation(wx.adv.LAYOUT_VERTICAL)
        self._leftWindow1.SetAlignment(wx.adv.LAYOUT_LEFT)
        self._leftWindow1.SetSashVisible(wx.adv.SASH_RIGHT, True)
        self._leftWindow1.SetExtraBorderSize(10)
        self._pnl = 0
        self.remainingSpace = Staff_Workload_Statistics_Month_Addpage_Panel(self,-1,self.log)
        self.ID_WINDOW_TOP = 100
        self.ID_WINDOW_LEFT1 = 101
        self.ID_WINDOW_RIGHT1 = 102
        self.ID_WINDOW_BOTTOM = 103
        self._leftWindow1.Bind(wx.adv.EVT_SASH_DRAGGED_RANGE, self.OnFoldPanelBarDrag,id=100, id2=103)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.remainingSpace.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnPageChanged)
        self.remainingSpace.panelOne.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.CNC_area_calculate)
        self.remainingSpace.panelTwo.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Drilling_area_calculate)
        self.remainingSpace.panelThree.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Edge_milling_area_calculate)
        self.remainingSpace.panelFour.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Polish_area_calculate)
        self.remainingSpace.panelFive.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Regula_area_calculate)
        self.remainingSpace.panelSix.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Artificial_area_calculate)
        self.remainingSpace.panelSeven.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Half_test_area_calculate)
        self.remainingSpace.panelEight.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Sort_before_membrane_area_calculate)
        self.remainingSpace.panelNine.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Glue_spray_area_calculate)
        self.remainingSpace.panelTen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Membrane_area_calculate)
        self.remainingSpace.panelEleven.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Static_area_calculate)
        self.remainingSpace.panelTwelve.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Assemble_area_calculate)
        self.remainingSpace.panelThirteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Archaize_area_calculate)
        self.remainingSpace.panelFourteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.First_quality_area_calculate)
        self.remainingSpace.panelFifteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Shelf_after_membrane_area_calculate)
        self.remainingSpace.panelSixteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Package_area_calculate)
        self.remainingSpace.panelSeventeen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Shelf_after_package_area_calculate)
        self.remainingSpace.panelEighteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Delievery_schedule_area_calculate)
        self.remainingSpace.panelNineteen.Bind(gridlib.EVT_GRID_CELL_CHANGED,self.Deliver_area_calculate)
        self.year_items = ['2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023','2024','2025','2026','2027','2028','2029','2030','2031','2032','2033','2034','2035','2036','2037','2038','2039','2040','2041','2042','2043','2044','2045','2046','2047','2048','2049','2050']
        self.ReCreateFoldPanel(0)
        self.in_production_element_id = 128
        self.shipped_element_id = 130
        self.Day_refresh()
        self.timer = wx.PyTimer(self.Day_refresh)
        self.timer.Start(10000)  # 设定计时间隔为10000毫秒
    def OnSize(self, event):
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        event.Skip()
    def OnFoldPanelBarDrag(self, event):

        # if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
        #     return

        if event.GetId() == self.ID_WINDOW_LEFT1:
            self._leftWindow1.SetDefaultSize(wx.Size(event.GetDragRect().width, 1000))

        # Leaves bits of itself behind sometimes
        wx.adv.LayoutAlgorithm().LayoutWindow(self, self.remainingSpace)
        self.remainingSpace.Refresh()
        event.Skip()
    def ReCreateFoldPanel(self, fpb_flags):
        self._pnl = fpb.FoldPanelBar(self._leftWindow1, -1, wx.DefaultPosition,wx.Size(-1, -1), agwStyle=fpb_flags)
        Images = wx.ImageList(16, 16)
        Images.Add(GetExpandedIconBitmap())
        Images.Add(GetCollapsedIconBitmap())
        # # 加上开始日期查询按钮
        item = self._pnl.AddFoldPanel("查询月工作量", False, foldIcons=Images)
        self.statictext1 = wx.StaticText(item, -1, label="选择查询年份：")
        self._pnl.AddFoldPanelWindow(item, self.statictext1)
        self.year_choose =wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.year_choose)
        self.January_type = wx.NewId()
        self.February_type = wx.NewId()
        self.March_type = wx.NewId()
        self.April_type = wx.NewId()
        self.May_type = wx.NewId()
        self.June_type = wx.NewId()
        self.July_type = wx.NewId()
        self.August_type = wx.NewId()
        self.September_type = wx.NewId()
        self.October_type = wx.NewId()
        self.November_type = wx.NewId()
        self.December_type = wx.NewId()
        self.radio4 = wx.RadioButton(item, self.January_type, "一月")
        self.radio5 = wx.RadioButton(item, self.February_type, "二月")
        self.radio6 = wx.RadioButton(item, self.March_type, "三月")
        self.radio7 = wx.RadioButton(item, self.April_type, "四月")
        self.radio8 = wx.RadioButton(item, self.May_type, "五月")
        self.radio9 = wx.RadioButton(item, self.June_type, "六月")
        self.radio10 = wx.RadioButton(item, self.July_type, "七月")
        self.radio11 = wx.RadioButton(item, self.August_type, "八月")
        self.radio12 = wx.RadioButton(item, self.September_type, "九月")
        self.radio13 = wx.RadioButton(item, self.October_type, "十月")
        self.radio14 = wx.RadioButton(item, self.November_type, "十一月")
        self.radio15 = wx.RadioButton(item, self.December_type, "十二月")
        self._pnl.AddFoldPanelWindow(item, self.radio4, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio5, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio6, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio7, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio8, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio9, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio10, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio11, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio12, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio13, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio14, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelWindow(item, self.radio15, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self._pnl.AddFoldPanelSeparator(item)
        self.today = wx.NewId()
        self.yesterday = wx.NewId()
        self.byesterday = wx.NewId()
        self.currStyle = wx.Button(item, self.today, "本月")
        self._pnl.AddFoldPanelWindow(item, self.currStyle,fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self.radio1 = wx.Button(item, self.yesterday, "上个月")
        self._pnl.AddFoldPanelWindow(item, self.radio1,fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        self.radio2 = wx.Button(item, self.byesterday, "上上个月")
        self._pnl.AddFoldPanelWindow(item, self.radio2,fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        # self._pnl.AddFoldPanelWindow(item, self.currStyle, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        # self._pnl.AddFoldPanelWindow(item, self.radio1, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        # self._pnl.AddFoldPanelWindow(item, self.radio2, fpb.FPB_ALIGN_WIDTH, fpb.FPB_DEFAULT_SPACING, 10)
        # btn_date_clear = wx.Button(item, wx.ID_ANY, "清除日期索引")
        # self._pnl.AddFoldPanelWindow(item, btn_date_clear)
        item = self._pnl.AddFoldPanel("按员工查询", False, foldIcons=Images)
        self.statictext6 = wx.StaticText(item, -1, label="选择本工位查询的员工：")
        self._pnl.AddFoldPanelWindow(item, self.statictext6)
        self.employee_combox = wx.ComboBox(item, -1, pos=(20, 10), style=wx.CB_DROPDOWN)
        self._pnl.AddFoldPanelWindow(item, self.employee_combox)
        self._pnl.AddFoldPanelSeparator(item)
        self.year_choose.SetValue('2018')
        self.employee_combox.SetValue('ALL')
        self.year_choose.Bind(wx.EVT_COMBOBOX, self.year_click)  # 触发合同combobox下拉框中内容被选中事件
        self.currStyle.Bind(wx.EVT_BUTTON, self.MonthChange)
        self.radio1.Bind(wx.EVT_BUTTON, self.MonthChange)
        self.radio2.Bind(wx.EVT_BUTTON, self.MonthChange)
        self.radio4.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio5.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio6.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio7.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio8.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio9.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio10.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio11.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio12.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio13.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio14.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        self.radio15.Bind(wx.EVT_RADIOBUTTON, self.MonthChange)
        # btn_date_clear.Bind(wx.EVT_BUTTON, self.time_clear)
        self.employee_combox.Bind(wx.EVT_COMBOBOX_DROPDOWN, self.employee_information_display)
        self.employee_combox.Bind(wx.EVT_COMBOBOX, self.employee_click)  # 触发合同combobox下拉框中内容被选中事件
        for i in range(len(self.year_items)):
            self.year_choose.Append(self.year_items[i])
        now_time = time.localtime(time.time())
        self.month_item=now_time.tm_mon
        self.month_items = [self.radio4, self.radio5, self.radio6, self.radio7, self.radio8, self.radio9, self.radio10,self.radio11, self.radio12, self.radio13, self.radio14, self.radio15]
        self.month_items[self.month_item-1].SetValue(True)
        if now_time.tm_mon >= 10:
            self.month = str(now_time.tm_mon)
        else:
            self.month = '0' + str(now_time.tm_mon)
    def year_click(self,event):
        now_time = time.localtime(time.time())
        now_year=self.year_choose.GetValue()
        if str(now_year)==str(now_time.tm_year):
            self.month_items[now_time.tm_mon - 1].SetValue(True)
            if now_time.tm_mon >= 10:
                self.month = str(now_time.tm_mon)
            else:
                self.month = '0' + str(now_time.tm_mon)
        else:
            self.month_items[0].SetValue(True)
            self.month = '01'
    def MonthChange(self,event):
        eventid = event.GetId()
        self.employee_combox.SetValue('ALL')
        now_time = time.localtime(time.time())  # 本地当前时间
        if eventid == self.today:
            self.year_choose.SetValue(str(now_time.tm_year))
            self.month_items[now_time.tm_mon - 1].SetValue(True)
            if now_time.tm_mon>=10:
                self.month=str(now_time.tm_mon)
            else:
                self.month = '0'+str(now_time.tm_mon)
        elif eventid == self.yesterday:
            self.year_choose.SetValue(str(now_time.tm_year))
            if now_time.tm_mon==1:
                self.year_choose.SetValue(str(now_time.tm_year-1))
                self.month_items[0].SetValue(True)
                self.month = '01'
            else:
                self.month_items[now_time.tm_mon - 2].SetValue(True)
                if (now_time.tm_mon - 1) >= 10:
                    self.month = str(now_time.tm_mon - 1)
                else:
                    self.month = '0' + str(now_time.tm_mon - 1)
        elif eventid == self.byesterday:
            if now_time.tm_mon==2:
                self.year_choose.SetValue(str(now_time.tm_year-1))
                self.month_items[0].SetValue(True)
                self.month = '01'
            else:
                self.month_items[now_time.tm_mon - 3].SetValue(True)
                if (now_time.tm_mon - 2) >= 10:
                    self.month = str(now_time.tm_mon - 2)
                else:
                    self.month = '0' + str(now_time.tm_mon - 2)
        elif eventid == self.January_type:
            self.month = '01'
        elif eventid == self.February_type:
            self.month = '02'
        elif eventid == self.March_type:
            self.month = '03'
        elif eventid == self.April_type:
            self.month = '04'
        elif eventid == self.May_type:
            self.month = '05'
        elif eventid == self.June_type:
            self.month = '06'
        elif eventid == self.July_type:
            self.month = '07'
        elif eventid == self.August_type:
            self.month = '08'
        elif eventid == self.September_type:
            self.month = '09'
        elif eventid == self.October_type:
            self.month = '10'
        elif eventid == self.November_type:
            self.month = '11'
        elif eventid == self.December_type:
            self.month = '12'
        if self.remainingSpace.GetSelection() == 0:
            self.remainingSpace.panelOne.grid.cnc_table.DeleteRows(0, self.remainingSpace.panelOne.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 1:
                    self.remainingSpace.panelTwo.grid.table.DeleteRows(0, self.remainingSpace.panelTwo.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 2:
            self.remainingSpace.panelThree.grid.table.DeleteRows(0, self.remainingSpace.panelThree.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 3:
            self.remainingSpace.panelFour.grid.table.DeleteRows(0, self.remainingSpace.panelFour.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 4:
            self.remainingSpace.panelFive.grid.table.DeleteRows(0, self.remainingSpace.panelFive.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 5:
            self.remainingSpace.panelTwenty.grid.table.DeleteRows(0, self.remainingSpace.panelTwenty.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 6:
            self.remainingSpace.panelSix.grid.table.DeleteRows(0, self.remainingSpace.panelSix.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 7:
            self.remainingSpace.panelSeven.grid.table.DeleteRows(0, self.remainingSpace.panelSeven.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 8:
            self.remainingSpace.panelEight.grid.table.DeleteRows(0, self.remainingSpace.panelEight.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 9:
            self.remainingSpace.panelNine.grid.table.DeleteRows(0, self.remainingSpace.panelNine.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 10:
            self.remainingSpace.panelTen.grid.table.DeleteRows(0, self.remainingSpace.panelTen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 11:
            self.remainingSpace.panelEleven.grid.table.DeleteRows(0, self.remainingSpace.panelEleven.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 12:
            self.remainingSpace.panelTwelve.grid.table.DeleteRows(0, self.remainingSpace.panelTwelve.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 13:
            self.remainingSpace.panelThirteen.grid.table.DeleteRows(0, self.remainingSpace.panelThirteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 14:
            self.remainingSpace.panelFourteen.grid.table.DeleteRows(0,self.remainingSpace.panelFourteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 15:
            self.remainingSpace.panelFifteen.grid.table.DeleteRows(0,self.remainingSpace.panelFifteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 16:
            self.remainingSpace.panelSixteen.grid.table.DeleteRows(0, self.remainingSpace.panelSixteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 17:
            self.remainingSpace.panelSeventeen.grid.table.DeleteRows(0, self.remainingSpace.panelSeventeen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 18:
            self.remainingSpace.panelEighteen.grid.table.DeleteRows(0,self.remainingSpace.panelEighteen.grid.GetNumberRows())
        if self.remainingSpace.GetSelection() == 19:
            self.remainingSpace.panelNine.grid.table.DeleteRows(0, self.remainingSpace.panelNine.grid.GetNumberRows())
        self.Day_refresh()
    def month_area_calculate(self,data1,data2):
        transfer_staff = []
        if len(data1)!=0:
            for i in range(len(data1)):
                if data1[i][1] not in transfer_staff:
                    transfer_staff.append(data1[i][1])
                    data2.append(list(data1[i]))
                else:#可能有一个月的员工，则不能用break跳出循环
                    for k in range(len(data2)):
                        if data2[k][1] == data1[i][1]:
                            data2[k][2] = data2[k][2] + data1[i][2]
                            data2[k][3] = data2[k][3] + data1[i][3]
    def CNC_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelOne.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list=[]
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                self.start_time, CNC_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                start_time, CNC_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area,get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_name)
                    employee_id = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_id)
                    employee_door_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_glass)
                    employee_roman_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_door)
                    employee_Fault_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_fault_position)
                    employee_Manual_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_manual_position)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8"))
                    self.remainingSpace.panelOne.grid.cnc_table.SetValue(i, cnc_area, employee_Total)
                    employee_Total_area = employee_Total_area + employee_Total
                    if len(get_staff_manual_area) == 0:
                        employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - fault_area
                        employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1] == employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" %(employee_name,employee_id,CNC_position,employee_Fault_area,employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_id)
                    employee_door_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_glass)
                    employee_roman_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_door)
                    employee_Fault_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_fault_position)
                    employee_Manual_area = self.remainingSpace.panelOne.grid.GetCellValue(i, cnc_manual_position)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(
                        unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8"))
                    self.remainingSpace.panelOne.grid.cnc_table.SetValue(i, cnc_area, employee_Total)
                    employee_Total_area = employee_Total_area + employee_Total
                    if len(get_staff_manual_area) == 0:
                        employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - fault_area
                        employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1] == employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, CNC_position, start_time))
                db.commit()
            self.remainingSpace.panelOne.number_y.SetValue(str(employee_Total_area))
            db.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month中CNC_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Drilling_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelTwo.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Drilling_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Drilling_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_fascial)
                    employee_Fault_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwo.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Drilling_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, other_fascial)
                    employee_Fault_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwo.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwo.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Drilling_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTwo.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month中Drilling_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Edge_milling_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelThree.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (self.start_time, Edge_milling_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Edge_milling_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelThree.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelThree.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_fascial)
                    employee_Fault_area = self.remainingSpace.panelThree.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThree.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThree.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id,Edge_milling_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelThree.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThree.grid.GetCellValue(i, other_fascial)
                    employee_Fault_area = self.remainingSpace.panelThree.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThree.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThree.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Edge_milling_position, start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelThree.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Edge_milling_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Polish_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelFour.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (self.start_time, Polish_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Edge_milling_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area)==0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFour.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFour.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFour.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFour.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFour.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Polish_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFour.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFour.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFour.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFour.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFour.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Polish_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFour.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Polish_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Regula_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelFive.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (self.start_time, Regula_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Regula_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area)==0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFive.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFive.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFive.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFive.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFive.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Regula_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFive.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFive.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFive.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFive.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFive.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Regula_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFive.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Regula_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Artificial_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelSix.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                    self.start_time, Artificial_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Artificial_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSix.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSix.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSix.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSix.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSix.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                            employee_name, employee_id, Artificial_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSix.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSix.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSix.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSix.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSix.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                            employee_Fault_area, employee_Manual_area, employee_id, Artificial_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSix.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Artificial_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Half_test_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelSeven.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Half_test_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Half_test_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeven.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Half_test_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeven.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Half_test_position, start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSeven.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Half_test_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Sort_before_membrane_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelEight.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Sort_before_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Half_test_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelEight.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelEight.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEight.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEight.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEight.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Sort_before_membrane_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelEight.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEight.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEight.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEight.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEight.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Sort_before_membrane_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelEight.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Sort_before_membrane_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Glue_spray_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelNine.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Glue_spray_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Half_test_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelNine.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelNine.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNine.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNine.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNine.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Glue_spray_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelNine.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNine.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNine.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNine.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNine.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Glue_spray_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelNine.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Glue_spray_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Membrane_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelTen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Membrane_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Membrane_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Membrane_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Membrane_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Membrane_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Static_area_calculate(self, event):
        grid_numRows = self.remainingSpace.panelEleven.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, static_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, static_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEleven.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, static_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEleven.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEleven.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, static_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelEleven.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Static_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Assemble_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelTwelve.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time,Assemble_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Assemble_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwelve.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Assemble_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwelve.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwelve.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Assemble_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTwelve.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Assemble_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Archaize_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelThirteen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time,Archaize_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Archaize_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThirteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Archaize_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelThirteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelThirteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Archaize_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelThirteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Archaize_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def First_quality_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelFourteen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time,Quality_testing_position ))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Quality_testing_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFourteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Quality_testing_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFourteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFourteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Quality_testing_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFourteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中First_quality_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Shelf_after_membrane_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelFifteen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Shelf_after_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Shelf_after_membrane_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFifteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Shelf_after_membrane_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelFifteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))+ float(unicode(employee_fascial_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelFifteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Shelf_after_membrane_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelFifteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Shelf_after_membrane_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Package_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelSixteen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Package_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Package_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSixteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Package_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSixteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSixteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Package_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSixteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Package_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Shelf_after_package_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelSeventeen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Shelf_after_package_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Shelf_after_package_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeventeen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Shelf_after_package_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelSeventeen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelSeventeen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Shelf_after_package_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelSeventeen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Shelf_after_package_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Delievery_schedule_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelEighteen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (
                self.start_time, Delievery_schedule_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Delievery_schedule_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEighteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (
                        employee_name, employee_id, Delievery_schedule_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelEighteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelEighteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Delievery_schedule_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelEighteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Delievery_schedule_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Deliver_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelNineteen.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (self.start_time,Deliver_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Deliver_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNineteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Deliver_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelNineteen.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelNineteen.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute(
                        "UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (
                        employee_Fault_area, employee_Manual_area, employee_id, Deliver_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelNineteen.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Deliver_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def Line_area_calculate(self,event):
        grid_numRows = self.remainingSpace.panelTwenty.grid.GetNumberRows()
        fault_area = 0.0
        manual_area = 0.0
        employee_Total_area = 0
        get_staff_manual_area_list = []
        try:
            start_time = self.start_time.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            # 从数据库读取更改界面手工输入面积日期下，数据库此时是否有此日期的数据
            # 每个工位员工界面显示此工位全部员工数据信息，当数据库无此日期下的手工输入面积时，则会在运行程序第一次修改手工输入面积时，对此工位全部员工进行手工输入数据的插入；之后如果此工位再有手工输入面积的更改则对此日期下的手工输入面积进行更新即可。
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Position`='%s'" % (self.start_time, Line_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Line_position))
            get_month_staff_manual_area = cursor.fetchall()
            self.month_area_calculate(get_staff_manual_area, get_staff_manual_area_list)
            if len(get_month_staff_manual_area) == 0:
                for i in range(grid_numRows):
                    employee_name = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_name)
                    employee_id = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwenty.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("INSERT INTO `work_staff_workload_manual_area`(`Name`,`Job_id`,`Position`,`fault_area`,`manual_area`,`Month_day`) VALUES ('%s','%s','%s','%s','%s','%s')" % (employee_name, employee_id, Line_position, employee_Fault_area, employee_Manual_area,start_time))
                db.commit()
            else:
                for i in range(grid_numRows):
                    employee_id = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_id)
                    employee_door_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_door)
                    employee_roman_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_roman)
                    employee_fascial_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_fascial)
                    employee_celing_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_celing)
                    employee_belt_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_belt)
                    employee_foot_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, other_foot)
                    employee_Fault_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, fault_pos)
                    employee_Manual_area = self.remainingSpace.panelTwenty.grid.GetCellValue(i, manual_pos)
                    employee_Total = float(unicode(employee_Fault_area).encode("utf8")) + float(unicode(employee_Manual_area).encode("utf8")) + float(unicode(employee_door_area).encode("utf8")) + float(unicode(employee_roman_area).encode("utf8")) + float(unicode(employee_fascial_area).encode("utf8")) + float(unicode(employee_celing_area).encode("utf8")) + float(unicode(employee_belt_area).encode("utf8")) + float(unicode(employee_foot_area).encode("utf8"))
                    employee_Total_area = employee_Total_area + employee_Total
                    self.remainingSpace.panelTwenty.grid.table.SetValue(i, area_pos, employee_Total)
                    if len(get_staff_manual_area)==0:
                        employee_Fault_area=float(unicode(employee_Fault_area).encode("utf8"))-fault_area
                        employee_Manual_area=float(unicode(employee_Manual_area).encode("utf8"))-manual_area
                    else:
                        for k in range(len(get_staff_manual_area_list)):
                            if get_staff_manual_area_list[k][1]==employee_id:
                                employee_Fault_area = float(unicode(employee_Fault_area).encode("utf8")) - get_staff_manual_area_list[k][2]
                                employee_Manual_area = float(unicode(employee_Manual_area).encode("utf8")) - get_staff_manual_area_list[k][3]
                    cursor.execute("UPDATE `work_staff_workload_manual_area` SET fault_area='%s',manual_area='%s'WHERE (`Job_id`='%s' and `Position`='%s' and `Month_day`='%s')" % (employee_Fault_area, employee_Manual_area, employee_id, Line_position,start_time))
                db.commit()
            db.close()
            self.remainingSpace.panelTwenty.number_y.SetValue(str(employee_Total_area))
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Day中Line_area_calculate连接数据库失败，请进行检查 \r\n')
        self.Day_refresh()
    def OnPageChanged(self,event):
        if self:
            old = event.GetOldSelection()
            new = event.GetSelection()
            sel = self.remainingSpace.GetSelection()
            self.time_clear(self)
            self.employee_combox.SetValue('ALL')
            self.Day_refresh()
            # self.log.write('OnPageChanged,  old:%d, new:%d, sel:%d\n' % (old, new, sel))
        event.Skip()
    def time_deal(self):
        try:
            self.year = str(self.year_choose.GetValue())
            self.start_time = self.year + '-' + self.month+'-'+'01'
        except:
            pass
    def time_clear(self,evt):
    # try:
        now_time=time.localtime(time.time())
        self.year_choose.SetValue(str(now_time.tm_year))
        self.month_items[now_time.tm_mon - 1].SetValue(True)
        if now_time.tm_mon >= 10:
            self.month = str(now_time.tm_mon)
        else:
            self.month = '0' + str(now_time.tm_mon)
        self.Day_refresh()
    def OnChanged(self,event):
        self.currStyle.SetValue(False)
        self.radio1.SetValue(False)
        self.radio2.SetValue(False)
        self.radio3.SetValue(False)
        # self.employee_combox.SetValue('ALL')
        self.Day_refresh()
    def OnStyleChange(self,event):
        eventid = event.GetId()
        now_time = '0'
        self.employee_combox.SetValue('ALL')
        # self.AllCancel(self)
        if eventid == self.today:
            now_time =time.localtime(time.time())  # 本地当前时间
        elif eventid == self.yesterday:
            today = datetime.date.today()
            oneday = datetime.timedelta(days=1)
            now_time = (today - oneday).timetuple()  # 本地当前时间
        elif eventid == self.byesterday:
            today = datetime.date.today()
            twoday = datetime.timedelta(days=2)
            now_time = (today - twoday).timetuple()  # 本地当前时间
        elif eventid == self.bbyesterday:
            today = datetime.date.today()
            threeday = datetime.timedelta(days=3)
            now_time = (today - threeday).timetuple()  # 本地当前时间
        now_time_1 = str(now_time.tm_year).split('20')
        t3 = now_time_1[1], str(now_time.tm_mday), str(now_time.tm_mon)
        st = '/'
        now_time = st.join(t3)
        date_time = datetime.datetime.strptime(now_time, '%y/%d/%m')
        self.calendar_begin.SetDate(date_time)
        self.Day_refresh()
    def employee_information_display(self,event):
        self.time_deal()
        self.display_operator_name=[]
        self.display_operator_id=[]
        self.display_operator={}
        get_employee_id=()
        get_employee_id_list=[]
        self.employee_combox.Clear()
        self.employee_combox.SetValue('None')
        try:
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            if self.remainingSpace.GetSelection() == 0:  # 如果为cnc工位
                cursor_management.execute("SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % CNC_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 1:  # 如果为cnc工位
                cursor_management.execute("SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Drilling_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 2:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Edge_milling_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 3:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Polish_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 4:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Regula_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 5:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Line_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 6:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Artificial_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 7:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Half_test_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 8:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Sort_before_membrane_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 9:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Glue_spray_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 10:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Membrane_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 11:  # 如果为静置工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % static_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 12:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Assemble_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 13:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Archaize_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 14:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Quality_testing_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 15:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Shelf_after_membrane_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 16:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Package_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 17:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Shelf_after_package_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 18:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Delievery_schedule_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            if self.remainingSpace.GetSelection() == 19:  # 如果为cnc工位
                cursor_management.execute(
                    "SELECT `Job_id` FROM `info_staff_new` WHERE `Position`='%d' " % Deliver_position)
                get_employee_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            self.other_operator_calculate(get_employee_id, get_employee_id_list)
            db_management.close()
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month连接数据库失败，请进行检查 \r\n')
        if len(get_employee_id_list)!=0:
            # 判断是否有多员工登陆，如果有多员工登陆，获取其中单个员工的id，并对总的单元和多员工中的单员工进行汇总，并去重
            for i in range(len(get_employee_id_list)):
                m = 0
                if '&' in get_employee_id_list[i][0].strip():
                    get_name_list = get_employee_id_list[i][0].strip().split('&')
                    for n in range(len(get_name_list)):
                        transfer=[get_name_list[n]]
                        get_employee_id_list.append(transfer)
                            # 通过字典获取员工姓名
                            # self.log.WriteText('生产进度管理，FYF_Pane.py中SimpleGrid类读取姓名显示，请查看表格进行检查 \r\n')
                            # 通过字典获取员工姓名
            for i in range(len(get_employee_id_list)):
                m = 0
                if '&' not in get_employee_id_list[i][0].strip():
                    if get_employee_id_list[i][0].strip() in get_operater_name_list:  # 判断是否为有效值
                        m = get_employee_id_list[i][0].strip()
                        operator_name = unicode(dict_name[m]).encode("utf8")
                    elif get_employee_id_list[i][0].strip() == '0':
                        operator_name = '管理员'
                    else:
                        operator_name = str(get_employee_id_list[i][0]).strip()  # 若不是有效值则传值'101'
                    if get_employee_id_list[i][0] not in self.display_operator_id:#对添加的job_id进行去重
                        self.display_operator_id.append(get_employee_id_list[i][0])
                        self.display_operator_name.append(operator_name)
                        self.display_operator[operator_name] = get_employee_id_list[i][0]
            if len(self.display_operator_name)==0:
                self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month类员工查询此时间范围无员工姓名，请进行检查 \r\n')
            else:
                self.employee_combox.Append('None')
                for i in range(len(self.display_operator_name)):
                    self.employee_combox.Append(self.display_operator_name[i])
    def operator_calculate(self,data1,data2,data3):
        for i in range(len(data1)):
            if data1[i][2] != '' and data1[i][2] != None:
                data2.append(list(data1[i]))
        for i in range(len(data3)):
            if data3[i][2] != '' and data3[i][2] != None:
                data2.append(list(data3[i]))
    def other_operator_calculate(self,data1,data2):
        for i in range(len(data1)):
            if data1[i][0] != '' and data1[i][0] != None:
                data2.append(list(data1[i]))
    def employee_click(self,event):
        self.Day_refresh()
    def StyleChange(self,event):
        eventid = event.GetId()
        self.employee_combox.SetValue('ALL')
        # self.AllCancel(self)
        if eventid == self.day_query:
            self.currStyle.Enable(True)
            self.radio1.Enable(True)
            self.radio2.Enable(True)
            self.radio3.Enable(True)
        elif eventid == self.mouth_query:
            self.currStyle.Enable(False)
            self.radio1.Enable(False)
            self.radio2.Enable(False)
            self.radio3.Enable(False)
            begin_time = self.calendar_begin.GetDate()  # 获得开始时间
            t1 = str(begin_time).split(' ')
            t2 = t1[0].split('/')
            self.start_time = '%s%s-%s-%s' % ('20', t2[2], t2[0], t2[1])
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id` FROM `order_element_online` WHERE DATE_FORMAT(`First_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m')" % self.start_time)
            get_employee_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id` FROM `order_element_complete` WHERE DATE_FORMAT(`First_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Machining_operator_id`!=''" % self.start_time)
            get_employee_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # SELECT `Part_id`, `Element_type_id`, `Machining_operator_id` FROM `order_element_online` WHERE DATE_FORMAT(`First_day`, '%Y%m') = DATE_FORMAT('2018-08-20', '%Y%m')
            #SELECT * FROM 表名 WHERE DATE_FORMAT(时间字段名, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m')
    def Day_refresh(self):
        self.time_deal()
        self.employee_name=[]
        try:
            if self.employee_combox.GetValue()!='ALL':
                m=str(self.employee_combox.GetValue())
                self.employee_name.append(unicode(self.display_operator[m]).encode("utf8"))
            else:
                self.employee_name.append(self.employee_combox.GetValue())
        except:
            pass
        #通过Notebook界面选择，显示界面对应工位信息。
        try:
            if self.remainingSpace.GetSelection()==0:
                if self.remainingSpace.panelOne.grid.CNC_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelOne.number_x.SetValue(str(self.remainingSpace.panelOne.grid.employee))
                    self.remainingSpace.panelOne.number_y.SetValue(str(self.remainingSpace.panelOne.grid.employee_area))
            if self.remainingSpace.GetSelection()==1:
                if self.remainingSpace.panelTwo.grid.Drilling_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelTwo.number_x.SetValue(str(self.remainingSpace.panelTwo.grid.employee))
                    self.remainingSpace.panelTwo.number_y.SetValue(str(self.remainingSpace.panelTwo.grid.employee_area))
            if self.remainingSpace.GetSelection()==2:
                if self.remainingSpace.panelThree.grid.Edge_milling_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelThree.number_x.SetValue(str(self.remainingSpace.panelThree.grid.employee))
                    self.remainingSpace.panelThree.number_y.SetValue(str(self.remainingSpace.panelThree.grid.employee_area))
            if self.remainingSpace.GetSelection()==3:
                if self.remainingSpace.panelFour.grid.Polish_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFour.number_x.SetValue(str(self.remainingSpace.panelFour.grid.employee))
                    self.remainingSpace.panelFour.number_y.SetValue(str(self.remainingSpace.panelFour.grid.employee_area))
            if self.remainingSpace.GetSelection()==4:
                if self.remainingSpace.panelFive.grid.Regula_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFive.number_x.SetValue(str(self.remainingSpace.panelFive.grid.employee))
                    self.remainingSpace.panelFive.number_y.SetValue(str(self.remainingSpace.panelFive.grid.employee_area))
            if self.remainingSpace.GetSelection()==5:
                if self.remainingSpace.panelSix.grid.Artificial_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSix.number_x.SetValue(str(self.remainingSpace.panelSix.grid.employee))
                    self.remainingSpace.panelSix.number_y.SetValue(str(self.remainingSpace.panelSix.grid.employee_area))
            if self.remainingSpace.GetSelection()==6:
                if self.remainingSpace.panelSeven.grid.Half_test_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSeven.number_x.SetValue(str(self.remainingSpace.panelSeven.grid.employee))
                    self.remainingSpace.panelSeven.number_y.SetValue(str(self.remainingSpace.panelSeven.grid.employee_area))
            if self.remainingSpace.GetSelection()==7:
                if self.remainingSpace.panelEight.grid.Sort_before_membrane_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelEight.number_x.SetValue(str(self.remainingSpace.panelEight.grid.employee))
                    self.remainingSpace.panelEight.number_y.SetValue(str(self.remainingSpace.panelEight.grid.employee_area))
            if self.remainingSpace.GetSelection()==8:
                if self.remainingSpace.panelNine.grid.Glue_spray_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelNine.number_x.SetValue(str(self.remainingSpace.panelNine.grid.employee))
                    self.remainingSpace.panelNine.number_y.SetValue(str(self.remainingSpace.panelNine.grid.employee_area))
            if self.remainingSpace.GetSelection()==9:
                if self.remainingSpace.panelTen.grid.Membrane_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelTen.number_x.SetValue(str(self.remainingSpace.panelTen.grid.employee))
                    self.remainingSpace.panelTen.number_y.SetValue(str(self.remainingSpace.panelTen.grid.employee_area))
            if self.remainingSpace.GetSelection()==10:
                if self.remainingSpace.panelEleven.grid.Static_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelEleven.number_x.SetValue(str(self.remainingSpace.panelEleven.grid.employee))
                    self.remainingSpace.panelEleven.number_y.SetValue(str(self.remainingSpace.panelEleven.grid.employee_area))
            if self.remainingSpace.GetSelection()==11:
                if self.remainingSpace.panelTwelve.grid.Assemble_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelTwelve.number_x.SetValue(str(self.remainingSpace.panelTwelve.grid.employee))
                    self.remainingSpace.panelTwelve.number_y.SetValue(str(self.remainingSpace.panelTwelve.grid.employee_area))
            if self.remainingSpace.GetSelection()==12:
                if self.remainingSpace.panelThirteen.grid.Archaize_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelThirteen.number_x.SetValue(str(self.remainingSpace.panelThirteen.grid.employee))
                    self.remainingSpace.panelThirteen.number_y.SetValue(str(self.remainingSpace.panelThirteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==13:
                if self.remainingSpace.panelFourteen.grid.First_quality_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFourteen.number_x.SetValue(str(self.remainingSpace.panelFourteen.grid.employee))
                    self.remainingSpace.panelFourteen.number_y.SetValue(str(self.remainingSpace.panelFourteen.grid.employee_area))
        # except:
        #     pass
            if self.remainingSpace.GetSelection()==14:
                if self.remainingSpace.panelFifteen.grid.Shelf_after_membrane_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelFifteen.number_x.SetValue(str(self.remainingSpace.panelFifteen.grid.employee))
                    self.remainingSpace.panelFifteen.number_y.SetValue(str(self.remainingSpace.panelFifteen.grid.employee_area))
        # except:
        #     pass
            if self.remainingSpace.GetSelection()==15:
                if self.remainingSpace.panelSixteen.grid.Package_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSixteen.number_x.SetValue(str(self.remainingSpace.panelSixteen.grid.employee))
                    self.remainingSpace.panelSixteen.number_y.SetValue(str(self.remainingSpace.panelSixteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==16:
                if self.remainingSpace.panelSeventeen.grid.Shelf_after_package_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelSeventeen.number_x.SetValue(str(self.remainingSpace.panelSeventeen.grid.employee))
                    self.remainingSpace.panelSeventeen.number_y.SetValue(str(self.remainingSpace.panelSeventeen.grid.employee_area))
            if self.remainingSpace.GetSelection()==17:
                if self.remainingSpace.panelEighteen.grid.Delievery_schedule_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelEighteen.number_x.SetValue(str(self.remainingSpace.panelEighteen.grid.employee))
                    self.remainingSpace.panelEighteen.number_y.SetValue(str(self.remainingSpace.panelEighteen.grid.employee_area))
            if self.remainingSpace.GetSelection()==18:
                if self.remainingSpace.panelNineteen.grid.Deliver_display(self.start_time,self.employee_name):
                    self.remainingSpace.panelNineteen.number_x.SetValue(str(self.remainingSpace.panelNineteen.grid.employee))
                    self.remainingSpace.panelNineteen.number_y.SetValue(str(self.remainingSpace.panelNineteen.grid.employee_area))
        except:
            pass
class Staff_Workload_Statistics_Month_Addpage_Panel(wx.Notebook):
    def __init__(self, parent, id, log):
        wx.Notebook.__init__(self, parent, id, size=(21, 21), style=
        wx.BK_DEFAULT | wx.SUNKEN_BORDER
                             # wx.BK_TOP
                             # wx.BK_BOTTOM
                             # wx.BK_LEFT
                             # wx.BK_RIGHT
                             # | wx.NB_MULTILINE
                             )
        self.log = log
        self.panelOne = Staff_Workload_Statistics_Month_Panel_CNC(self, log)
        self.panelTwo = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelThree = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelFour = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelFive = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelSix = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelSeven = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelEight = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelNine = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelTen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelEleven = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelTwelve = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelThirteen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelFourteen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelFifteen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelSixteen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelSeventeen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelEighteen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelNineteen = Staff_Workload_Statistics_Month_Panel(self, log)
        self.panelTwenty = Staff_Workload_Statistics_Month_Panel(self, log)
        self.AddPage(self.panelOne, "CNC工位")
        self.AddPage(self.panelTwo, "打孔")
        self.AddPage(self.panelThree, "铣边")
        self.AddPage(self.panelFour, "异形机砂")
        self.AddPage(self.panelFive, "压条")
        self.AddPage(self.panelSix, "手工打磨")
        self.AddPage(self.panelSeven, "半检分色")
        self.AddPage(self.panelEight, "模压前分拣")
        self.AddPage(self.panelNine, "喷胶")
        self.AddPage(self.panelTen, "膜压")
        self.AddPage(self.panelEleven, "静置")
        self.AddPage(self.panelTwelve, "组装")
        self.AddPage(self.panelThirteen, "仿古做旧")
        self.AddPage(self.panelFourteen, "质检")
        self.AddPage(self.panelFifteen, "分包")
        self.AddPage(self.panelSixteen, "打软包")
        self.AddPage(self.panelSeventeen, "硬包与入库")
        self.AddPage(self.panelEighteen, "生成发货单")
        self.AddPage(self.panelNineteen, "发货")
        self.AddPage(self.panelTwenty, "线条工位")
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnPageChanged)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.OnPageChanging)

    def OnPageChanged(self, event):
        if self:
            old = event.GetOldSelection()
            new = event.GetSelection()
            sel = self.GetSelection()
            # self.log.write('OnPageChanged,  old:%d, new:%d, sel:%d\n' % (old, new, sel))
        event.Skip()

    def OnPageChanging(self, event):
        if self:
            old = event.GetOldSelection()
            new = event.GetSelection()
            sel = self.GetSelection()
            # self.log.write('OnPageChanging, old:%d, new:%d, sel:%d\n' % (old, new, sel))
        event.Skip()
class Staff_Workload_Statistics_Month_Panel_CNC(wx.Panel):
    def __init__(self, parent, log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize, style=wx.SUNKEN_BORDER)
        self.grid = Staff_Workload_Statistics_Month_SimpleGrid_CNC(self, self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中员工个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext2 = wx.StaticText(self, label="界面中工作量总和:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(100, 20))
            self.staticboxsizer_number_y_1.Add(self.statictext2, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)

            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_y_1, proportion=0, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_Panel_CNC类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')
class Staff_Workload_Statistics_Month_CNC_DataTable(gridlib.GridTableBase):
    def __init__(self, data, field_name):
        gridlib.GridTableBase.__init__(self)
        self.data = data
        self.field_name = field_name
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          ]

        def GetAttr(self, row, col, kind):
            attr = [self.even, self.odd][row % 8]
            attr.IncRef()
            return attr

    # --------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True

    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,  # The table
                                               gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED,  # what we did to it
                                               1  # how many
                                               )

                self.GetView().ProcessTableMessage(msg)

        innerSetValue(row, col, value)
        # self.data[row][col] = value

    def SetRowValue(self, row, value):
        def innerSetValue(row, value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,  # The table
                                               gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED,  # what we did to it
                                               1  # how many
                                               )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()

        innerSetValue(row, value)
        # self.data[row][col] = value

    # --------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0, numRows):
            self.data.remove(self.data[numRows - 1 - pos - rowNum])
        gridView = self.GetView()
        gridView.BeginBatch()
        deleteMsg = wx.grid.GridTableMessage(self, wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED, pos, numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg = wx.grid.GridTableMessage(self, wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True

    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass
class Staff_Workload_Statistics_Month_SimpleGrid_CNC(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["姓名", "工位号", "玻璃门板面积", "普通门板面积", "顶线面积", "腰线面积", "脚线面积", "故障面积", "手工面积",
                                     "总工作量"]
        information_data = []
        self.cnc_table = Staff_Workload_Statistics_Month_CNC_DataTable(information_data, fyf_grid_operater_station)
        self.SetTable(self.cnc_table, True)
    def operator_calculate(self, data1, data2, data3):
        for i in range(len(data1)):
            if data1[i][2] != '' and data1[i][2] != None:
                data2.append(list(data1[i]))
        for i in range(len(data3)):
            if data3[i][2] != '' and data3[i][2] != None:
                data2.append(list(data3[i]))
    def CNC_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id=[]
        self.employee_manual_area = []
        start_time=date.split('-')
        start_time=start_time[0]+'-'+start_time[1]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id`,`Start_Machining_Time`,`Board_height`,`Board_width`,`Board_type` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9) and DATE_FORMAT(`Start_Machining_Time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m')" % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Machining_operator_id`,`Start_Machining_Time`,`Board_height`,`Board_width`,`Board_type` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9) and DATE_FORMAT(`Start_Machining_Time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m')" % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (date, CNC_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (start_time, CNC_position))
            get_month_staff_manual_area = cursor.fetchall()
                # 获取部件号对应的ID 和开始时间
                #     Total = 0
                #     door_total = 0
                #     romal_total = 0
                #     fascial_total = 0
                #     for i in range(len(get_door_type_area_id)):
                #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
                #         if get_door_type_area_id[i][1] == 1:
                #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
                #         if get_door_type_area_id[i][1] == 9:
                #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
                #         if get_door_type_area_id[i][1] == 3:
                #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
                # print Total
                # print door_total
                # print fascial_total
                # print romal_total
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % CNC_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id,get_staff_manual_area,get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list,get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.cnc_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.cnc_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee =len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def information_display(self,data1,data2,data3,data4,data5):
        transfer = []
        transfer_staff = []
        for i in range(len(data1)):
            if data1[i][0] not in transfer:
                transfer.append(data1[i][0])
                data2.append(list(data1[i]))
        for i in range(len(data2)):
            for x in range(0,7):
                self.SetReadOnly(i, x, True)
            self.SetReadOnly(i, cnc_area, True)
        if len(data4) == 0:#如果读取数据库月工作量为零，本月员工手输工作量不为零的情况下，员工月工作量的计算
            if len(data3) != 0:
                for i in range(len(data3)):
                    if data3[i][1] not in transfer_staff:
                        transfer_staff.append(data3[i][1])
                        data5.append(list(data3[i]))
                    else:#可能有一个月的员工，则不能用break跳出循环
                        for k in range(len(data5)):
                            if data5[k][1] == data3[i][1]:
                                data5[k][2] = data5[k][2] + data3[i][2]
                                data5[k][3] = data5[k][3] + data3[i][3]
        else:#如果读取数据库月工作量不为零，本月员工手输工作量不为零或不为零的情况下，员工月工作量的计算,因为筛选一个月的每一天的程序，所以调整筛选读每天日期包含了含月工作量的数据，需要在计算时处理此情况。
            if len(data3) != 0:
                for i in range(len(data3)):#每个员工工作量等于这个月里的工作量、月工作量的和#可能有一个月的天数，员工可能重复，则不能用break跳出循环
                    if data3[i][1] not in transfer_staff:
                        transfer_staff.append(data3[i][1])
                        data5.append(list(data3[i]))
                    else:
                        for k in range(len(data5)):
                            if data5[k][1] == data3[i][1]:
                                data5[k][2] = data5[k][2] + data3[i][2]
                                data5[k][3] = data5[k][3] + data3[i][3]
                                break
                for i in range(len(data4)):#把这个月里的工作量与月工作量相加
                    for k in range(len(data5)):
                        if data5[k][1] == data4[i][1]:
                            data5[k][2] = data5[k][2] + data4[i][2]
                            data5[k][3] = data5[k][3] + data4[i][3]
            else:
                for i in range(len(data4)):
                    data5.append(list(data4[i]))
    def cnc_area_calculate(self,data1,data3,data4,data5,data6):
        id_number = data1[0][2]
        transfer_two=[]
        display=[]
        id_time_schedule_first=[]
        get_area_id_list=[]
        fault_area = 0
        manual_area = 0
        # 获取读到的同一ID的总的工作量
        for i in range(len(data1)):
            glass_door_area = 0
            door_area = 0
            roman_column_area = 0
            fascia_board_area = 0
            ceiling_area = 0
            belt_line_area = 0
            foot_line_area = 0
            if id_number != data1[i][2]:
                id_number = data1[i][2]
            if data1[i][1]==1 and '玻璃' in data1[i][2]:
                glass_door_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==1:
                door_area = data1[i][4] * data1[i][5]
            if data1[i][1]==3:
                roman_column_area=data1[i][4] * data1[i][5]
            if data1[i][1]==9:
                fascia_board_area = data1[i][4] * data1[i][5]
            total=glass_door_area+door_area+roman_column_area+fascia_board_area+ceiling_area+belt_line_area+foot_line_area
            door_area=door_area+roman_column_area+fascia_board_area
            if id_number not in id_time_schedule_first:
                id_time_schedule_first.append(id_number)
                transfer_list = [id_number,glass_door_area,door_area,ceiling_area,belt_line_area,foot_line_area,total]
                get_area_id_list.append(transfer_list)
            else:
                for k in range(len(get_area_id_list)):
                    if get_area_id_list[k][0] == id_number:
                        get_area_id_list[k][1] = glass_door_area+get_area_id_list[k][1]
                        get_area_id_list[k][2] = door_area+get_area_id_list[k][2]
                        get_area_id_list[k][3] = ceiling_area+get_area_id_list[k][3]
                        get_area_id_list[k][4] = belt_line_area+get_area_id_list[k][4]
                        get_area_id_list[k][5] = foot_line_area+get_area_id_list[k][5]
                        get_area_id_list[k][6] = total+get_area_id_list[k][6]
                        break
        #处理有多人登录时，把工作量平分，然后添加到get_area_id_list中
        #对处理过多人登录的get_area_id_list再次进行同一id工作量统计相加放到display列表中
        for i in range(len(get_area_id_list)):
            id_number=get_area_id_list[i][0]
            if id_number not in transfer_two:
                transfer_two.append(get_area_id_list[i][0])
                transfer_list = [id_number,get_area_id_list[i][1],get_area_id_list[i][2],get_area_id_list[i][3],get_area_id_list[i][4],get_area_id_list[i][5],get_area_id_list[i][6]]
                display.append(transfer_list)
            else:
                for k in range(len(display)):
                    if display[k][0] == id_number:
                        display[k][1] = get_area_id_list[i][1]+display[k][1]
                        display[k][2] = get_area_id_list[i][2]+display[k][2]
                        display[k][3] = get_area_id_list[i][3]+display[k][3]
                        display[k][4] = get_area_id_list[i][4]+display[k][4]
                        display[k][5] = get_area_id_list[i][5]+display[k][5]
                        display[k][6] = get_area_id_list[i][6]+display[k][6]
                        break
        #判断从数据库是否读到此日期下的cnc工位的手输面积，如果读到则在界面显示读到的数据，没有读到则在界面显示非手输面积
        if len(data3)!=0:
            for k in range(len(data5)):
                if data5[k][0] in transfer_two:
                    for i in range(len(display)):
                        if data5[k][0]==display[i][0]:
                            for h in range(len(data3)):
                                if display[i][0] == data3[h][1]:
                                    fault_area = data3[h][2]
                                    manual_area = data3[h][3]
                            display[i][6] = (display[i][6] / 1000000 + fault_area + manual_area) * 1000000
                            data4 = data4 + display[i][6]
                            inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000, fault_area,manual_area,display[i][6]/ 1000000]
                            self.cnc_table.SetRowValue(k, inform)
                            for x in range(0, 10):
                                self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
                else:
                    for h in range(len(data3)):
                        if data5[k][0]==data3[h][1]:
                            data4 = data4 + (data3[h][2]+data3[h][3])*1000000
                            inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0', data3[h][2],data3[h][3],data3[h][2]+data3[h][3]]
                            self.cnc_table.SetRowValue(k, inform)
                            if (data3[h][2]+data3[h][3])!=0 and (data3[h][2]+data3[h][3])!=0.0 and (data3[h][2]+data3[h][3])!=' ':
                                for x in range(0, 10):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
        else:
            for k in range(len(data5)):
                for i in range(len(display)):
                    if data5[k][0]==display[i][0]:
                        data4 = data4 + display[i][6]
                        inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000, '0','0',display[i][6]/ 1000000]
                        self.cnc_table.SetRowValue(k, inform)
                        for x in range(0, 10):
                            self.SetCellBackgroundColour(k, x, wx.YELLOW)
                        break
                    else:
                        inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0', '0', '0','0']
                        self.cnc_table.SetRowValue(k, inform)
        if data6[0]!='None':
            for k in range(len(data5)):
                if data5[k][0]==data6[0]:
                    for x in range(0,10):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data4/ 1000000
    def cnc_only_Under_line_area(self,data1,data2,data3,data6):
        for i in range(len(data6)):
            if len(data1) != 0:
                for h in range(len(data1)):
                    if data6[i][0]==data1[h][1]:
                        data2 = data2 +(data1[h][2]+data1[h][3])
                        inform = [data1[h][0], data1[h][1], '0', '0', '0', '0', '0', data1[h][2], data1[h][3],data1[h][2]+data1[h][3]]
                        self.cnc_table.SetRowValue(i, inform)
                        if (data1[h][2]+data1[h][3]) != 0 and (data1[h][2]+data1[h][3]) != 0.0 and (data1[h][2]+data1[h][3]) != ' ':
                            for x in range(0,10):
                                self.SetCellBackgroundColour(i, x, wx.YELLOW)
            else:
                inform = [data6[i][1], data6[i][0], '0', '0', '0', '0', '0', '0', '0','0']
                self.cnc_table.SetRowValue(i, inform)
        if data3[0]!='None':
            for k in range(len(data6)):
                if data6[k][0]==data3[0]:
                    for x in range(0,10):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data2
class Staff_Workload_Statistics_Month_Panel(wx.Panel):
    def __init__(self, parent, log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize, style=wx.SUNKEN_BORDER)
        self.grid = Staff_Workload_Statistics_Month_SimpleGrid(self, self.log)
        try:
            self.hbox = wx.BoxSizer(wx.HORIZONTAL)
            self.gbox = wx.BoxSizer(wx.VERTICAL)
            self.staticbox_date = wx.StaticBox(self, -1)
            self.staticboxsizer_date = wx.StaticBoxSizer(self.staticbox_date, wx.HORIZONTAL)
            # 静态wx.HORIZONTAL水平放时间、合同查询、订单查询控件的盒子

            self.staticbox_time_number_x_1 = wx.StaticBox(self, -1)
            self.staticboxsizer_number_x_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext6 = wx.StaticText(self, label="界面中员工个数:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_x = wx.TextCtrl(self, -1, pos=(10, 10), size=(35, 20))
            self.staticboxsizer_number_x_1.Add(self.statictext6, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_x_1.Add(self.number_x, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1 = wx.StaticBoxSizer(self.staticbox_time_number_x_1, wx.HORIZONTAL)
            self.statictext2 = wx.StaticText(self, label="界面中工作量总和:")  # 分别水平放'从:起始时间'、'至:截止时间'
            self.number_y = wx.TextCtrl(self, -1, pos=(10, 10), size=(100, 20))
            self.staticboxsizer_number_y_1.Add(self.statictext2, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_number_y_1.Add(self.number_y, proportion=0, flag=wx.EXPAND, border=3)

            self.staticboxsizer_date.Add(self.staticboxsizer_number_x_1, proportion=0, flag=wx.EXPAND, border=3)
            self.staticboxsizer_date.Add(self.staticboxsizer_number_y_1, proportion=0, flag=wx.EXPAND, border=3)

            self.hbox.Add(self.staticboxsizer_date, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.hbox, proportion=0, flag=wx.EXPAND | wx.ALL, border=3)
            self.gbox.Add(self.grid, proportion=1, flag=wx.EXPAND | wx.ALL, border=3)
            self.SetSizer(self.gbox)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_Panel类建面板、实例化Grid、显示合同、订单等个数部分出现错误，请进行检查 \r\n')
class Staff_Workload_Statistics_Month_DataTable(gridlib.GridTableBase):
    def __init__(self, data, field_name):
        gridlib.GridTableBase.__init__(self)
        self.data = data
        self.field_name = field_name
        self.odd = gridlib.GridCellAttr()
        self.even = gridlib.GridCellAttr()
        self.dataTypes = [gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_STRING,
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          gridlib.GRID_VALUE_FLOAT + ':6,6',
                          ]

        def GetAttr(self, row, col, kind):
            attr = [self.even, self.odd][row % 8]
            attr.IncRef()
            return attr

    # --------------------------------------------------
    # required methods for the wxPyGridTableBase interface

    def GetNumberRows(self):
        return len(self.data)

    def GetNumberCols(self):
        return len(self.field_name)

    def IsEmptyCell(self, row, col):
        try:
            return not self.data[row][col]
        except IndexError:
            return True

    def GetValue(self, row, col):
        try:
            return self.data[row][col]
        except IndexError:
            return ''

    def SetValue(self, row, col, value):
        def innerSetValue(row, col, value):
            try:
                self.data[row][col] = value
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, col, value)

                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,  # The table
                                               gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED,  # what we did to it
                                               1  # how many
                                               )

                self.GetView().ProcessTableMessage(msg)

        innerSetValue(row, col, value)
        # self.data[row][col] = value

    def SetRowValue(self, row, value):
        def innerSetValue(row, value):
            try:
                for i in range(len(value)):
                    self.data[row][i] = value[i]
            except IndexError:
                # add a new row
                self.data.append([''] * self.GetNumberCols())
                innerSetValue(row, value)
                gridView = self.GetView()
                gridView.BeginBatch()
                # tell the grid we've added a row
                msg = gridlib.GridTableMessage(self,  # The table
                                               gridlib.GRIDTABLE_NOTIFY_ROWS_APPENDED,  # what we did to it
                                               1  # how many
                                               )
                self.GetView().ProcessTableMessage(msg)
                gridView.EndBatch()

        innerSetValue(row, value)
        # self.data[row][col] = value

    # --------------------------------------------------
    # Some optional methods
    def GetColLabelValue(self, col):
        return self.field_name[col]

    def GetTypeName(self, row, col):
        return self.dataTypes[col]

    def CanGetValueAs(self, row, col, typeName):
        colType = self.dataTypes[col].split(':')[0]
        if typeName == colType:
            return True
        else:
            return False

    def CanSetValueAs(self, row, col, typeName):
        return self.CanGetValueAs(row, col, typeName)

    def AppendCols(self, numCols=1):  # real signature unknown; restored from __doc__
        """
        AppendCols(numCols=1) -> bool

        Exactly the same as AppendRows() but for columns.
        """
        return False

    def AppendRows(self, numRows=1):  # real signature unknown; restored from __doc__
        """
        AppendRows(numRows=1) -> bool

        Append additional rows at the end of the table.
        """
        return (self.GetNumberRows() + numRows)

    def DeleteRows(self, pos=0, numRows=1):  # real signature unknown; restored from __doc__
        """
        DeleteRows(pos=0, numRows=1) -> bool

        Delete rows from the table.
        """
        if self.data is None or len(self.data) == 0:
            return False
        for rowNum in range(0, numRows):
            self.data.remove(self.data[numRows - 1 - pos - rowNum])
        gridView = self.GetView()
        gridView.BeginBatch()
        deleteMsg = wx.grid.GridTableMessage(self, wx.grid.GRIDTABLE_NOTIFY_ROWS_DELETED, pos, numRows)
        gridView.ProcessTableMessage(deleteMsg)
        gridView.EndBatch()
        getValueMsg = wx.grid.GridTableMessage(self, wx.grid.GRIDTABLE_REQUEST_VIEW_GET_VALUES)
        gridView.ProcessTableMessage(getValueMsg)
        # if self.onGridValueChanged:
        #     self.onGridValueChanged()
        return True

    # def DeleteRows(*args, **kwargs):
    #     """DeleteRows(self, size_t pos=0, size_t numRows=1) -> bool"""
    #     return _grid.GridTableBase_DeleteRows(*args, **kwargs)
    #

    def Clear(self):  # real signature unknown; restored from __doc__
        """
        Clear()

        Clear the table contents.
        """
        pass
class Staff_Workload_Statistics_Month_SimpleGrid(gridlib.Grid):  ##, mixins.GridAutoEditMixin):
    def __init__(self, parent, log):
        self.log = log
        gridlib.Grid.__init__(self, parent, -1, size=(1500, 596))
        fyf_grid_operater_station = ["姓名", "工位号", "门板面积", "罗马柱面积", "楣板面积", "顶线面积", "腰线面积", "脚线面积", "故障面积", "手工面积",
                                     "总工作量"]
        information_data = []
        self.deliver_mark = 130
        self.table = Staff_Workload_Statistics_Month_DataTable(information_data, fyf_grid_operater_station)
        self.SetTable(self.table, True)

    def operator_calculate(self, data1, data2, data3):
        for i in range(len(data1)):
            if data1[i][2] != '' and data1[i][2] != None:
                data2.append(list(data1[i]))
        for i in range(len(data3)):
            if data3[i][2] != '' and data3[i][2] != None:
                data2.append(list(data3[i]))
    def information_display(self,data1,data2,data3,data4,data5):
        transfer = []
        transfer_staff = []
        for i in range(len(data1)):
            if data1[i][0] not in transfer:
                transfer.append(data1[i][0])
                data2.append(list(data1[i]))
        for i in range(len(data2)):
            for x in range(0,8):
                self.SetReadOnly(i, x, True)
            self.SetReadOnly(i, area_pos, True)
        if len(data4) == 0:#如果读取数据库月工作量为零，本月员工手输工作量不为零的情况下，员工月工作量的计算
            if len(data3) != 0:
                for i in range(len(data3)):
                    if data3[i][1] not in transfer_staff:
                        transfer_staff.append(data3[i][1])
                        data5.append(list(data3[i]))
                    else:#可能有一个月的员工，则不能用break跳出循环
                        for k in range(len(data5)):
                            if data5[k][1] == data3[i][1]:
                                data5[k][2] = data5[k][2] + data3[i][2]
                                data5[k][3] = data5[k][3] + data3[i][3]
        else:#如果读取数据库月工作量不为零，本月员工手输工作量不为零或不为零的情况下，员工月工作量的计算,因为筛选一个月的每一天的程序，所以调整筛选读每天日期包含了含月工作量的数据，需要在计算时处理此情况。
            if len(data3) != 0:
                for i in range(len(data3)):#每个员工工作量等于这个月里的工作量、月工作量的和#可能有一个月的天数，员工可能重复，则不能用break跳出循环
                    if data3[i][1] not in transfer_staff:
                        transfer_staff.append(data3[i][1])
                        data5.append(list(data3[i]))
                    else:
                        for k in range(len(data5)):
                            if data5[k][1] == data3[i][1]:
                                data5[k][2] = data5[k][2] + data3[i][2]
                                data5[k][3] = data5[k][3] + data3[i][3]
                                break
                for i in range(len(data4)):#把这个月里的工作量与月工作量相加
                    for k in range(len(data5)):
                        if data5[k][1] == data4[i][1]:
                            data5[k][2] = data5[k][2] + data4[i][2]
                            data5[k][3] = data5[k][3] + data4[i][3]
            else:
                for i in range(len(data4)):
                    data5.append(list(data4[i]))
    def six_area_calculate(self,data1,data3,data4,data5,data6):
        id_number = data1[0][2]
        transfer_two=[]
        display=[]
        id_time_schedule_first=[]
        get_area_id_list=[]
        fault_area = 0
        manual_area = 0
        # 获取读到的同一ID的总的工作量
        for i in range(len(data1)):
            door_area = 0
            roman_column_area = 0
            fascia_board_area = 0
            ceiling_area = 0
            belt_line_area = 0
            foot_line_area = 0
            if id_number != data1[i][2]:
                id_number = data1[i][2]
            if data1[i][1]==1:
                door_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==3:
                roman_column_area=data1[i][4] * data1[i][5]
            elif data1[i][1]==9:
                fascia_board_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==4:
                ceiling_area=data1[i][5]
            elif data1[i][1]==5:
                belt_line_area=data1[i][5]
            elif data1[i][1]==6:
                foot_line_area=data1[i][5]
            total=door_area+roman_column_area+fascia_board_area+ceiling_area+belt_line_area+foot_line_area
            if id_number not in id_time_schedule_first:
                id_time_schedule_first.append(id_number)
                transfer_list = [id_number, door_area ,roman_column_area,fascia_board_area,ceiling_area,belt_line_area,foot_line_area,total]
                get_area_id_list.append(transfer_list)
            else:
                for k in range(len(get_area_id_list)):
                    if get_area_id_list[k][0] == id_number:
                        get_area_id_list[k][1] = door_area+get_area_id_list[k][1]
                        get_area_id_list[k][2] = roman_column_area+get_area_id_list[k][2]
                        get_area_id_list[k][3] = fascia_board_area+get_area_id_list[k][3]
                        get_area_id_list[k][4] = ceiling_area+get_area_id_list[k][4]
                        get_area_id_list[k][5] = belt_line_area+get_area_id_list[k][5]
                        get_area_id_list[k][6] = foot_line_area+get_area_id_list[k][6]
                        get_area_id_list[k][7] = total+get_area_id_list[k][7]
                        break
        #处理有多人登录时，把工作量平分，然后添加到get_area_id_list中
        #对处理过多人登录的get_area_id_list再次进行同一id工作量统计相加放到display列表中
        for i in range(len(get_area_id_list)):
            id_number=get_area_id_list[i][0]
            if id_number not in transfer_two:
                transfer_two.append(get_area_id_list[i][0])
                transfer_list = [id_number,get_area_id_list[i][1],get_area_id_list[i][2],get_area_id_list[i][3],get_area_id_list[i][4],get_area_id_list[i][5],get_area_id_list[i][6],get_area_id_list[i][7]]
                display.append(transfer_list)
            else:
                for k in range(len(display)):
                    if display[k][0] == id_number:
                        display[k][1] = get_area_id_list[i][1]+display[k][1]
                        display[k][2] = get_area_id_list[i][2]+display[k][2]
                        display[k][3] = get_area_id_list[i][3]+display[k][3]
                        display[k][4] = get_area_id_list[i][4]+display[k][4]
                        display[k][5] = get_area_id_list[i][5]+display[k][5]
                        display[k][6] = get_area_id_list[i][6]+display[k][6]
                        display[k][7] = get_area_id_list[i][7]+display[k][7]
                        break
        if len(data3)!=0:
            for k in range(len(data5)):
                if data5[k][0] in transfer_two:
                    for i in range(len(display)):
                        if data5[k][0]==display[i][0]:
                            for h in range(len(data3)):
                                if display[i][0] == data3[h][1]:
                                    fault_area = data3[h][2]
                                    manual_area = data3[h][3]
                            display[i][7] = (display[i][7] / 1000000 + fault_area + manual_area) * 1000000
                            data4 = data4 + display[i][7]
                            inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000,fault_area,manual_area,display[i][7]/ 1000000]
                            self.table.SetRowValue(k, inform)
                            for x in range(0, 11):
                                self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
                else:
                    for h in range(len(data3)):
                        if data5[k][0]==data3[h][1]:
                            data4 = data4 + (data3[h][2]+data3[h][3])*1000000
                            inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0','0',data3[h][2],data3[h][3],data3[h][2]+data3[h][3]]
                            self.table.SetRowValue(k, inform)
                            if (data3[h][2]+data3[h][3])!=0 and (data3[h][2]+data3[h][3])!=0.0 and (data3[h][2]+data3[h][3])!=' ':
                                for x in range(0, 11):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
        else:
            for k in range(len(data5)):
                for i in range(len(display)):
                    if data5[k][0]==display[i][0]:
                        data4 = data4 + display[i][7]
                        inform = [data5[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000, '0','0',display[i][7]/ 1000000]
                        self.table.SetRowValue(k, inform)
                        for x in range(0, 11):
                            self.SetCellBackgroundColour(k, x, wx.YELLOW)
                        break
                    else:
                        inform = [data5[k][1], data5[k][0], '0', '0','0', '0', '0', '0', '0', '0','0']
                        self.table.SetRowValue(k, inform)
        if data6[0]!='None':#如果界面查询到有效员工，则此行显示青色
            for k in range(len(data5)):
                if data5[k][0]==data6[0]:
                    for x in range(0, 11):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data4/ 1000000
    def six_only_Under_line_area(self,data1,data2,data3,data6):
        for i in range(len(data6)):
            if len(data1) != 0:
                for h in range(len(data1)):
                    if data6[i][0]==data1[h][1]:
                        data2 = data2 +(data1[h][2]+data1[h][3])
                        inform = [data1[h][0], data1[h][1], '0', '0', '0', '0', '0','0', data1[h][2], data1[h][3],data1[h][2]+data1[h][3]]
                        self.table.SetRowValue(i, inform)
                        if (data1[h][2]+data1[h][3]) != 0 and (data1[h][2]+data1[h][3]) != 0.0 and (data1[h][2]+data1[h][3]) != ' ':
                            for x in range(0,11):
                                self.SetCellBackgroundColour(i, x, wx.YELLOW)
            else:
                inform = [data6[i][1], data6[i][0], '0', '0', '0', '0', '0','0', '0', '0','0']
                self.table.SetRowValue(i, inform)
        if data3[0]!='None':
            for k in range(len(data6)):
                if data6[k][0]==data3[0]:
                    for x in range(0,11):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data2
    def Drilling_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        start_time = date.split('-')
        start_time = start_time[0] + '-' + start_time[1]
        grid_numRows = self.GetNumberRows()
        self.DeleteRows(0, grid_numRows)
        try:
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Drilling_operator_id`,`Drilling_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1) and DATE_FORMAT(`Drilling_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Hole`!='%s'" % (
                date, hole_type))
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Drilling_operator_id`,`Drilling_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1) and DATE_FORMAT(`Drilling_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and `Hole`!='%s'" % (
                date, hole_type))
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                date, Drilling_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                start_time, Drilling_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Drilling_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list,get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            # 对于同一工号的员工的生活量进行相加
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Edge_milling_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Edge_milling_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and (`Edge_type`!='' and `Edge_type`!='0'and `Edge_type`!='平板直边')" % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Edge_milling_operator_id`,`Edge_milling_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Edge_milling_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and (`Edge_type`!='' and `Edge_type`!='0'and `Edge_type`!='平板直边')" % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Edge_milling_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Edge_milling_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Edge_milling_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Polish_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Polish_operator_id`,`Polish_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Polish_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Polish_operator_id`,`Polish_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 ) and DATE_FORMAT(`Polish_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Polish_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Polish_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Polish_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,
                                     self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
            
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            # 对于同一工号的员工的生活量进行相加
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Regula_display(self, date, data):  # 压条暂时不考虑顶线、腰线、脚线
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Regula_operator_id`,`Regula_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9) and DATE_FORMAT(`Regula_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and (`Bar_type`!='' and `Bar_type`!='0')" % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Regula_operator_id`,`Regula_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9) and DATE_FORMAT(`Regula_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and (`Bar_type`!='' and `Bar_type`!='0')" % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Regula_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Regula_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Regula_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Multiple_six_area_calculate(self,data1,data3,data4,data5,data6):
        id_number = data1[0][2]
        transfer_two=[]
        display=[]
        id_time_schedule_first=[]
        get_area_id_list=[]
        # 获取读到的同一ID的总的工作量
        for i in range(len(data1)):
            door_area = 0
            roman_column_area = 0
            fascia_board_area = 0
            ceiling_area = 0
            belt_line_area = 0
            foot_line_area = 0
            if id_number != data1[i][2]:
                id_number = data1[i][2]
            if data1[i][1]==1:
                door_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==3:
                roman_column_area=data1[i][4] * data1[i][5]
            elif data1[i][1]==9:
                fascia_board_area = data1[i][4] * data1[i][5]
            elif data1[i][1]==4:
                ceiling_area=data1[i][5]
            elif data1[i][1]==5:
                belt_line_area=data1[i][5]
            elif data1[i][1]==6:
                foot_line_area=data1[i][5]
            total=door_area+roman_column_area+fascia_board_area+ceiling_area+belt_line_area+foot_line_area
            if id_number not in id_time_schedule_first:
                id_time_schedule_first.append(id_number)
                transfer_list = [id_number, door_area ,roman_column_area,fascia_board_area,ceiling_area,belt_line_area,foot_line_area,total]
                get_area_id_list.append(transfer_list)
            else:
                for k in range(len(get_area_id_list)):
                    if get_area_id_list[k][0] == id_number:
                        get_area_id_list[k][1] = door_area+get_area_id_list[k][1]
                        get_area_id_list[k][2] = roman_column_area+get_area_id_list[k][2]
                        get_area_id_list[k][3] = fascia_board_area+get_area_id_list[k][3]
                        get_area_id_list[k][4] = ceiling_area+get_area_id_list[k][4]
                        get_area_id_list[k][5] = belt_line_area+get_area_id_list[k][5]
                        get_area_id_list[k][6] = foot_line_area+get_area_id_list[k][6]
                        get_area_id_list[k][7] = total+get_area_id_list[k][7]
                        break
        #处理有多人登录时，把工作量平分，然后添加到get_area_id_list中
        for i in range(len(get_area_id_list)):
            if '&' in get_area_id_list[i][0].strip():
                get_name_list = get_area_id_list[i][0].strip().split('&')
                m=len(get_name_list)
                for n in range(len(get_name_list)):
                    transfer=[get_name_list[n],get_area_id_list[i][1]/m,get_area_id_list[i][2]/m,get_area_id_list[i][3]/m,get_area_id_list[i][4]/m,get_area_id_list[i][5]/m,get_area_id_list[i][6]/m,get_area_id_list[i][7]/m]
                    get_area_id_list.append(transfer)
        #对处理过多人登录的get_area_id_list再次进行同一id工作量统计相加放到display列表中
        for i in range(len(get_area_id_list)):
            id_number=get_area_id_list[i][0]
            if id_number not in transfer_two:
                transfer_two.append(get_area_id_list[i][0])
                transfer_list = [id_number,get_area_id_list[i][1],get_area_id_list[i][2],get_area_id_list[i][3],get_area_id_list[i][4],get_area_id_list[i][5],get_area_id_list[i][6],get_area_id_list[i][7]]
                display.append(transfer_list)
            else:
                for k in range(len(display)):
                    if display[k][0] == id_number:
                        display[k][1] = get_area_id_list[i][1]+display[k][1]
                        display[k][2] = get_area_id_list[i][2]+display[k][2]
                        display[k][3] = get_area_id_list[i][3]+display[k][3]
                        display[k][4] = get_area_id_list[i][4]+display[k][4]
                        display[k][5] = get_area_id_list[i][5]+display[k][5]
                        display[k][6] = get_area_id_list[i][6]+display[k][6]
                        display[k][7] = get_area_id_list[i][7]+display[k][7]
                        break
        # for i in range(len(display)):#获取在数据库读到的工作量总和
        #     if '&' not in display[i][0].strip():
        #         data5 = self.Multiple_display(display[i][0], display[i][1], display[i][2], display[i][3], display[i][4],display[i][5], display[i][6], display[i][7], data4, data5, data6)
        if len(data4)!=0:
            for k in range(len(data6)):
                if data6[k][0] in transfer_two:
                    for i in range(len(display)):
                        if '&' not in display[i][0].strip():
                            if data6[k][0]==display[i][0]:
                                for h in range(len(data4)):
                                    if display[i][0] == data4[h][1]:
                                        fault_area = data4[h][2]
                                        manual_area = data4[h][3]
                                display[i][7] = (display[i][7] / 1000000 + fault_area + manual_area) * 1000000
                                data5 = data5 + display[i][7]
                                inform = [data6[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000,fault_area,manual_area,display[i][7]/ 1000000]
                                self.table.SetRowValue(k, inform)
                                for x in range(0, 11):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                                break
                else:
                    for h in range(len(data4)):
                        if data6[k][0]==data4[h][1]:
                            data5 = data5 + (data4[h][2]+data4[h][3])*1000000
                            inform = [data6[k][1], data6[k][0], '0', '0','0', '0', '0','0',data4[h][2],data4[h][3],data4[h][2]+data4[h][3]]
                            self.table.SetRowValue(k, inform)
                            if (data4[h][2]+data4[h][3])!=0 and (data4[h][2]+data4[h][3])!=0.0 and (data4[h][2]+data4[h][3])!=' ':
                                for x in range(0, 11):
                                    self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
        else:
            for k in range(len(data6)):
                for i in range(len(display)):
                    if '&' not in display[i][0].strip():
                        if data6[k][0]==display[i][0]:
                            data5 = data5 + display[i][7]
                            inform = [data6[k][1], display[i][0],display[i][1]/ 1000000,display[i][2]/ 1000000,display[i][3]/ 1000000,display[i][4]/ 1000000,display[i][5]/ 1000000,display[i][6]/ 1000000, '0','0',display[i][7]/ 1000000]
                            self.table.SetRowValue(k, inform)
                            for x in range(0, 11):
                                self.SetCellBackgroundColour(k, x, wx.YELLOW)
                            break
                        else:
                            inform = [data6[k][1], data6[k][0], '0', '0','0', '0', '0', '0', '0', '0','0']
                            self.table.SetRowValue(k, inform)
        if data3[0]!='None':#如果界面员工筛选为某一固定员工
            for k in range(len(data6)):
                if data6[k][0] == data3[0]:
                    for x in range(0, 11):
                        self.SetCellBackgroundColour(k, x, wx.CYAN)
        return data5/1000000
    def Other_six_area_calculate(self,data1,data2,data4,data5,data6):
        Total = 0
        door_total = 0
        romal_total = 0
        fascial_total = 0
        ceiling_area = 0
        belt_line_area = 0
        foot_line_area = 0
        fault_area = 0
        manual_area = 0
        for i in range(len(data1)):
            if data1[i][1] == 1:
                door_total = door_total + data1[i][4] * data1[i][5]
            if data1[i][1] == 9:
                fascial_total = fascial_total + data1[i][4] * data1[i][5]
            if data1[i][1] == 3:
                romal_total = romal_total + data1[i][4] * data1[i][5]
            if data1[i][1] == 4:
                ceiling_area = ceiling_area + data1[i][5]
            if data1[i][1] == 5:
                belt_line_area = belt_line_area + data1[i][5]
            if data1[i][1] == 6:
                foot_line_area = foot_line_area + data1[i][5]
        Total = Total + door_total+fascial_total+romal_total+ceiling_area+belt_line_area+foot_line_area
        b=len(data5)
        if len(data2) != 0:
            for i in range(len(data5)):
                for k in range(0,8):
                    self.SetReadOnly(i, k, True)
                for k in range(len(data2)):
                    if data5[i][0]==data2[k][1]:
                        fault_area=data2[k][2]
                        manual_area=data2[k][3]
                Total=(Total/ b/ 1000000+fault_area+manual_area)*1000000*b
                data4=Total/b+data4
                inform = [data5[i][1], data5[i][0], door_total / b / 1000000, romal_total / b / 1000000,fascial_total / b / 1000000,
                          ceiling_area / b / 1000000, belt_line_area / b / 1000000, foot_line_area / b / 1000000,fault_area, manual_area, Total / b / 1000000]
                self.table.SetRowValue(i, inform)
                for x in range(0, 11):
                    self.SetCellBackgroundColour(i, x, wx.YELLOW)
        else:
            data4 = Total
            for i in range(len(data5)):
                for k in range(0,8):
                    self.SetReadOnly(i, k, True)
                inform = [data5[i][1], data5[i][0], door_total / b / 1000000, romal_total / b / 1000000,fascial_total / b / 1000000,
                          ceiling_area / b / 1000000, belt_line_area / b / 1000000, foot_line_area / b / 1000000,'0', '0', Total / b / 1000000]
                self.table.SetRowValue(i, inform)
                for x in range(0, 11):
                    self.SetCellBackgroundColour(i, x, wx.YELLOW)
        if data6[0] != 'None':
            for i in range(len(data5)):
                if data5[i][0] == data6[0]:
                    for x in range(0,11):
                        self.SetCellBackgroundColour(i, x, wx.CYAN)
        return data4/1000000
    def Artificial_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Artificial_polishing_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Artificial_polishing_operator_id`,`Artificial_polishing_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Artificial_polishing_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Artificial_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Artificial_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Artificial_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Half_test_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Half_test_operator_id`,`Half_test_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Half_test_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Half_test_operator_id`,`Half_test_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Half_test_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Half_test_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Half_test_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Half_test_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
    def Sort_before_membrane_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Sort_before_membrane_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Sort_before_membrane_operator_id`,`Sort_before_membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Sort_before_membrane_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Sort_before_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Sort_before_membrane_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Sort_before_membrane_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Glue_spray_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`First_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Glue_spray_operator_id`,`Glue_spray_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`First_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Glue_spray_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Glue_spray_position))
            get_month_staff_manual_area = cursor.fetchall()
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Glue_spray_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Membrane_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Membrane_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Membrane_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Membrane_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.Multiple_six_area_calculate(get_door_type_area_id_list,data,self.employee_manual_area,count_area,self.get_job_id)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Static_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Membrane_operator_id`,`Membrane_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Membrane_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, static_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, static_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % static_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
            # 对于同一工号的员工的生活量进行相加
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.Other_six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def First_quality_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Quality_testing_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Quality_testing_operator_id`,`Quality_testing_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Quality_testing_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Quality_testing_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Quality_testing_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Quality_testing_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Assemble_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Assemble_operator_id`,`Assemble_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Assemble_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Assemble_operator_id`,`Assemble_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Assemble_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Assemble_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Assemble_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Assemble_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Archaize_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Archaize_operator_id`,`Archaize_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Archaize_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Archaize_operator_id`,`Archaize_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Archaize_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Archaize_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Archaize_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Archaize_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,
                                     self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Shelf_after_membrane_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_membrane_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_membrane_operator_id`,`Shelf_after_membrane_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_membrane_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Shelf_after_membrane_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Shelf_after_membrane_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Shelf_after_membrane_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Package_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Package_operator_id`,`Package_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Package_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Package_operator_id`,`Package_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Package_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Package_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Package_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Package_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Shelf_after_package_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_package_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Shelf_after_package_operator_id`,`Shelf_after_package_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Shelf_after_package_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Shelf_after_package_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Shelf_after_package_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Shelf_after_package_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Delievery_schedule_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Delievery_schedule_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Delievery_schedule_operator_id`,`Delievery_schedule_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Delievery_schedule_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Delievery_schedule_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Delievery_schedule_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Delievery_schedule_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
    def Deliver_display(self, date, data):
        get_door_type_area_id_list = []
        count_area = 0
        self.employee_area = 0
        self.get_job_id = []
        self.employee_manual_area = []
        try:
            grid_numRows = self.GetNumberRows()
            self.DeleteRows(0, grid_numRows)
            start_time = date.split('-')
            start_time = start_time[0] + '-' + start_time[1]
            db = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[0],
                                 charset=charset)  # 打开数据库连接注charset是否需要
            cursor = db.cursor()  # 使用cursor()方法获取操作游标
            db_management = MySQLdb.connect(host=server_ip, user=user_list[0], passwd=password, db=database[2],
                                            charset=charset)  # 打开数据库连接注charset是否需要
            cursor_management = db_management.cursor()  # 使用cursor()方法获取操作游标
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Deliver_operator_id`,`Deliver_begin_time`,`Board_height`,`Board_width` FROM `order_element_online` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Deliver_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            cursor.execute(
                "SELECT `Part_id`,`Element_type_id`,`Deliver_operator_id`,`Deliver_begin_time`,`Board_height`,`Board_width` FROM `order_element_complete` WHERE (`Element_type_id`=1 or `Element_type_id`=3 or `Element_type_id`=9 or `Element_type_id`=4 or `Element_type_id`=5 or `Element_type_id`=6) and DATE_FORMAT(`Deliver_begin_time`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') " % date)
            get_door_type_area_id_complete = cursor.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            # 获取部件号对应的ID 和开始时间
            #     Total = 0
            #     door_total = 0
            #     romal_total = 0
            #     fascial_total = 0
            #     ceiling_area = 0
            #     belt_line_area = 0
            #     foot_line_area = 0
            #     for i in range(len(get_door_type_area_id)):
            #         Total = Total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 1:
            #             door_total = door_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 9:
            #             fascial_total = fascial_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 3:
            #             romal_total = romal_total + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 4:
            #             ceiling_area = ceiling_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 5:
            #             belt_line_area = belt_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #         if get_door_type_area_id[i][1] == 6:
            #             foot_line_area = foot_line_area + get_door_type_area_id[i][4] * get_door_type_area_id[i][5]
            #     print Total
            #     print door_total
            #     print fascial_total
            #     print romal_total
            #     print ceiling_area
            #     print belt_line_area
            #     print foot_line_area
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE DATE_FORMAT(`Work_day`, '%%Y%%m')=DATE_FORMAT(('%s'), '%%Y%%m') and  `Position`='%s'" % (
                    date, Deliver_position))
            get_staff_manual_area = cursor.fetchall()
            cursor.execute(
                "SELECT `Name`,`Job_id`,`fault_area`,`manual_area`,`Work_day` FROM `work_staff_workload_manual_area` WHERE `Month_day`='%s' and  `Position`='%s'" % (
                    start_time, Deliver_position))
            get_month_staff_manual_area = cursor.fetchall()
            cursor_management.execute(
                "SELECT `Job_id`,`Name` FROM `info_staff_new` WHERE `Position`='%d' ORDER BY `Job_id` " % Deliver_position)
            get_job_id = cursor_management.fetchall()  # 获取部件号为门板、门型、部件型号、状态、工序：打孔、铣边等
            db.close()
            db_management.close()
            self.information_display(get_job_id, self.get_job_id, get_staff_manual_area, get_month_staff_manual_area,self.employee_manual_area)
            self.operator_calculate(get_door_type_area_id, get_door_type_area_id_list, get_door_type_area_id_complete)
        except:
            self.log.WriteText('生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC连接数据库失败，请进行检查 \r\n')
        try:
            if len(get_door_type_area_id_list)!=0:
                self.employee_area=self.six_area_calculate(get_door_type_area_id_list,self.employee_manual_area,count_area,self.get_job_id,data)
            else:
                self.employee_area=self.six_only_Under_line_area(self.employee_manual_area,count_area,data,self.get_job_id)
            self.employee = len(self.get_job_id)
            return True
        except:
            self.log.WriteText(
                '生产进度管理，FYF_Pane.py中Staff_Workload_Statistics_Month_SimpleGrid_CNC界面数据处理、显示失败，请进行检查 \r\n')
#----------------------------------------------------------------
#编写小车程序
#----------------------------------------------------------------
class led_vehicle_ctrl_panel(wx.Panel):
    def __init__(self, parent,log):
        self.log = log
        wx.Panel.__init__(self, parent, wx.ID_ANY, wx.DefaultPosition,
                          wx.DefaultSize,style=wx.SUNKEN_BORDER)









